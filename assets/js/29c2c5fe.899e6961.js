"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8641],{44107:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>l,frontMatter:()=>c,metadata:()=>i,toc:()=>a});var t=o(85893),r=o(11151);const c={},d="Configuration Reference",i={id:"ingest/configuration-reference",title:"Configuration Reference",description:"This page contains reference documentation for the configuration options for the MongoDB RAG Ingest CLI.",source:"@site/docs/ingest/configuration-reference.md",sourceDirName:"ingest",slug:"/ingest/configuration-reference",permalink:"/chatbot/ingest/configuration-reference",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb/chatbot/tree/main/docs/docs/ingest/configuration-reference.md",tags:[],version:"current",frontMatter:{},sidebar:"main",previous:{title:"Configure the Ingest CLI",permalink:"/chatbot/ingest/configure"},next:{title:"CLI Commands Reference",permalink:"/chatbot/ingest/command-reference"}},s={},a=[{value:"API Reference",id:"api-reference",level:2},{value:"<code>Config</code>",id:"config",level:2},{value:"<code>IngestMetaStore</code>",id:"ingestmetastore",level:2},{value:"<code>PageStore</code>",id:"pagestore",level:2},{value:"<code>EmbeddedContentStore</code>",id:"embeddedcontentstore",level:2},{value:"<code>DataSource</code>",id:"datasource",level:2},{value:"<code>Embedder</code>",id:"embedder",level:2},{value:"<code>ChunkOptions</code>",id:"chunkoptions",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"configuration-reference",children:"Configuration Reference"}),"\n",(0,t.jsx)(n.p,{children:"This page contains reference documentation for the configuration options for the MongoDB RAG Ingest CLI."}),"\n",(0,t.jsxs)(n.p,{children:["A Ingest CLI config files is a CommonJS file that exports a ",(0,t.jsx)(n.code,{children:"Config"})," object as its default export."]}),"\n",(0,t.jsxs)(n.p,{children:["For more information on setting up a configuration file, refer to the ",(0,t.jsx)(n.a,{href:"/chatbot/ingest/configure",children:"Configure"})," documentation."]}),"\n",(0,t.jsx)(n.p,{children:"To set up a configuration file, you must first install the following packages:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install mongodb-rag-ingest mongodb-rag-core\n"})}),"\n",(0,t.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,t.jsxs)(n.p,{children:["For a full API reference of all modules exported by ",(0,t.jsx)(n.code,{children:"mongodb-rag-ingest"}),"\nand ",(0,t.jsx)(n.code,{children:"mongodb-rag-core"}),", refer to the ",(0,t.jsx)(n.a,{href:"../reference/",children:"API Reference"})," documentation."]}),"\n",(0,t.jsx)(n.p,{children:"This page links to the key reference documentation for configuring the Ingest CLI."}),"\n",(0,t.jsx)(n.h2,{id:"config",children:(0,t.jsx)(n.code,{children:"Config"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"/chatbot/reference/ingest/modules#config",children:(0,t.jsx)(n.code,{children:"Config"})})," type is the root configuration type for the Ingest CLI."]}),"\n",(0,t.jsx)(n.h2,{id:"ingestmetastore",children:(0,t.jsx)(n.code,{children:"IngestMetaStore"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"/chatbot/reference/ingest/modules#ingestmetastore",children:(0,t.jsx)(n.code,{children:"IngestMetaStore"})})," is an interface to interact with MongoDB collection that tracks metadata associated with the ingest process."]}),"\n",(0,t.jsxs)(n.p,{children:["To create an ",(0,t.jsx)(n.code,{children:"IngestMetaStore"}),", you can use the function ",(0,t.jsx)(n.a,{href:"/chatbot/reference/ingest/modules#makeingestmetastore",children:(0,t.jsx)(n.code,{children:"makeIngestMetaStore()"})}),".\nThis function returns an ",(0,t.jsx)(n.code,{children:"IngestMetaStore"}),".\nThis ",(0,t.jsx)(n.code,{children:"IngestMetaStore"})," persists data in the ",(0,t.jsx)(n.code,{children:"ingest_meta"})," collection in MongoDB."]}),"\n",(0,t.jsxs)(n.p,{children:["To create an ",(0,t.jsx)(n.code,{children:"IngestMetaStore"})," with ",(0,t.jsx)(n.code,{children:"makeIngestMetaStore()"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { makeIngestMetaStore } from "mongodb-rag-ingest";\n\nconst ingestMetaStore = makeIngestMetaStore({\n  connectionUri: MONGODB_CONNECTION_URI,\n  databaseName: MONGODB_DATABASE_NAME,\n  entryId: "all",\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"pagestore",children:(0,t.jsx)(n.code,{children:"PageStore"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"/chatbot/reference/core/modules#pagestore",children:(0,t.jsx)(n.code,{children:"PageStore"})})," is an interface\nto interact with ",(0,t.jsx)(n.a,{href:"/chatbot/reference/core/modules#page",children:(0,t.jsx)(n.code,{children:"Page"})})," data."]}),"\n",(0,t.jsxs)(n.p,{children:["To create a ",(0,t.jsx)(n.code,{children:"PageStore"})," that uses MongoDB to store pages, you can use the function\n",(0,t.jsx)(n.a,{href:"/chatbot/reference/core/modules#makemongodbpagestore",children:(0,t.jsx)(n.code,{children:"makeMongoDbPageStore()"})}),".\nThis function returns a ",(0,t.jsx)(n.code,{children:"PageStore"}),". This ",(0,t.jsx)(n.code,{children:"PageStore"})," persists data in the ",(0,t.jsx)(n.code,{children:"pages"})," collection in MongoDB."]}),"\n",(0,t.jsxs)(n.p,{children:["To create an ",(0,t.jsx)(n.code,{children:"PageStore"})," with ",(0,t.jsx)(n.code,{children:"makeMongoDbPageStore()"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { makeMongoDbPageStore } from "mongodb-rag-core";\n\nconst pageStore = makeMongoDbPageStore({\n  connectionUri: MONGODB_CONNECTION_URI,\n  databaseName: MONGODB_DATABASE_NAME,\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"embeddedcontentstore",children:(0,t.jsx)(n.code,{children:"EmbeddedContentStore"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"EmbeddedContentStore"})," is an interface to the stored content and vector\nembeddings used in your RAG app."]}),"\n",(0,t.jsxs)(n.p,{children:["To create an ",(0,t.jsx)(n.code,{children:"EmbeddedContentStore"})," that stores data in MongoDB,\nyou can use the function ",(0,t.jsx)(n.a,{href:"/chatbot/reference/core/modules#makemongodbembeddedcontentstore",children:(0,t.jsx)(n.code,{children:"makeMongoDbEmbeddedContentStore()"})}),".\nThis function returns an ",(0,t.jsx)(n.code,{children:"EmbeddedContentStore"}),". This ",(0,t.jsx)(n.code,{children:"EmbeddedContentStore"})," persists data in the ",(0,t.jsx)(n.code,{children:"embedded_content"})," collection in MongoDB."]}),"\n",(0,t.jsxs)(n.p,{children:["To create an ",(0,t.jsx)(n.code,{children:"EmbeddedContentStore"})," with ",(0,t.jsx)(n.code,{children:"makeMongoDbEmbeddedContentStore()"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { makeMongoDbEmbeddedContentStore } from "mongodb-rag-core";\n\nconst embeddedContentStore = makeMongoDbEmbeddedContentStore({\n  connectionUri: MONGODB_CONNECTION_URI,\n  databaseName: MONGODB_DATABASE_NAME,\n  searchIndex: {\n    embeddingName: OPENAI_EMBEDDING_MODEL,\n  }\n});\n'})}),"\n",(0,t.jsx)(n.admonition,{title:"Set up Atlas Vector Search",type:"important",children:(0,t.jsxs)(n.p,{children:["To use the ",(0,t.jsx)(n.code,{children:"EmbeddedContentStore"})," returned by ",(0,t.jsx)(n.code,{children:"makeMongoDbEmbeddedContentStore()"})," in your RAG app,\nyou must set up Atlas Vector Search on the ",(0,t.jsx)(n.code,{children:"embedded_content"})," collection in MongoDB.\nFor more information on setting up the vector search index on the ",(0,t.jsx)(n.code,{children:"embedded_content"})," collection,\nrefer to the ",(0,t.jsx)(n.a,{href:"/chatbot/mongodb#create-vector-search-index",children:"Create Atlas Vector Search Index"}),"\ndocumentation."]})}),"\n",(0,t.jsx)(n.h2,{id:"datasource",children:(0,t.jsx)(n.code,{children:"DataSource"})}),"\n",(0,t.jsx)(n.p,{children:"Add data sources for the Ingest CLI to pull content from."}),"\n",(0,t.jsxs)(n.p,{children:["Your ",(0,t.jsx)(n.a,{href:"/chatbot/reference/core/modules/dataSources#datasource",children:(0,t.jsx)(n.code,{children:"DataSource"})})," implementations depend on where the content is coming from.\nTo learn more about creating a ",(0,t.jsx)(n.code,{children:"DataSource"}),", refer to the ",(0,t.jsx)(n.a,{href:"/chatbot/ingest/data-sources",children:"Data Sources"})," documentation."]}),"\n",(0,t.jsx)(n.h2,{id:"embedder",children:(0,t.jsx)(n.code,{children:"Embedder"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"/chatbot/reference/core/namespaces/Embed#embedder",children:(0,t.jsx)(n.code,{children:"Embedder"})})," takes in a string and returns a vector embedding for that string."]}),"\n",(0,t.jsxs)(n.p,{children:["To create an ",(0,t.jsx)(n.code,{children:"Embedder"})," that uses the LangChain ",(0,t.jsx)(n.code,{children:"Embeddings"})," class,\nyou can use the function ",(0,t.jsx)(n.a,{href:"/chatbot/reference/core/namespaces/Embed#makelangchainembedder",children:(0,t.jsx)(n.code,{children:"makeLangChainEmbedder()"})}),". To see the various embedding models supported by LangChain, refer to the ",(0,t.jsx)(n.a,{href:"https://js.langchain.com/docs/integrations/text_embedding",children:"LangChain text embedding models"})," documentation."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { makeLangChainEmbedder } from "mongodb-rag-core";\nimport { OpenAIEmbeddings } from "mongodb-rag-core/langchain";\n\nconst { OPENAI_API_KEY } = process.env;\n\nconst langChainOpenAiEmbeddings = new OpenAIEmbeddings({\n  openAIApiKey: OPENAI_API_KEY,\n  modelName: "text-embedding-3-large",\n  dimensions: 1024,\n});\n\nconst embedder = makeLangChainEmbedder({\n  langChainEmbeddings: langChainOpenAiEmbeddings,\n});\n'})}),"\n",(0,t.jsxs)(n.p,{children:["To create an ",(0,t.jsx)(n.code,{children:"Embedder"})," that uses the ",(0,t.jsx)(n.a,{href:"https://platform.openai.com/docs/guides/embeddings",children:"OpenAI Embeddings API"})," directly,\nyou can use the function ",(0,t.jsx)(n.a,{href:"/chatbot/reference/core/namespaces/Embed#makeopenaiembedder",children:(0,t.jsx)(n.code,{children:"makeOpenAiEmbedder()"})}),". This function uses the\n",(0,t.jsx)(n.code,{children:"openai"})," package to construct the OpenAI client, which supports\nboth the Azure OpenAI Service and the OpenAI API."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"makeOpenAiEmbedder()"})," function also supports configuring exponential backoff\nwith the ",(0,t.jsx)(n.code,{children:"backoffOptions"})," argument. This wraps the ",(0,t.jsx)(n.code,{children:"exponential-backoff"})," package.\nExponential backoff behavior is included because when you are bulk uploading embeddings for content, you\nmay hit the rate limit for the OpenAI Embeddings API. This allows you to\nautomatically retry the embedding request after a delay."]}),"\n",(0,t.jsx)(n.p,{children:"Example usage:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import {\n  makeOpenAiEmbedder,\n  OpenAIClient,\n  AzureKeyCredential,\n} from "mongodb-rag-core";\nimport { AzureOpenAI } from "mongodb-rag-core/openai";\n\nconst { \n  OPENAI_ENDPOINT,\n  OPENAI_API_KEY,\n  OPENAI_EMBEDDING_DEPLOYMENT,\n  OPENAI_API_VERSION } = process.env;\n\nconst embedder = makeOpenAiEmbedder({\n  openAiClient: new AzureOpenAI({\n    apiKey: OPENAI_API_KEY,\n    endpoint: OPENAI_ENDPOINT,\n    apiVersion: OPENAI_API_VERSION,\n  }),\n  deployment: OPENAI_EMBEDDING_DEPLOYMENT,\n  backoffOptions: {\n    numOfAttempts: 25,\n    startingDelay: 1000,\n  },\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"chunkoptions",children:(0,t.jsx)(n.code,{children:"ChunkOptions"})}),"\n",(0,t.jsxs)(n.p,{children:["Use the ",(0,t.jsx)(n.a,{href:"/chatbot/reference/core/namespaces/Chunk#chunkoptions",children:(0,t.jsx)(n.code,{children:"ChunkOptions"})}),"\nto configure how the Ingest CLI chunks content when converting ",(0,t.jsx)(n.code,{children:"Page"})," documents\nto ",(0,t.jsx)(n.code,{children:"EmbeddedContent"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["By default, the Ingest CLI uses the following ",(0,t.jsx)(n.code,{children:"ChunkOptions"}),".\nThese should work for many RAG apps."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import GPT3Tokenizer from "gpt3-tokenizer";\n\nconst defaultMdChunkOptions: ChunkOptions = {\n  maxChunkSize: 600, // max chunk size of 600 tokens gets avg ~400 tokens/chunk\n  minChunkSize: 15, // chunks below this size are discarded, which improves search quality\n  chunkOverlap: 0,\n  tokenizer: new GPT3Tokenizer({ type: "gpt3" }),\n};\n'})}),"\n",(0,t.jsxs)(n.p,{children:["For more information on optimizing the ",(0,t.jsx)(n.code,{children:"ChunkOptions"}),", refer to ",(0,t.jsx)(n.a,{href:"/chatbot/ingest/optimize#refine-the-chunking-strategy",children:"Refine the Chunking Strategy"})," in the Optimization documentation."]})]})}function l(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},11151:(e,n,o)=>{o.d(n,{Z:()=>i,a:()=>d});var t=o(67294);const r={},c=t.createContext(r);function d(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);