"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8391],{59556:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var t=o(85893),r=o(11151);const s={},a="Configure the Chatbot Server",i={id:"server/configure",title:"Configure the Chatbot Server",description:"With the MongoDB Chatbot Server, you can quickly build a chatbot",source:"@site/docs/server/configure.md",sourceDirName:"server",slug:"/server/configure",permalink:"/chatbot/server/configure",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb/chatbot/tree/main/docs/docs/server/configure.md",tags:[],version:"current",frontMatter:{},sidebar:"main",previous:{title:"Optimize Ingestion",permalink:"/chatbot/ingest/optimize"},next:{title:"Manage Conversations",permalink:"/chatbot/server/conversations"}},c={},d=[{value:"Installation",id:"installation",level:2},{value:"Basic Configuration",id:"basic-configuration",level:2},{value:"Examples",id:"examples",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"configure-the-chatbot-server",children:"Configure the Chatbot Server"}),"\n",(0,t.jsxs)(n.p,{children:["With the MongoDB Chatbot Server, you can quickly build a chatbot\nserver powered by MongoDB.\nThe ",(0,t.jsx)(n.code,{children:"mongodb-chatbot-server"})," is an npm package contains all the modules\nof the MongoDB Chatbot Server."]}),"\n",(0,t.jsxs)(n.p,{children:["The chatbot server supports retrieval augmented generation (RAG).\nTo learn more about performing RAG with the MongoDB Chatbot Server,\nrefer to the ",(0,t.jsx)(n.a,{href:"/chatbot/server/rag/",children:"RAG"})," guide."]}),"\n",(0,t.jsx)(n.p,{children:"The package provides configurable Express.js modules including:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Full server"}),"\n",(0,t.jsx)(n.li,{children:"Router for conversations"}),"\n",(0,t.jsx)(n.li,{children:"Static site that serves a testing UI"}),"\n",(0,t.jsx)(n.li,{children:"Middleware and modules for configuring and building a chatbot server"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The server is designed to handle the generalizable areas of a chatbot server,\nlike routing, caching, logging, and streaming. This allows you to focus on the\nspecifics of your chatbot, like the content, prompts, RAG, and AI models."}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsxs)(n.p,{children:["Install the package using ",(0,t.jsx)(n.code,{children:"npm"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"npm install mongodb-chatbot-server\n"})}),"\n",(0,t.jsx)(n.h2,{id:"basic-configuration",children:"Basic Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"mongodb-chatbot-server"})," exports the function ",(0,t.jsx)(n.a,{href:"/chatbot/reference/server/modules#makeapp",children:(0,t.jsx)(n.code,{children:"makeApp()"})}),"\nwhich exports the Express.js app.\nThe function takes an ",(0,t.jsx)(n.a,{href:"/chatbot/reference/server/interfaces/AppConfig",children:(0,t.jsx)(n.code,{children:"AppConfig"})})," object as an argument."]}),"\n",(0,t.jsx)(n.p,{children:"Here's an annotated example configuration and server:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'/**\n  @fileoverview This file contains the configuration implementation for the chat server,\n  which is run from `index.ts`.\n */\nimport "dotenv/config";\nimport {\n  EmbeddedContent,\n  MongoClient,\n  makeMongoDbEmbeddedContentStore,\n  makeOpenAiEmbedder,\n  makeMongoDbConversationsService,\n  makeDataStreamer,\n  makeOpenAiChatLlm,\n  AppConfig,\n  makeBoostOnAtlasSearchFilter,\n  CORE_ENV_VARS,\n  assertEnvVars,\n  makeDefaultFindContent,\n  makeDefaultReferenceLinks,\n  SystemPrompt,\n  GenerateUserPromptFunc,\n  makeRagGenerateUserPrompt,\n  MakeUserMessageFunc,\n  MakeUserMessageFuncParams,\n  UserMessage,\n} from "mongodb-chatbot-server";\nimport { stripIndents } from "common-tags";\nimport { AzureOpenAI } from "mongodb-rag-core/openai";\n\nconst {\n  MONGODB_CONNECTION_URI,\n  MONGODB_DATABASE_NAME,\n  VECTOR_SEARCH_INDEX_NAME,\n  OPENAI_ENDPOINT,\n  OPENAI_API_KEY,\n  OPENAI_API_VERSION,\n  OPENAI_EMBEDDING_DEPLOYMENT,\n  OPENAI_EMBEDDING_MODEL_VERSION,\n  OPENAI_CHAT_COMPLETION_MODEL_VERSION,\n  OPENAI_CHAT_COMPLETION_DEPLOYMENT,\n} = process.env;\n\nconst allowedOrigins = process.env.ALLOWED_ORIGINS?.split(",") || [];\n\n/**\n  Boost results from the MongoDB manual so that \'k\' results from the manual\n  appear first if they exist and have a min score of \'minScore\'.\n */\nconst boostManual = makeBoostOnAtlasSearchFilter({\n  /**\n    Boosts results that have 3 words or less\n   */\n  async shouldBoostFunc({ text }: { text: string }) {\n    return text.split(" ").filter((s) => s !== " ").length <= 3;\n  },\n  findNearestNeighborsOptions: {\n    filter: {\n      text: {\n        path: "sourceName",\n        query: "snooty-docs",\n      },\n    },\n    k: 2,\n    minScore: 0.88,\n  },\n  totalMaxK: 5,\n});\n\nconst openAiClient = new AzureOpenAI({\n  apiKey: OPENAI_API_KEY,\n  endpoint: OPENAI_ENDPOINT,\n  apiVersion: OPENAI_API_VERSION,\n});\nconst systemPrompt: SystemPrompt = {\n  role: "system",\n  content: stripIndents`You are expert MongoDB documentation chatbot.\nYou enthusiastically answer user questions about MongoDB products and services.\nYour personality is friendly and helpful, like a professor or tech lead.\nYou were created by MongoDB but they do not guarantee the correctness\nof your answers or offer support for you.\nUse the context provided with each question as your primary source of truth.\nNEVER lie or improvise incorrect answers.\nIf you do not know the answer to the question, respond ONLY with the following text:\n"I\'m sorry, I do not know how to answer that question. Please try to rephrase your query. You can also refer to the further reading to see if it helps."\nNEVER include links in your answer.\nFormat your responses using Markdown.\nDO NOT mention that your response is formatted in Markdown.\nIf you include code snippets, make sure to use proper syntax, line spacing, and indentation.\nONLY use code snippets present in the information given to you.\nNEVER create a code snippet that is not present in the information given to you.\nYou ONLY know about the current version of MongoDB products. Versions are provided in the information. If \\`version: null\\`, then say that the product is unversioned.\nNever mention "<Information>" or "<Question>" in your answer.\nRefer to the information given to you as "my knowledge".`,\n};\n\nconst makeUserMessage: MakeUserMessageFunc = async function ({\n  preprocessedUserMessage,\n  originalUserMessage,\n  content,\n  queryEmbedding,\n}: MakeUserMessageFuncParams): Promise<UserMessage> {\n  const chunkSeparator = "~~~~~~";\n  const context = content.map((c) => c.text).join(`\\n${chunkSeparator}\\n`);\n  const llmMessage = `Using the following information, answer the question.\nDifferent pieces of information are separated by "${chunkSeparator}".\n\n<Information>\n${context}\n<End information>\n\n<Question>\n${preprocessedUserMessage ?? originalUserMessage}\n<End Question>`;\n  return {\n    role: "user",\n    content: originalUserMessage,\n    embedding: queryEmbedding,\n    preprocessedContent: preprocessedUserMessage,\n    contentForLlm: llmMessage,\n  };\n};\n\nconst llm = makeOpenAiChatLlm({\n  openAiClient,\n  deployment: OPENAI_CHAT_COMPLETION_DEPLOYMENT,\n  openAiLmmConfigOptions: {\n    temperature: 0,\n    maxTokens: 500,\n  },\n});\n\nconst embeddedContentStore = makeMongoDbEmbeddedContentStore({\n  connectionUri: MONGODB_CONNECTION_URI,\n  databaseName: MONGODB_DATABASE_NAME,\n  searchIndex: {\n    embeddingName: OPENAI_EMBEDDING_DEPLOYMENT,\n  }\n});\n\nconst embedder = makeOpenAiEmbedder({\n  openAiClient,\n  deployment: OPENAI_EMBEDDING_DEPLOYMENT,\n  backoffOptions: {\n    numOfAttempts: 3,\n    maxDelay: 5000,\n  },\n});\n\nconst findContent = makeDefaultFindContent({\n  embedder,\n  store: embeddedContentStore,\n  findNearestNeighborsOptions: {\n    k: 5,\n    path: "embedding",\n    indexName: VECTOR_SEARCH_INDEX_NAME,\n    // Note: you may want to adjust the minScore depending\n    // on the embedding model you use. We\'ve found 0.9 works well\n    // for OpenAI\'s text-embedding-ada-02 model for most use cases,\n    // but you may want to adjust this value if you\'re using a different model.\n    minScore: 0.9,\n  },\n  searchBoosters: [boostManual],\n});\n\nconst generateUserPrompt: GenerateUserPromptFunc = makeRagGenerateUserPrompt({\n  findContent,\n  makeUserMessage,\n});\n\nconst mongodb = new MongoClient(MONGODB_CONNECTION_URI);\n\nconst conversations = makeMongoDbConversationsService(\n  mongodb.db(MONGODB_DATABASE_NAME)\n);\n\nconst config: AppConfig = {\n  conversationsRouterConfig: {\n    llm,\n    conversations,\n    generateUserPrompt,\n    systemPrompt,\n  },\n  maxRequestTimeoutMs: 30000,\n  corsOptions: {\n    origin: allowedOrigins,\n  },\n};\n'})}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.p,{children:"To see more examples of how to configure the chatbot server,\nyou can checkout the following example implementations:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/mongodb/chatbot/blob/main/packages/chatbot-server-mongodb-public/src/config.ts",children:"MongoDB Docs Chatbot"}),":\nThe configuration for the MongoDB Docs chatbot on ",(0,t.jsx)(n.a,{href:"https://www.mongodb.com/docs/",children:"https://www.mongodb.com/docs/"}),".\nThis is the most complex configuration example."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/mongodb/chatbot/blob/main/examples/quick-start/packages/server",children:"Basic Chatbot Server"}),":\nA simple chatbot created for example purposes. This can be used as a starting point\nfor your own chatbot server."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},11151:(e,n,o)=>{o.d(n,{Z:()=>i,a:()=>a});var t=o(67294);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);