"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7475],{84041:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>u});var t=n(85893),o=n(11151);const s={},a="Pre-Process User Queries",c={id:"server/rag/preprocess",title:"Pre-Process User Queries",description:"One of the most powerful and flexible features that you can add to your chatbot",source:"@site/docs/server/rag/preprocess.md",sourceDirName:"server/rag",slug:"/server/rag/preprocess",permalink:"/chatbot/server/rag/preprocess",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb/chatbot/tree/main/docs/docs/server/rag/preprocess.md",tags:[],version:"current",frontMatter:{},sidebar:"main",previous:{title:"Retrieval Augmented Generation (RAG)",permalink:"/chatbot/server/rag/"},next:{title:"Retrieve Context Information",permalink:"/chatbot/server/rag/retrieve"}},i={},u=[{value:"The <code>Preprocessor</code> Function",id:"the-preprocessor-function",level:2},{value:"Mutate Queries",id:"mutate-queries",level:2},{value:"Reject Queries",id:"reject-queries",level:3}];function d(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"pre-process-user-queries",children:"Pre-Process User Queries"}),"\n",(0,t.jsxs)(r.p,{children:["One of the most powerful and flexible features that you can add to your chatbot\nis a pre-processing step for user queries. With a query preprocessor,\nyou can mutate a query before it's used to ",(0,t.jsx)(r.a,{href:"/chatbot/server/rag/retrieve",children:"retrieve relevant content"}),".\nThis makes the query more conversationally relevant,\nand therefore more likely to get better results."]}),"\n",(0,t.jsx)(r.p,{children:"You can also use a preprocessor to reject queries that are inappropriate or\notherwise should not be sent to the chatbot."}),"\n",(0,t.jsxs)(r.p,{children:["Query preprocessors run on the ",(0,t.jsx)(r.code,{children:"POST /conversations/:conversationId/messages"})," endpoint."]}),"\n",(0,t.jsx)(r.p,{children:"Adding a preprocessor is optional. If you don't add one, the user query is sent\ndirectly to find relevant content and the query will never be rejected."}),"\n",(0,t.jsx)(r.p,{children:"Generally, preprocessors use LLMs to perform the transformation."}),"\n",(0,t.jsx)(r.p,{children:"For example, say a user sends the following message to a chatbot\nthat answers questions about the MongoDB documentation:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-txt",children:"User: add data node\n"})}),"\n",(0,t.jsx)(r.p,{children:"To make this query more relevant, you can add a preprocessor that transforms the\nquery to something like:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-txt",children:"User: How do I add a data to MongoDB using the Node.js driver?\n"})}),"\n",(0,t.jsx)(r.p,{children:"This transformed query is more likely to return relevant results,\nwhich are then used to generate a better answer."}),"\n",(0,t.jsxs)(r.h2,{id:"the-preprocessor-function",children:["The ",(0,t.jsx)(r.code,{children:"Preprocessor"})," Function"]}),"\n",(0,t.jsxs)(r.p,{children:["Preprocessors have the ",(0,t.jsx)(r.a,{href:"/chatbot/reference/server/modules#querypreprocessorfunc",children:(0,t.jsx)(r.code,{children:"QueryPreprocessorFunc"})})," signature."]}),"\n",(0,t.jsxs)(r.p,{children:["To run a preprocessor when adding user messages, include a ",(0,t.jsx)(r.code,{children:"QueryPreprocessorFunc"}),"\nin the ",(0,t.jsx)(r.a,{href:"/chatbot/reference/server/interfaces/MakeRagGenerateUserPromptParams#querypreprocessor",children:(0,t.jsx)(r.code,{children:"MakeRagGenerateUserPromptParams.queryPreprocessor"})})," property."]}),"\n",(0,t.jsx)(r.h2,{id:"mutate-queries",children:"Mutate Queries"}),"\n",(0,t.jsx)(r.p,{children:"You can use a preprocessor to mutate the user query to make it more relevant."}),"\n",(0,t.jsxs)(r.p,{children:["If you don't want to mutate the query, do not return a ",(0,t.jsx)(r.code,{children:"query"})," property from the\nresult or keep it the same as the original query."]}),"\n",(0,t.jsx)(r.p,{children:"Here's an example of preprocessor that transforms the user query\nto a more semantically relevant question:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'import {\n  QueryPreprocessorFunc,\n  makeRagGenerateUserPrompt,\n} from "mongodb-chatbot-server";\nimport { AzureOpenAI } from "mongodb-rag-core/openai";\n\nconst openAiClient = new AzureOpenAI({\n  apiKey: OPENAI_API_KEY,\n  endpoint: OPENAI_ENDPOINT,\n  apiVersion: OPENAI_API_VERSION,\n});\nconst querySystemPrompt: SystemPrompt = {\n  role: "system",\n  content: `Transform the query into a relevant question about MongoDB products or company.\nExample 1:\nUser: add data node\nAssistant: How do I add a data to MongoDB using the Node.js driver?\nExample 2:\nUser: get started atlas\nAssistant: How do I get started with MongoDB Atlas?`,\n};\n\nconst queryToQuestionPreprocessor: QueryPreprocessorFunc = async function ({\n  query,\n  messages,\n}) {\n  if (query === undefined) {\n    return { query, rejectQuery: false };\n  }\n  const {\n    choices: [choice],\n  } = await openAiClient.getChatCompletions(OPENAI_DEPLOYMENT, [\n    querySystemPrompt,\n    { role: "user", content: query },\n  ]);\n  const { message } = choice;\n  return {\n    query: message,\n    rejectQuery: false,\n  };\n};\n\nconst ragGenerateUserPrompt = makeRagGenerateUserPrompt({\n  queryPreprocessor: queryToQuestionPreprocessor,\n  // ...other config\n});\n'})}),"\n",(0,t.jsx)(r.h3,{id:"reject-queries",children:"Reject Queries"}),"\n",(0,t.jsxs)(r.p,{children:["You can also add preprocessor logic to reject user queries that you do not want\nto send to the chatbot. To reject a query, return ",(0,t.jsx)(r.code,{children:"{ rejectQuery: true }"})," from the ",(0,t.jsx)(r.code,{children:"QueryPreprocessorFunc"}),"."]}),"\n",(0,t.jsx)(r.p,{children:"For example, say you want to reject queries that contain profanity.\nYou can use a preprocessor to check if the query contains profanity,\nand reject the query if it does."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'import { makeRagGenerateUserPrompt } from "mongodb-chatbot-server";\nimport { profanityCheck } from "./profanityCheck"; // checks if query contains profanity\n\nasync function rejectProfanePreprocessor({ query, messages }) {\n  if (query === undefined) {\n    return { query, rejectQuery: false };\n  }\n  const isProfane = await profanityCheck(query);\n  return {\n    rejectQuery: isProfane,\n  };\n}\n\nconst ragGenerateUserPrompt = makeRagGenerateUserPrompt({\n  queryPreprocessor: rejectProfanePreprocessor,\n  // ...other config\n});\n'})})]})}function p(e={}){const{wrapper:r}={...(0,o.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},11151:(e,r,n)=>{n.d(r,{Z:()=>c,a:()=>a});var t=n(67294);const o={},s=t.createContext(o);function a(e){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);