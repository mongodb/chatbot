"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7394],{85248:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var t=s(85893),o=s(11151);const r={},a="Customize Server Logic",i={id:"server/custom-logic",title:"Customize Server Logic",description:"The MongoDB Chatbot Server provides a few ways to customize the server to meet",source:"@site/docs/server/custom-logic.md",sourceDirName:"server",slug:"/server/custom-logic",permalink:"/chatbot/server/custom-logic",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb/chatbot/tree/main/docs/docs/server/custom-logic.md",tags:[],version:"current",frontMatter:{},sidebar:"main",previous:{title:"Include References",permalink:"/chatbot/server/rag/references"},next:{title:"Tool Calling",permalink:"/chatbot/server/tools"}},d={},c=[{value:"App-Level Configuration",id:"app-level-configuration",level:2},{value:"Middleware",id:"middleware",level:2},{value:"Request Validation",id:"request-validation",level:3},{value:"Include Custom Data to be Processed by the Server",id:"include-custom-data-to-be-processed-by-the-server",level:3},{value:"Included Middleware",id:"included-middleware",level:3},{value:"Add Custom Data",id:"add-custom-data",level:2},{value:"<code>AddCustomDataFunc</code>",id:"addcustomdatafunc",level:3},{value:"Add Custom Data to Conversation",id:"add-custom-data-to-conversation",level:3},{value:"Add Custom Data to Messages",id:"add-custom-data-to-messages",level:3},{value:"Included Custom Data Functions",id:"included-custom-data-functions",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"customize-server-logic",children:"Customize Server Logic"}),"\n",(0,t.jsx)(n.p,{children:"The MongoDB Chatbot Server provides a few ways to customize the server to meet\nthe needs of your application."}),"\n",(0,t.jsx)(n.h2,{id:"app-level-configuration",children:"App-Level Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["You can add custom Express.js routes and application-level logic by including the ",(0,t.jsx)(n.a,{href:"/chatbot/reference/server/interfaces/AppConfig#expressappconfig",children:(0,t.jsx)(n.code,{children:"AppConfig.expressAppConfig"})})," function in your app configuration.\nPass the ",(0,t.jsx)(n.code,{children:"AppConfig"})," object to the ",(0,t.jsx)(n.a,{href:"/chatbot/reference/server/modules#makeapp",children:(0,t.jsx)(n.code,{children:"makeApp"})})," function to create the app."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { makeApp, AppConfig } from "mongodb-chatbot-server";\n\nconst appConfig: AppConfig = {\n  // ...other config\n  expressAppConfig: (app) => {\n      app.get("/", (req, res) => res.send({ hello: "world" }))\n  },\n};\n\nconst app = await makeApp(appConfig);\n//...\n'})}),"\n",(0,t.jsx)(n.h2,{id:"middleware",children:"Middleware"}),"\n",(0,t.jsxs)(n.p,{children:["You can configure the server to run custom middleware, ",(0,t.jsx)(n.a,{href:"/chatbot/reference/server/modules#conversationsmiddleware",children:(0,t.jsx)(n.code,{children:"ConversationsMiddleware"})}),".\nThe ",(0,t.jsx)(n.code,{children:"ConversationsMiddleware"})," include a custom ",(0,t.jsx)(n.a,{href:"https://expressjs.com/en/api.html#res.locals",children:(0,t.jsx)(n.code,{children:"Response.locals"})})," object\nthat you can use to access the app's ",(0,t.jsx)(n.a,{href:"/chatbot/reference/core/interfaces/Conversations.ConversationsService",children:(0,t.jsx)(n.code,{children:"ConversationsService"})})," with the ",(0,t.jsx)(n.code,{children:"conversationsService"})," property\nand a ",(0,t.jsx)(n.code,{children:"customData"})," object, where you can store arbitrary data."]}),"\n",(0,t.jsxs)(n.p,{children:["Add multiple middleware to the server via the ",(0,t.jsx)(n.a,{href:"/chatbot/reference/server/interfaces/ConversationsRouterParams#middleware",children:(0,t.jsx)(n.code,{children:"ConversationRouterParams.middleware"})})]}),"\n",(0,t.jsx)(n.p,{children:"Here's a basic middleware and how you can add it to the server."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { ConversationsMiddleware, AppConfig } from "mongodb-chatbot-server";\n\nconst someMiddleware: ConversationsMiddleware = async (req, res, next) => {\n  try {\n    const conversation = await res.locals.conversations.findById(\n      req.params.conversationId\n    );\n    // ...do something with the conversation\n\n    // Add custom data to the response\n    res.locals.customData = {\n      foo: "bar",\n    };\n  } catch (err) {\n    next(err);\n  } finally {\n    next();\n  }\n};\n\nconst appConfig: AppConfig = {\n  // ...other config\n  conversationsRouterParams: {\n    middleware: [someMiddleware],\n    // ...other config\n  },\n};\n// ...create app\n'})}),"\n",(0,t.jsx)(n.h3,{id:"request-validation",children:"Request Validation"}),"\n",(0,t.jsxs)(n.p,{children:["You can use custom middleware to validate the request before it's processed\nby the ",(0,t.jsx)(n.code,{children:"/conversations"})," routes."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { ConversationsMiddleware } from "mongodb-chatbot-server";\n\nconst requireUserId: ConversationsMiddleware = async (req, res, next) => {\n  const userId = req.headers.userId;\n  if (!userId) {\n    return res.status(400).json({\n      error: "Missing userId header",\n    });\n  }\n  next();\n};\n'})}),"\n",(0,t.jsx)(n.h3,{id:"include-custom-data-to-be-processed-by-the-server",children:"Include Custom Data to be Processed by the Server"}),"\n",(0,t.jsxs)(n.p,{children:["You can also use the middleware to modify the request or response objects.\nFor example, you could store additional data in the ",(0,t.jsx)(n.code,{children:"Response.locals"})," object or\nperform user authentication."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { ConversationsMiddleware } from "mongodb-chatbot-server";\nimport { authenticateUser } from "./auth"; // Some authentication function\n\nconst authenticateUser: ConversationsMiddleware = async (req, res, next) => {\n  try {\n    const token = req.headers.authToken;\n    if (!token) {\n      return res.status(400).json({\n        error: "Missing authToken header",\n      });\n    }\n    // Authenticate user\n    const user = await authenticateUser(token);\n    if (!user) {\n      return res.status(401).json({\n        error: "Invalid authToken",\n      });\n    }\n    // Add authenticated user data to the response\n    res.locals.customData = {\n      user,\n    };\n    next();\n  } catch (err) {\n    next(err);\n  }\n};\n'})}),"\n",(0,t.jsx)(n.h3,{id:"included-middleware",children:"Included Middleware"}),"\n",(0,t.jsx)(n.p,{children:"The MongoDB Chatbot Server includes the following middleware."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/chatbot/reference/server/modules#requirerequestorigin",children:(0,t.jsx)(n.code,{children:"requireRequestOrigin()"})}),": Requires that the request\nincludes a ",(0,t.jsx)(n.code,{children:"X-Request-Origin"})," or ",(0,t.jsx)(n.code,{children:"origin"})," header. Enabled by default."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/chatbot/reference/server/modules#requirevalidipaddress",children:(0,t.jsx)(n.code,{children:"requireValidIpAddress()"})}),": Requires that the request\nincludes a ",(0,t.jsx)(n.code,{children:"X-Forwarded-For"})," header with a valid IP address. Enabled by default."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"add-custom-data",children:"Add Custom Data"}),"\n",(0,t.jsx)(n.p,{children:"You can add custom data to the persisted conversation or to individual messages."}),"\n",(0,t.jsx)(n.h3,{id:"addcustomdatafunc",children:(0,t.jsx)(n.code,{children:"AddCustomDataFunc"})}),"\n",(0,t.jsxs)(n.p,{children:["Add custom data using a ",(0,t.jsx)(n.a,{href:"/chatbot/reference/server/modules#addcustomdatafunc",children:(0,t.jsx)(n.code,{children:"AddCustomDataFunc"})})," function."]}),"\n",(0,t.jsxs)(n.p,{children:["The function accepts the Express ",(0,t.jsx)(n.code,{children:"Request"})," and ",(0,t.jsx)(n.code,{children:"Response"}),". The ",(0,t.jsx)(n.code,{children:"Response"})," includes\nthe ",(0,t.jsx)(n.code,{children:"ConversationsRouterLocals"})," in the ",(0,t.jsx)(n.code,{children:"Response.locals"})," property.\nThe function returns a ",(0,t.jsx)(n.code,{children:"Promise"})," that resolves to a ",(0,t.jsx)(n.a,{href:"/chatbot/reference/server/modules#conversationcustomdata",children:(0,t.jsx)(n.code,{children:"ConversationCustomData"})})," object."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { AddCustomDataFunc } from "mongodb-chatbot-server";\n\nconst addOriginAndIpToCustomData: AddCustomDataFunc = async (req, res) =>\n  res.locals.customData.origin\n    ? { origin: res.locals.customData.origin, ip: req.ip }\n    : undefined;\n'})}),"\n",(0,t.jsx)(n.h3,{id:"add-custom-data-to-conversation",children:"Add Custom Data to Conversation"}),"\n",(0,t.jsxs)(n.p,{children:["You can add custom data to the ",(0,t.jsx)(n.a,{href:"/chatbot/reference/core/interfaces/Conversations.Conversation#customdata",children:(0,t.jsx)(n.code,{children:"Conversation.customData"})}),"\nproperty persisted in the database."]}),"\n",(0,t.jsxs)(n.p,{children:["To add custom data to the conversation, set the ",(0,t.jsx)(n.a,{href:"/chatbot/reference/server/interfaces/ConversationsRouterParams#createConversationCustomData",children:(0,t.jsx)(n.code,{children:"ConversationsRouterParams.createConversationCustomData"})}),"\nto a ",(0,t.jsx)(n.code,{children:"CustomDataFunc"}),". This function is run when you create a conversation\nwith the ",(0,t.jsx)(n.code,{children:"POST /conversations"})," endpoint."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { AddCustomData, AppConfig } from "mongodb-chatbot-server";\n\nconst addOriginAndIpToCustomData: AddCustomDataFunc = async (req, res) =>\n  res.locals.customData.origin\n    ? { origin: res.locals.customData.origin, ip: req.ip }\n    : undefined;\n\nconst appConfig: AppConfig = {\n  // ...other config\n  conversationsRouterParams: {\n    createConversationCustomData: addOriginAndIpToCustomData,\n    // ...other config\n  },\n};\n// ...create app\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This creates a ",(0,t.jsx)(n.code,{children:"Conversation"})," in the database with the following schema:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'{\n  _id: ObjectId("Some ObjectId"),\n  messages: [ /*...*/ ],\n  createdAt: Date("Some Date"),\n  customData: {\n    origin: "https://example.com";\n    ip: "192.158.1.38";\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"add-custom-data-to-messages",children:"Add Custom Data to Messages"}),"\n",(0,t.jsxs)(n.p,{children:["You can add custom data to the ",(0,t.jsx)(n.a,{href:"/chatbot/reference/core/interfaces/Conversations.Conversation#messages",children:(0,t.jsx)(n.code,{children:"Conversation.messages[].customData"})}),"\nproperty persisted in the database."]}),"\n",(0,t.jsxs)(n.p,{children:["To add custom data to the conversation, set the ",(0,t.jsx)(n.a,{href:"/chatbot/reference/server/interfaces/ConversationsRouterParams#addMessageToConversationCustomData",children:(0,t.jsx)(n.code,{children:"ConversationsRouterParams.addMessageToConversationCustomData"})}),"\nto a ",(0,t.jsx)(n.code,{children:"CustomDataFunc"}),". This function is run when you create a conversation\nwith the ",(0,t.jsx)(n.code,{children:"POST /conversations/:conversationId/messages"})," endpoint."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { AddCustomData, AppConfig } from "mongodb-chatbot-server";\n\nconst addOriginAndIpToCustomData: AddCustomDataFunc = async (req, res) =>\n  res.locals.customData.origin\n    ? { origin: res.locals.customData.origin, ip: req.ip }\n    : undefined;\n\nconst appConfig: AppConfig = {\n  // ...other config\n  conversationsRouterParams: {\n    addMessageToConversationCustomData: addOriginAndIpToCustomData,\n    // ...other config\n  },\n};\n// ...create app\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This creates a ",(0,t.jsx)(n.code,{children:"Conversation"})," in the database with the following schema:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'{\n  _id: ObjectId("Some ObjectId"),\n  createdAt: Date("Some Date"),\n  messages: [ /*...other messages*/,\n    {\n      _id: ObjectId("Some ObjectId"),\n      role: "user",\n      content: "Some message",\n      createdAt: Date("Some Date"),\n      customData: {\n        origin: "https://example.com",\n        ip: "192.158.1.38",\n      }\n    },\n    {/*...assistant message*/}],\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"included-custom-data-functions",children:"Included Custom Data Functions"}),"\n",(0,t.jsx)(n.p,{children:"By default, the MongoDB Chatbot Server includes custom data functions that add\nthe following custom data:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Conversation.customData"}),": ",(0,t.jsx)(n.code,{children:"origin"})," and ",(0,t.jsx)(n.code,{children:"ip"})," from the request."]}),"\n",(0,t.jsxs)(n.li,{children:["For all user messages, ",(0,t.jsx)(n.code,{children:"Message.customData"}),": ",(0,t.jsx)(n.code,{children:"origin"})," and from the request."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>i,a:()=>a});var t=s(67294);const o={},r=t.createContext(o);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);