"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5818],{66783:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var t=o(85893),r=o(11151);const a={},s="Tool Calling",l={id:"server/tools",title:"Tool Calling",description:"You can give your chatbot access to external tools. For example,",source:"@site/docs/server/tools.md",sourceDirName:"server",slug:"/server/tools",permalink:"/chatbot/server/tools",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb/chatbot/tree/main/docs/docs/server/tools.md",tags:[],version:"current",frontMatter:{},sidebar:"main",previous:{title:"Customize Server Logic",permalink:"/chatbot/server/custom-logic"},next:{title:"Persist Conversation Data",permalink:"/chatbot/server/persist"}},i={},c=[{value:"Tool Calling Flow",id:"tool-calling-flow",level:2},{value:"Define a Tool",id:"define-a-tool",level:2},{value:"Give Tools to the ChatLLM",id:"give-tools-to-the-chatllm",level:2},{value:"Configure Server Tool Calling Behavior",id:"configure-server-tool-calling-behavior",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",mermaid:"mermaid",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"tool-calling",children:"Tool Calling"}),"\n",(0,t.jsx)(n.p,{children:"You can give your chatbot access to external tools. For example,\nyou could add a tool interfaces with an API and use the data returned from the API\nin the chatbot."}),"\n",(0,t.jsx)(n.p,{children:"This is a powerful feature that allows you to extend the capabilities\nof your chatbot beyond retrieval augmented generation and LLM conversations."}),"\n",(0,t.jsx)(n.h2,{id:"tool-calling-flow",children:"Tool Calling Flow"}),"\n",(0,t.jsx)(n.p,{children:"When a user sends a message to a chatbot with tool calling implemented,\nthe following happens:"}),"\n",(0,t.jsx)(n.mermaid,{value:"graph TD\n    USER[User sends message] --\x3e PREP[Preprocess user message.\\n Custom middleware, add custom data, generate user message, etc.]\n    PREP --\x3e LLM{LLM decides\\n if should call tool\\n and which tool to call}\n    LLM --\x3e|Call tool| TOOL[LLM creates tool call message]\n    LLM --\x3e|Respond directly| RES[LLM creates response message]\n    TOOL --\x3e CALL[Tool call based on arguments from LLM]\n    CALL --\x3e TOOL_RES[LLM creates response based on tool call]\n    CALL --\x3e|Tool call rejects user query| REJ[Send static rejection response]\n    RES --\x3e CONT[Continue to send message to user and save conversation]\n    REJ --\x3e CONT\n    TOOL_RES --\x3e CONT"}),"\n",(0,t.jsx)(n.h2,{id:"define-a-tool",children:"Define a Tool"}),"\n",(0,t.jsxs)(n.p,{children:["To make a tool, define an object that implements the ",(0,t.jsx)(n.a,{href:"/chatbot/reference/core/interfaces/Llm.Tool",children:(0,t.jsx)(n.code,{children:"Tool"})})," interface."]}),"\n",(0,t.jsxs)(n.p,{children:["A tool must include a ",(0,t.jsx)(n.code,{children:"definition"})," property that is a function definition for the LLM to invoke. This must be JSON schema that corresponds to the ",(0,t.jsx)(n.a,{href:"https://platform.openai.com/docs/assistants/tools/function-calling",children:"OpenAI function definition format"}),".\nThe tool responds LLM-generated arguments that correspond to this JSON schema."]}),"\n",(0,t.jsxs)(n.p,{children:["You must also include the ",(0,t.jsx)(n.code,{children:"call()"})," method, which accepts the LLM-generated arguments\nplus additional metadata and returns a tool call message, references,\nand whether the user query should be rejected."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'// weatherTool.ts\n\nimport { Tool } from "mongodb-chatbot-server";\n\nexport const weatherTool: Tool = {\n  definition: {\n    name: "getCurrentWeather",\n    description: "Get the weather in location",\n    parameters: {\n      type: "object",\n      properties: {\n        location: {\n          type: "string",\n          description: "The city and state e.g. San Francisco, CA",\n        },\n        unit: { type: "string", enum: ["c", "f"] },\n      },\n      required: ["location"],\n    },\n  },\n  async call({ functionArgs: { location, unit } }) {\n    const weatherReport = await fetchWeatherFromApi(location, unit);\n    return {\n      toolCallMessage: {\n        role: "function",\n        name: "getCurrentWeather",\n        content: `The weather in ${location} is: ${weatherReport.content}`,\n      },\n      references: [{ title: `${location} weather`, url: weatherReport.url }],\n    };\n  },\n};\n'})}),"\n",(0,t.jsx)(n.h2,{id:"give-tools-to-the-chatllm",children:"Give Tools to the ChatLLM"}),"\n",(0,t.jsxs)(n.p,{children:["To give the chatbot access to the tool, you must provide the ",(0,t.jsx)(n.a,{href:"/chatbot/reference/core/interfaces/Llm.ChatLlm",children:(0,t.jsx)(n.code,{children:"ChatLlm"})})," with the tool."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"/chatbot/reference/core/namespaces/Llm#makeopenaichatllm",children:(0,t.jsx)(n.code,{children:"makeOpenAiChatLlm()"})}),"\nfunction, which you can use to instantiate a client for an OpenAI model, takes a ",(0,t.jsx)(n.code,{children:"tools"})," argument.\nProvide an array of tools to the ",(0,t.jsx)(n.code,{children:"tools"})," argument."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'// weatherChatLlm.ts\nimport { makeOpenAiChatLlm, OpenAiChatMessage } from "mongodb-chatbot-server";\nimport { weatherTool } from "./weatherTool";\n\nexport const openAiClient = new AzureOpenAI({\n  apiKey: OPENAI_API_KEY,\n  endpoint: OPENAI_ENDPOINT,\n  apiVersion: OPENAI_API_VERSION,\n});\n \n\nexport const weatherChatLlm = makeOpenAiChatLlm({\n  openAiClient,\n  deployment: OPENAI_CHAT_COMPLETION_DEPLOYMENT,\n  openAiLmmConfigOptions: {\n    temperature: 0,\n    maxTokens: 500,\n  },\n  tools: [weatherTool],\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"configure-server-tool-calling-behavior",children:"Configure Server Tool Calling Behavior"}),"\n",(0,t.jsxs)(n.p,{children:["To use a ",(0,t.jsx)(n.code,{children:"ChatLlm"})," with tool calling in your server, add it to your configuration\nas you would any other ",(0,t.jsx)(n.code,{children:"ChatLlm"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { AppConfig } from "mongodb-chatbot-server";\nimport { weatherChatLlm } from "./weatherChatLlm";\n\nconst config: AppConfig = {\n  conversationsRouterConfig: {\n    llm: weatherChatLlm,\n    // ...other config\n  },\n  // ...other config\n};\n'})})]})}function d(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},11151:(e,n,o)=>{o.d(n,{Z:()=>l,a:()=>s});var t=o(67294);const r={},a=t.createContext(r);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);