openapi: 3.1.0
info:
  title: MongoDB RAG Server API
  version: 1.0.0
  license:
    name: Apache 2.0
    url: https://github.com/mongodb/chatbot/blob/main/LICENSE
  description: |
    The Knowledge Service is a RESTful API.

    The API is designed to be used by the MongoDB RAG UI frontend,
    but can also be used by other clients.

    If you have a use case not currently supported by the API, please [reach out to the MongoDB EAI team](../contact).
servers:
  - url: https://knowledge.mongodb.com/api/v1
security:
  - CustomHeaderAuth: []
paths:
  /content/search:
    post:
      operationId: searchContent
      tags:
        - Content
      summary: Search content
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  description: The search query string.
                dataSources:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      type:
                        type: string
                      versionLabel:
                        type: string
                    required: [name]
                  description: An array of data sources to search. If not provided, latest version of all data sources will be searched.
                limit:
                  type: integer
                  minimum: 1
                  maximum: 100
                  default: 5
                  description: The maximum number of results to return.
            required:
              - query
      responses:
        200:
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResponse"
        400:
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        500:
          description: Internal Server Error
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                $ref: "#/components/responses/InternalServerError"

  /content/sources:
    get:
      operationId: listDataSources
      tags:
        - Content
      summary: List available data sources
      description: Returns metadata about all available data sources.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDataSourcesResponse"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /conversations:
    post:
      operationId: createConversation
      tags:
        - Conversations
      summary: Start new conversation
      description: |
        Start a new conversation.

        This endpoint is deprecated. Use the [createResponse](#operation/createResponse) endpoint instead.
      tags:
        - Conversations
      deprecated: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"

  /conversations/{conversationId}/messages:
    post:
      operationId: addMessage
      tags:
        - Conversations
      summary: Add message to the conversation
      tags:
        - Conversations
      deprecated: true
      description: |
        Add a message to the conversation and get a response back from chatbot.

        This endpoint is deprecated. Use the [createResponse](#operation/createResponse) endpoint instead.

        You can configure your server to create new conversations
        when you set the conversation ID to `null`.
        If you do this, the server creates a new conversation
        and returns the conversation ID in the response's `metadata.conversationId` field.
      parameters:
        - $ref: "#/components/parameters/conversationId"
        - name: stream
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: |
            If `true`, the response will be streamed to the client. This is useful for long-running conversations.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [message]
              properties:
                message:
                  type: string
                  format: markdown
                  description: |
                    Markdown-formatted message from the user.
                clientContext:
                  type: object
                  description: |
                    Additional context provided by the client. This is useful
                    for passing information to the chatbot that is not part of
                    the user's message but may be relevant to the chatbot's
                    response. For example, the client may pass information about
                    the user's preferences, location, preferred language, etc.
                  additionalProperties: true
      responses:
        200:
          x-summary: OK
          description: |
            If you set the query parameter `?stream=false`, the server responds with `application/json`.

            If you set the query parameter `?stream=true`, the server responds with `text/event-stream`. The server returns a [server-sent event](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#event_stream_format) stream.
            (Note that the server does not use [named events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#named_events).)
            The below schema for `text/event-stream` corresponds to contents of the event's `data` field. For example:

            ```txt
            data: {"type": "processing", "data": "Calling tool to get information..."}

            data: {"type": "delta", "data": "Starting "}

            data: {"type": "delta", "data": "to "}

            data: {"type": "delta", "data": "stream "}

            data: {"type": "references", "data": [{"url": "https://mongodb.com/docs/atlas/getting-started", "title": "Get Started with MongoDB Atlas"}]}

            data: {"type": "finished", "data": "someMessageId"}
            ```
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
            text/event-stream:
              schema:
                allOf:
                  - $ref: "#/components/schemas/MessageResponseStreamEvent"
                examples:
                  - summary: Example of a StreamEventDelta
                    value:
                      type: "delta"
                      data: "Updated event information or specific content changes."
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  # Commenting out while it's not supported.
  # /conversations/{conversationId}:
  #   get:
  #     operationId: getConversation
  #     tags:
  #       - Conversations
  #     summary: Get a conversation
  #     parameters:
  #       - $ref: "#/components/parameters/conversationId"
  #     responses:
  #       200:
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Conversation"
  #       400:
  #         $ref: "#/components/responses/BadRequest"
  #       404:
  #         $ref: "#/components/responses/NotFound"
  #       500:
  #         $ref: "#/components/responses/InternalServerError"
  /conversations/{conversationId}/messages/{messageId}/rating:
    post:
      operationId: rateMessage
      tags:
        - Conversations
      summary: Rate message
      tags:
        - Conversations
      parameters:
        - $ref: "#/components/parameters/conversationId"
        - $ref: "#/components/parameters/messageId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageRating"
      responses:
        204:
          description: Rating Saved
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /conversations/{conversationId}/messages/{messageId}/comment:
    post:
      operationId: commentMessage
      tags:
        - Conversations
      summary: Add comment to assistant message
      tags:
        - Conversations
      description: |
        Add a comment to an assistant message that clarifies a thumbs up/down rating.

        You can only rate an an assistant message that has a thumbs up/down rating. You can only rate a message once. The server returns a `400` error response if the message is not from the assistant, is not rated, or has already been rated.
      parameters:
        - $ref: "#/components/parameters/conversationId"
        - $ref: "#/components/parameters/messageId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageComment"
      responses:
        204:
          description: Comment Saved
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /responses:
    post:
      operationId: createResponse
      summary: Create response
      description: |
        Create a response from an LLM. Follows the specification of the [OpenAI Responses API](https://platform.openai.com/docs/api-reference/responses).

        You can rate or comment on a message using the [rateMessage](#operation/rateMessage) and [commentMessage](#operation/commentMessage) endpoints.

        ### Basic Example Usage

        Example usage with OpenAI client `openai`:
        ```ts
        import { OpenAI } from "openai";

        const openai = new OpenAI({ baseURL: "https://knowledge.mongodb.com/api/v1" });

        const response = await openai.responses.create({
          model: "mongodb-chat-latest",
          stream: true,
          input: [
            {
              role: "user",
              content: "So what's MongoDB anyways??",
            },
          ],
          instructions: "You are located on the MongoDB Atlas cloud platform. Use that as context to inform your response."
        });

        for await (const event of response) {
          console.log(event);
        }
        ```

        ### Features

        #### Retrieval-Informed Answers

        By default, the API performs retrieval augmented generation under the hood
        to generate accurate and up-to-date responses about MongoDB products.
        If you provide custom tools to the API via the `tools` parameter,
        the API will choose to use the tool or the retrieval tool based on the `tool_choice` parameter.

        Default behavior is to allow the model to choose the tool to use.

        #### Personality

        The AI API has the personality of a helpful MongoDB assistant. You cannot change this core personality.

        You can augment the personality via the `instructions` parameter. (E.g. "You are a technical services engineer at MongoDB. Use that as context to inform your response.")

        #### Guardrail

        The API features a guardrail that helps ensure the input is appropriate for a MongoDB assistant.
        This helps ensure the API isn't used for irrelevant or malicious purposes.

        #### Tracing and Storage

        All messages to the chatbot are traced and stored if `store: true`.
        
        For access to chatbot data, reach out to the Education AI team (`#ask-education-ai` on Slack).

        All data retention is in line with MongoDB data retention policies.

      tags:
        - Responses
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateResponseRequest"
      responses:
        200:
          description: OK
          content:
            text/event-stream:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ResponseStreamEvent"
                examples:
                  - summary: Example response.created event
                    value:
                      type: "response.created"
                      sequence_number: 0
                      response:
                        id: "676f1234567890abcdef1234"
                        object: "response"
                        created_at: 1735123456789
                        error: null
                        incomplete_details: null
                        instructions: "You are a helpful MongoDB assistant."
                        max_output_tokens: 1000
                        model: "mongodb-chat-latest"
                        output_text: ""
                        output: []
                        parallel_tool_calls: true
                        previous_response_id: null
                        store: true
                        temperature: 0
                        stream: true
                        tool_choice: "auto"
                        tools: []
                        top_p: null
                        user: "user123"
                        metadata: null
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
components:
  securitySchemes:
    CustomHeaderAuth:
      type: apiKey
      in: header
      name: ORIGIN
      description: |
        Can provide any value. Used to track where requests to the server
        are coming from.
        Alternatively, can provide `X-Request-Origin` header.

        The server's firewall has additional rules based on the `User-Agent` header.
        If you would like to get access to the server, please [contact the Education AI team](../contact).
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
  schemas:
    CreateResponseRequest:
      type: object
      required:
        - model
        - input
        - stream
      properties:
        model:
          type: string
          description: The model to use for generating the response
        instructions:
          type: string
          minLength: 1
          maxLength: 50000
          description: System instructions for the model (1-50,000 characters, ~10,000 tokens)
        input:
          oneOf:
            - $ref: "#/components/schemas/StringInput"
            - $ref: "#/components/schemas/MessageArrayInput"
        max_output_tokens:
          type: integer
          minimum: 0
          default: 1000
          description: Maximum number of tokens to generate
        metadata:
          type: object
          additionalProperties:
            type: string
            maxLength: 512
          maxProperties: 16
          description: Additional metadata with max 16 fields, each value max 512 chars. These are stored in the database.
        previous_response_id:
          type: string
          description: |
            The unique ID of the previous response to the model.
            Including `previous_response_id` in the request causes the model
            to use the previous response as context.

            Usage notes:
            - You can only use `previous_response_id` if `store: true`. 
            - All requests on the same conversation must have the same `user` ID leave it undefined.
        store:
          type: boolean
          default: true
          description: |
            Whether to store the response in the database.
            
            If store is `true`:

            - The response is stored in the database.
            - You may use the `previous_response_id` to statefully append new messages to the conversation.
            - The response is traced and annotated with metadata.

            If store is `false`:
            
            - Only metadata about the response is stored in the database.
            - The response is not traced.
            - You cannot add staefully interact with the converastion via `previous_response_id`.
            
        stream:
          type: boolean
          enum: [true]
          description: | 
              Stream response. Must always be `true` for current implementation.
              Non-streaming is not yet supported.
        temperature:
          type: number
          enum: [0]
          default: 0
          description: Temperature for the model. Must be `0`.
        tool_choice:
          oneOf:
            - type: string
              enum: [auto]
            - type: object
              properties:
                type:
                  type: string
                  enum: [function]
                name:
                  type: string
              required: [type, name]
          default: auto
          description: |
            Tool choice for the model.
            
            Note that the OpenAI Responses API options `none` and `required` are not supported by our implementation.
            We do not support them because it would be complex to use them with the internal tool call system that our API uses for RAG.
            If you need these options supported, please [contact the Education AI team](../contact).
        tools:
          type: array
          maxItems: 10
          items:
            type: object
            properties:
              type:
                type: string
                enum: [function]
              strict:
                type: boolean
              name:
                type: string
              description:
                type: string
              parameters:
                type: object
                description: A JSON schema object describing the parameters of the function
                additionalProperties: true
            required: [type, strict, name, parameters]
          description: |
            Tools for the model to use. 
            
            Limitations:
            - Maximum 10 tools
            - Total serialized content must be ≤25,000 characters (~5,000 tokens)
        user:
          type: string
          description: |
            The ID of the user. Can be any arbitrary string.
            
            If used in combination with `previous_response_id`, the value for `user` must be the same for all requests on the same conversation.
            
    Conversation:
      type: object
      required:
        - _id
        - messages
        - createdAt
      properties:
        _id:
          type: string
          description: The unique identifier for a conversation.
        messages:
          type: array
          items:
            $ref: "#/components/schemas/Message"
        createdAt:
          type: integer
          description: Unix timestamp for when the conversation was created.
    Message:
      type: object
      required:
        - id
        - conversationId
        - role
        - content
        - createdAt
      properties:
        id:
          type: string
          description: The unique identifier for a message.
        conversationId:
          type: string
          description: The unique identifier for a conversation.
        role:
          type: string
          enum: [user, assistant]
        content:
          type: string
          format: markdown
          description: |
            Markdown-formatted response to user's chat message in the context
            of the conversation.
        rating:
          type: boolean
          description: |
            Set to `true` if the user liked the response, `false` if the user didn't like the response.
            No value if user didn't rate the response.

            Note that only messages with `role: "assistant"` can be rated.
        userComment:
          type: string
          description: |
            Comment from the user clarifying why they liked or disliked
            the message. No value if user didn't comment on the response.

            Note that only messages with `role: "assistant"` can be commented on.
        createdAt:
          type: integer
          description: |
            Unix timestamp for when the message was sent.
        references:
          $ref: "#/components/schemas/References"
    References:
      type: array
      description: |
        List of references to external resources that are relevant
        to the message. For example, if the message is a response to
        a user's question about how to connect, the list of
        references could include links to the documentation, dev
        center articles, or a video lesson on MongoDB University.
      items:
        type: object
        required: [title, url]
        properties:
          title:
            type: string
            description: |
              Title of the reference. This is what shows up in
              rendered links. For example, "How to connect to
              MongoDB Atlas".
          url:
            type: string
            format: uri
            description: |
              URL to the reference. For example, "https://mongodb.com/docs/atlas/getting-started".
    MessageResponseStreamEvent:
      oneOf:
        - $ref: "#/components/schemas/StreamEventDelta"
        - $ref: "#/components/schemas/StreamEventMetadata"
        - $ref: "#/components/schemas/StreamEventProcessing"
        - $ref: "#/components/schemas/StreamEventReferences"
        - $ref: "#/components/schemas/StreamEventFinished"
      description: A server-sent event data payload for a streaming message.
    ResponseStreamEvent:
      oneOf:
        - $ref: "#/components/schemas/ResponseCreatedEvent"
        - $ref: "#/components/schemas/ResponseInProgressEvent"
        - $ref: "#/components/schemas/ResponseCompletedEvent"
        - $ref: "#/components/schemas/ResponseOutputTextAnnotationAddedEvent"
        - $ref: "#/components/schemas/ResponseOutputTextDeltaEvent"
        - $ref: "#/components/schemas/ResponseOutputTextDoneEvent"
        - $ref: "#/components/schemas/ResponseFunctionCallArgumentsDeltaEvent"
        - $ref: "#/components/schemas/ResponseFunctionCallArgumentsDoneEvent"
      description: Stream events for response creation
    ResponseCreatedEvent:
      type: object
      properties:
        type:
          type: string
          enum: [response.created]
        sequence_number:
          type: integer
          description: Sequence number of the event
        response:
          $ref: "#/components/schemas/ResponseObject"
      required: [type, sequence_number, response]
      description: Event sent when response is created
    ResponseInProgressEvent:
      type: object
      properties:
        type:
          type: string
          enum: [response.in_progress]
        sequence_number:
          type: integer
          description: Sequence number of the event
        response:
          $ref: "#/components/schemas/ResponseObject"
      required: [type, sequence_number, response]
      description: Event sent when response is in progress
    ResponseCompletedEvent:
      type: object
      properties:
        type:
          type: string
          enum: [response.completed]
        sequence_number:
          type: integer
          description: Sequence number of the event
        response:
          $ref: "#/components/schemas/ResponseObject"
      required: [type, sequence_number, response]
      description: Event sent when response is completed
    ResponseOutputTextAnnotationAddedEvent:
      type: object
      properties:
        type:
          type: string
          enum: [response.output_text.annotation.added]
        item_id:
          type: string
          description: Unique identifier for the item
        output_index:
          type: integer
          description: Index of the output
        content_index:
          type: integer
          description: Index of the content
        annotation_index:
          type: integer
          description: Index of the annotation
        annotation:
          type: object
          properties:
            type:
              type: string
              enum: [text_annotation]
            text:
              type: string
              description: The annotation text content
            start:
              type: integer
              description: Start position of the annotation
            end:
              type: integer
              description: End position of the annotation
          required: [type, text, start, end]
          description: The annotation object
        sequence_number:
          type: integer
          description: Sequence number of the event
      required: [type, item_id, output_index, content_index, annotation_index, annotation, sequence_number]
      description: |
        Event sent when a text annotation is added to response output.
        This is used to include references used by the internal search tool.
    ResponseOutputTextDeltaEvent:
      type: object
      properties:
        type:
          type: string
          enum: [response.output_text.delta]
        item_id:
          type: string
          description: Unique identifier for the item
        output_index:
          type: integer
          description: Index of the output
        content_index:
          type: integer
          description: Index of the content
        delta:
          type: string
          description: Incremental text content being streamed
        sequence_number:
          type: integer
          description: Sequence number of the event
      required: [type, item_id, output_index, content_index, delta, sequence_number]
      description: Event sent for each piece of streaming text content
    ResponseOutputTextDoneEvent:
      type: object
      properties:
        type:
          type: string
          enum: [response.output_text.done]
        item_id:
          type: string
          description: Unique identifier for the item
        output_index:
          type: integer
          description: Index of the output
        content_index:
          type: integer
          description: Index of the content
        text:
          type: string
          description: The complete final text content
        sequence_number:
          type: integer
          description: Sequence number of the event
      required: [type, item_id, output_index, content_index, text, sequence_number]
      description: Event sent when text output is complete with the final content
    ResponseFunctionCallArgumentsDeltaEvent:
      type: object
      properties:
        type:
          type: string
          enum: [response.function_call_arguments.delta]
        item_id:
          type: string
          description: Unique identifier for the item
        output_index:
          type: integer
          description: Index of the output
        delta:
          type: string
          description: Incremental function call arguments being streamed
        sequence_number:
          type: integer
          description: Sequence number of the event
      required: [type, item_id, output_index, delta, sequence_number]
      description: Event sent for each piece of streaming function call arguments
    ResponseFunctionCallArgumentsDoneEvent:
      type: object
      properties:
        type:
          type: string
          enum: [response.function_call_arguments.done]
        item_id:
          type: string
          description: Unique identifier for the item
        output_index:
          type: integer
          description: Index of the output
        arguments:
          type: string
          description: The complete function call arguments as JSON string
        sequence_number:
          type: integer
          description: Sequence number of the event
      required: [type, item_id, output_index, arguments, sequence_number]
      description: Event sent when function call arguments are complete
    ResponseObject:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the response
        object:
          type: string
          enum: [response]
        created_at:
          type: integer
          description: Unix timestamp when response was created
        error:
          type: "null"
          description: Error information (always null for successful responses)
        incomplete_details:
          type: "null"
          description: Details about incomplete response (always null for successful responses)
        instructions:
          type: string
          nullable: true
          description: System instructions for the model
        max_output_tokens:
          type: integer
          nullable: true
          description: Maximum number of tokens to generate
        model:
          type: string
          description: Model used for the response
        output_text:
          type: string
          description: Generated output text (empty during streaming)
        output:
          type: array
          items: {}
          description: Generated output array (empty during streaming)
        parallel_tool_calls:
          type: boolean
          description: Whether parallel tool calls are enabled
        previous_response_id:
          type: string
          nullable: true
          description: ID of the previous response
        store:
          type: boolean
          description: Whether to store the response
        temperature:
          type: number
          description: Temperature setting for the model
        stream:
          type: boolean
          description: Whether response is streamed
        tool_choice:
          oneOf:
            - type: string
              enum: [none, auto, required]
            - type: object
              properties:
                type:
                  type: string
                  enum: [function]
                name:
                  type: string
              required: [type, name]
          description: Tool choice configuration
        tools:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum: [function]
              strict:
                type: boolean
              name:
                type: string
              description:
                type: string
              parameters:
                type: object
                additionalProperties: true
            required: [type, strict, name, parameters]
          description: Available tools for the model
        top_p:
          type: "null"
          description: Top-p sampling parameter (always null)
        user:
          type: string
          description: User ID
        metadata:
          type: object
          nullable: true
          additionalProperties:
            type: string
          description: Additional metadata
      required: [id, object, created_at, error, incomplete_details, model, output_text, output, parallel_tool_calls, store, temperature, stream, tool_choice, tools, top_p]
    StreamEventDelta:
      description: Assistant response text.
      type: object
      properties:
        type:
          type: string
          enum: [delta]
        data:
          description: Piece of content
          type: string
    StreamEventProcessing:
      description: |
        Message to send while processing a user request.
        For example, you could send a processing message during a long running tool
        call to update the user of what is occurring.
      type: object
      properties:
        type:
          type: string
          enum: [processing]
        data:
          description: Information about processing event.
          type: string
    StreamEventReferences:
      description: References to include with the answer.
      type: object
      properties:
        type:
          type: string
          enum: [references]
        data:
          $ref: "#/components/schemas/References"
    StreamEventMetadata:
      description: Any additional metadata with the answer.
      type: object
      properties:
        type:
          type: string
          enum: [metadata]
        data:
          type: object
          additionalProperties: true
    StreamEventFinished:
      description: Last message when streaming has finished.
      type: object
      properties:
        type:
          type: string
          enum: [finished]
        data:
          description: Message ID.
          type: string
    MessageComment:
      type: object
      properties:
        comment:
          type: string
          description: |
            Comment from the user clarifying why they liked or disliked
            the message.
    MessageRating:
      type: object
      properties:
        rating:
          type: boolean
          description: |
            Set to `true` if the user liked the message, `false` if the user didn't like the message.
    StringInput:
      type: string
      minLength: 1
      maxLength: 250000
      description: A string input message from the user (1-250,000 characters, ~50,000 tokens)
    MessageArrayInput:
      type: array
      minItems: 1
      maxItems: 50
      description: |
        Array of messages or function calls/outputs.
        
        Limitations:
        - Maximum 50 items
        - Total serialized content must be ≤250,000 characters (~50,000 tokens)
      items:
        oneOf:
          - $ref: "#/components/schemas/MessageItem"
          - $ref: "#/components/schemas/FunctionCallItem"
          - $ref: "#/components/schemas/FunctionCallOutputItem"
    MessageItem:
      type: object
      properties:
        type:
          type: string
          enum: [message]
        role:
          type: string
          enum: [user, assistant, system]
        content:
          type: string
      required: [role, content]
    FunctionCallItem:
      type: object
      properties:
        type:
          type: string
          enum: [function_call]
        call_id:
          type: string
          description: Unique ID of the function tool call
        name:
          type: string
          description: Name of the function tool to call
        arguments:
          type: string
          description: JSON string of arguments passed to the function tool call
        status:
          type: string
          enum: [in_progress, completed, incomplete]
      required: [type, call_id, name, arguments, status]
    FunctionCallOutputItem:
      type: object
      properties:
        type:
          type: string
          enum: [function_call_output]
        id:
          type: string
          description: The unique ID of the function tool call output
        call_id:
          type: string
          description: Unique ID of the function tool call generated by the model
        output:
          type: string
          description: JSON string of the function tool call
        status:
          type: string
          enum: [in_progress, completed, incomplete]
      required: [type, call_id, output, status]
    ErrorResponse:
      type: object
    SearchResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/Chunk"
    Chunk:
      type: object
      properties:
        url:
          type: string
          description: The URL of the search result.
        title:
          type: string
          description: Title of the search result.
        text:
          type: string
          description: Chunk text
        metadata:
          type: object
          properties:
            sourceName:
              type: string
              description: The name of the source.
            sourceType:
              type: string
            tags:
              type: array
              items:
                type: string
          additionalProperties: true
    ListDataSourcesResponse:
      type: object
      properties:
        dataSources:
          type: array
          items:
            $ref: "#/components/schemas/DataSourceMetadata"
    DataSourceMetadata:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: The name of the data source.
        versions:
          type: array
          items:
            type: object
            properties:
              label:
                type: string
                description: Version label
              isCurrent:
                type: boolean
                description: Whether this version is current active version.
          description: List of versions for this data source.
        type:
          type: string
          description: The type of the data source.
  parameters:
    conversationId:
      name: conversationId
      required: true
      in: path
      schema:
        type: string
      description: The unique identifier for a conversation.
    messageId:
      name: messageId
      required: true
      in: path
      schema:
        type: string
      description: The unique identifier for a message.

tags:
  - name: Content
    x-displayName: Search Content
    description: Search MongoDB content
  - name: Conversations
    x-displayName: Conversations
    description: Interact with MongoDB Chatbot

x-tagGroups:
  - name: Content
    tags:
      - Content
  - name: Conversations
    tags:
      - Conversations