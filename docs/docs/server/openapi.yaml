openapi: 3.1.0
info:
  title: MongoDB RAG Server API
  version: 1.0.0
  license:
    name: Apache 2.0
    url: https://github.com/mongodb/chatbot/blob/main/LICENSE
  description: |
    The MongoDB RAG Server API is a RESTful API that allows you to
    create and manage conversations.
    The API is designed to be used by the MongoDB RAG UI frontend,
    but can also be used by other clients.

    **NOTE:** The default configuration requires capturing user IP address
    and a header `Origin: some_string`. You can override this.
    Refer to the server configuration documentation for more information.
servers:
  - url: http://<Your Server Base URL>/api/v1
security:
  - ApiKeyAuth: []
paths:
  /conversations:
    post:
      operationId: createConversation
      summary: Start new conversation
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"

  /conversations/{conversationId}/messages:
    post:
      operationId: addMessage
      summary: Add message to the conversation
      description: |
        Add a message to the conversation and get a response back from chatbot.

        You can configure your server to create new conversations
        when you set the conversation ID to `null`.
        If you do this, the server creates a new conversation
        and returns the conversation ID in the response's `metadata.conversationId` field.
      parameters:
        - $ref: "#/components/parameters/conversationId"
        - name: stream
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: |
            If `true`, the response will be streamed to the client. This is useful for long-running conversations.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [message]
              properties:
                message:
                  type: string
                  format: markdown
                  description: |
                    Markdown-formatted message from the user.
                clientContext:
                  type: object
                  description: |
                    Additional context provided by the client. This is useful
                    for passing information to the chatbot that is not part of
                    the user's message but may be relevant to the chatbot's
                    response. For example, the client may pass information about
                    the user's preferences, location, preferred language, etc.
                  additionalProperties: true
      responses:
        200:
          x-summary: OK
          description: |
            If you set the query parameter `?stream=false`, the server responds with `application/json`.

            If you set the query parameter `?stream=true`, the server responds with `text/event-stream`. The server returns a [server-sent event](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#event_stream_format) stream.
            (Note that the server does not use [named events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#named_events).)
            The below schema for `text/event-stream` corresponds to contents of the event's `data` field. For example:

            ```txt
            data: {"type": "processing", "data": "Calling tool to get information..."}

            data: {"type": "delta", "data": "Starting "}

            data: {"type": "delta", "data": "to "}

            data: {"type": "delta", "data": "stream "}

            data: {"type": "references", "data": [{"url": "https://mongodb.com/docs/atlas/getting-started", "title": "Get Started with MongoDB Atlas"}]}

            data: {"type": "finished", "data": "someMessageId"}
            ```
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
            text/event-stream:
              schema:
                allOf:
                  - $ref: "#/components/schemas/MessageResponseStreamEvent"
                examples:
                  - summary: Example of a StreamEventDelta
                    value:
                      type: "delta"
                      data: "Updated event information or specific content changes."
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /conversations/{conversationId}:
    get:
      operationId: getConversation
      summary: Get a conversation
      parameters:
        - $ref: "#/components/parameters/conversationId"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /conversations/{conversationId}/messages/{messageId}/rating:
    post:
      operationId: rateMessage
      summary: Rate message
      parameters:
        - $ref: "#/components/parameters/conversationId"
        - $ref: "#/components/parameters/messageId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageRating"
      responses:
        204:
          description: Rating Saved
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /conversations/{conversationId}/messages/{messageId}/comment:
    post:
      operationId: commentMessage
      summary: Add comment to assistant message
      description: |
        Add a comment to an assistant message that clarifies a thumbs up/down rating.

        You can only rate an an assistant message that has a thumbs up/down rating. You can only rate a message once. The server returns a `400` error response if the message is not from the assistant, is not rated, or has already been rated.
      parameters:
        - $ref: "#/components/parameters/conversationId"
        - $ref: "#/components/parameters/messageId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageComment"
      responses:
        204:
          description: Comment Saved
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
  schemas:
    Conversation:
      type: object
      required:
        - _id
        - messages
        - createdAt
      properties:
        _id:
          type: string
          description: The unique identifier for a conversation.
        messages:
          type: array
          items:
            $ref: "#/components/schemas/Message"
        createdAt:
          type: integer
          description: Unix timestamp for when the conversation was created.
    Message:
      type: object
      required:
        - id
        - conversationId
        - role
        - content
        - createdAt
      properties:
        id:
          type: string
          description: The unique identifier for a message.
        conversationId:
          type: string
          description: The unique identifier for a conversation.
        role:
          type: string
          enum: [user, assistant]
        content:
          type: string
          format: markdown
          description: |
            Markdown-formatted response to user's chat message in the context
            of the conversation.
        rating:
          type: boolean
          description: |
            Set to `true` if the user liked the response, `false` if the user didn't like the response.
            No value if user didn't rate the response.

            Note that only messages with `role: "assistant"` can be rated.
        userComment:
          type: string
          description: |
            Comment from the user clarifying why they liked or disliked
            the message. No value if user didn't comment on the response.

            Note that only messages with `role: "assistant"` can be commented on.
        createdAt:
          type: integer
          description: |
            Unix timestamp for when the message was sent.
        references:
          $ref: "#/components/schemas/References"
    References:
      type: array
      description: |
        List of references to external resources that are relevant
        to the message. For example, if the message is a response to
        a user's question about how to connect, the list of
        references could include links to the documentation, dev
        center articles, or a video lesson on MongoDB University.
      items:
        type: object
        required: [title, url]
        properties:
          title:
            type: string
            description: |
              Title of the reference. This is what shows up in
              rendered links. For example, "How to connect to
              MongoDB Atlas".
          url:
            type: string
            format: uri
            description: |
              URL to the reference. For example, "https://mongodb.com/docs/atlas/getting-started".
    MessageResponseStreamEvent:
      oneOf:
        - $ref: "#/components/schemas/StreamEventDelta"
        - $ref: "#/components/schemas/StreamEventMetadata"
        - $ref: "#/components/schemas/StreamEventProcessing"
        - $ref: "#/components/schemas/StreamEventReferences"
        - $ref: "#/components/schemas/StreamEventFinished"
      description: A server-sent event data payload for a streaming message.
    StreamEventDelta:
      description: Assistant response text.
      type: object
      properties:
        type:
          type: string
          enum: [delta]
        data:
          description: Piece of content
          type: string
    StreamEventProcessing:
      description: |
        Message to send while processing a user request.
        For example, you could send a processing message during a long running tool
        call to update the user of what is occurring.
      type: object
      properties:
        type:
          type: string
          enum: [processing]
        data:
          description: Information about processing event.
          type: string
    StreamEventReferences:
      description: References to include with the answer.
      type: object
      properties:
        type:
          type: string
          enum: [references]
        data:
          $ref: "#/components/schemas/References"
    StreamEventMetadata:
      description: Any additional metadata with the answer.
      type: object
      properties:
        type:
          type: string
          enum: [metadata]
        data:
          type: object
          additionalProperties: true
    StreamEventFinished:
      description: Last message when streaming has finished.
      type: object
      properties:
        type:
          type: string
          enum: [finished]
        data:
          description: Message ID.
          type: string
    MessageComment:
      type: object
      properties:
        comment:
          type: string
          description: |
            Comment from the user clarifying why they liked or disliked
            the message.
    MessageRating:
      type: object
      properties:
        rating:
          type: boolean
          description: |
            Set to `true` if the user liked the message, `false` if the user didn't like the message.
    ErrorResponse:
      type: object
  parameters:
    conversationId:
      name: conversationId
      required: true
      in: path
      schema:
        type: string
      description: The unique identifier for a conversation.
    messageId:
      name: messageId
      required: true
      in: path
      schema:
        type: string
      description: The unique identifier for a message.
