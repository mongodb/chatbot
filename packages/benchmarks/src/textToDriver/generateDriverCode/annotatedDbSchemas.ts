import { DatabaseInfo } from "mongodb-rag-core/executeCode";

export function makePromptDbInfo(databaseInfo: DatabaseInfo) {
  return `## Database Information

Name: ${databaseInfo.name}
Description: ${databaseInfo.description}
Latest Date: ${databaseInfo.latestDate} (use this to inform dates in queries)

### Collections

${databaseInfo.collections
  .map(
    (c) => `#### Collection \`${c.name}\`
Description: ${c.description}
Schema:
${c.schema}
Indexes:
${c.indexes?.map((i) => `${JSON.stringify(i)}`) ?? "No indexes"}`
  )
  .join("\n")}`;
}

/**
  An arbitrary latest date to use for the annotated database schemas for databases where date doesn't matter.
 */
const arbitraryLatestDate = new Date("2025-03-04T21:41:18.857Z");

/**
  Annotated schemas of the [Atlas sample dataset](https://www.mongodb.com/docs/atlas/sample-data/) databases. 
 */
export const annotatedDbSchemas = {
  sample_mflix: {
    name: "sample_mflix",
    description:
      "The 'sample_mflix' database is designed to manage and store information related to movies, users, and their interactions with the movie content. It includes collections for storing user data, movie details, user comments on movies, user sessions, and theater locations. This database supports a movie streaming or review platform where users can register, comment on movies, and find theater information.",
    latestDate: new Date("2025-03-04T21:38:53.856Z"),
    collections: [
      {
        name: "users",
        description:
          "The 'users' collection stores user information, including names, emails, and passwords. It is fundamental for managing user accounts and authentication within the platform. The collection ensures unique email addresses for each user, which is crucial for user identification and login processes.",
        schema: `interface User {
  /**
   * Unique identifier for the user, automatically generated by MongoDB.
   */
  _id: ObjectId;
  /**
   * The name of the user.
   */
  name: string;
  /**
   * The email address of the user. This field is unique across the collection.
   */
  email: string;
  /**
   * The hashed password of the user.
   */
  password: string;
  /**
   * A hash value associated with the user, possibly for additional security or verification purposes.
   */
  hash: Long;
}`,
        examples: [
          {
            _id: {
              $oid: "59b99dd8cfa9a34dcd7885f7",
            },
            name: "Loras Tyrell",
            email: "finn_jones@gameofthron.es",
            password:
              "$2b$12$Eb5TLqYLS74pLP9r.2agNe56ht1dvFkQOCODxku8KQmLfldBGa7Cu",
            hash: {
              low: 2112934512,
              high: -2145758107,
              unsigned: false,
            },
          },
          {
            _id: {
              $oid: "59b99dc3cfa9a34dcd7885d5",
            },
            name: "Gendry",
            email: "joe_dempsie@gameofthron.es",
            password:
              "$2b$12$ctQymjuvXC5dQXYTWX695eJ/0IEXLfXhNiuzad0bL7j8n9YCBq92K",
            hash: {
              low: -414619909,
              high: -2133499436,
              unsigned: false,
            },
          },
        ],
        indexes: [
          {
            key: {
              _id: 1,
            },
            name: "_id_",
            description:
              "This is the default index on the _id field, which ensures that each document in the collection has a unique identifier. It is used for fast lookups by _id.",
          },
          {
            key: {
              email: 1,
            },
            name: "email_1",
            unique: true,
            description:
              "This is a unique index on the email field, ensuring that no two documents can have the same email address. This is useful for user authentication and ensuring email uniqueness.",
          },
        ],
      },
      {
        name: "comments",
        description:
          "The 'sessions' collection manages user session data, including user IDs and JWT tokens. It plays a critical role in maintaining user authentication states and ensuring secure access to the platform. Each session is uniquely associated with a user, linking back to the 'users' collection.",
        schema: `interface Comment {
  /**
   * Unique identifier for the comment.
   */
  _id: ObjectId;
  /**
   * Name of the person who made the comment.
   */
  name: string;
  /**
   * Email of the person who made the comment.
   */
  email: string;
  /**
   * Identifier of the movie the comment is associated with.
   */
  movie_id: ObjectId;
  /**
   * Text content of the comment.
   */
  text: string;
  /**
   * Date when the comment was made.
   */
  date: Date;
  /**
   * Hash value for the comment, possibly used for integrity checks.
   */
  hash: Long;
}`,
        examples: [
          {
            _id: {
              $oid: "5a9427648b0beebeb69646cd",
            },
            name: "Bronn",
            email: "jerome_flynn@gameofthron.es",
            movie_id: {
              $oid: "573a139af29313caabcf1573",
            },
            text: "Quia iure maxime odit voluptas aspernatur esse quis. Quo quas voluptas eum laudantium molestiae quid...",
            date: {
              $date: "2011-10-28T17:48:22.000Z",
            },
            hash: {
              low: 846989165,
              high: -2147366087,
              unsigned: false,
            },
          },
          {
            _id: {
              $oid: "5a9427658b0beebeb6977827",
            },
            name: "Lancel Lannister",
            email: "eugene_simon@gameofthron.es",
            movie_id: {
              $oid: "573a13bff29313caabd5f4a4",
            },
            text: "Blanditiis inventore eaque corporis. Cupiditate porro consequatur consectetur ex dolorem quod provid...",
            date: {
              $date: "1987-05-11T14:29:31.000Z",
            },
            hash: {
              low: 1128150038,
              high: -2147320044,
              unsigned: false,
            },
          },
        ],
        indexes: [
          {
            key: {
              _id: 1,
            },
            name: "_id_",
            description:
              "This is the default index on the _id field, which ensures that each document in the collection has a unique identifier. It is used for fast lookups by _id.",
          },
        ],
      },
      {
        name: "movies",
        description:
          "The 'movies' collection contains detailed information about movies, including plots, genres, runtime, and ratings. It serves as the core content repository for the platform, providing users with movie data to browse and review. This collection is central to the platform's functionality, as it holds the primary content users interact with.",
        schema: `interface Movie {
  /**
   * Unique identifier for the movie document.
   */
  _id: ObjectId;
  /**
   * Brief description of the movie's plot.
   */
  plot: string;
  /**
   * List of genres associated with the movie.
   */
  genres: string[];
  /**
   * Duration of the movie in minutes.
   */
  runtime: number;
  /**
   * Title of the movie.
   */
  title: string;
  /**
   * Number of comments on the movie in the mflix system.
   */
  num_mflix_comments: number;
  /**
   * URL to the movie's poster image.
   */
  poster: string;
  /**
   * List of countries where the movie was produced.
   */
  countries: string[];
  /**
   * Detailed description of the movie's plot.
   */
  fullplot: string;
  /**
   * Languages spoken in the movie.
   */
  languages: string[];
  /**
   * Release date of the movie.
   */
  released: Date;
  /**
   * List of directors of the movie.
   */
  directors: string[];
  /**
   * List of writers of the movie.
   */
  writers: string[];
  /**
   * Awards received by the movie.
   */
  awards: {
    /**
     * Number of awards won by the movie.
     */
    wins: number;
    /**
     * Number of award nominations received by the movie.
     */
    nominations: number;
    /**
     * Textual description of the awards.
     */
    text: string;
  };
  /**
   * Last updated timestamp for the movie document.
   */
  lastupdated: string;
  /**
   * Year the movie was released.
   */
  year: number;
  /**
   * IMDb information for the movie.
   */
  imdb: {
    /**
     * IMDb rating of the movie.
     */
    rating: number;
    /**
     * Number of votes the movie received on IMDb.
     */
    votes: number;
    /**
     * IMDb identifier for the movie.
     */
    id: number;
  };
  /**
   * Type of the movie (e.g., movie, series).
   */
  type: string;
  /**
   * Rotten Tomatoes information for the movie.
   */
  tomatoes: {
    /**
     * Viewer ratings on Rotten Tomatoes.
     */
    viewer?: {
      /**
       * Viewer rating score.
       */
      rating: number;
      /**
       * Number of reviews by viewers.
       */
      numReviews: number;
      /**
       * Viewer meter score.
       */
      meter: number;
    };
    /**
     * DVD release date.
     */
    dvd?: Date;
    /**
     * Last updated timestamp for Rotten Tomatoes data.
     */
    lastUpdated?: Date;
    /**
     * Official website for the movie.
     */
    website?: string;
    /**
     * Critic ratings on Rotten Tomatoes.
     */
    critic?: {
      /**
       * Critic rating score.
       */
      rating: number;
      /**
       * Number of reviews by critics.
       */
      numReviews: number;
      /**
       * Critic meter score.
       */
      meter: number;
    };
    /**
     * Box office earnings.
     */
    boxOffice?: string;
    /**
     * Consensus statement from Rotten Tomatoes.
     */
    consensus?: string;
    /**
     * Number of rotten reviews.
     */
    rotten?: number;
    /**
     * Production company.
     */
    production?: string;
    /**
     * Number of fresh reviews.
     */
    fresh?: number;
  };
  /**
   * Hash value for the movie document.
   */
  hash: Long;
  /**
   * MPAA rating of the movie.
   */
  rated?: string;
  /**
   * Metacritic score of the movie.
   */
  metacritic?: number;
  /**
   * List of main cast members in the movie.
   */
  cast: string[];
}`,
        examples: [
          {
            _id: {
              $oid: "573a13bbf29313caabd526d0",
            },
            plot: "Van Erp shows us what the Dutch do in their spare time and takes a look at the industry behind all t...",
            genres: ["Documentary"],
            runtime: 90,
            title: "Pretpark Nederland",
            num_mflix_comments: 0,
            poster:
              "https://m.media-amazon.com/images/M/MV5BMTUwNjU0ODg3N15BMl5BanBnXkFtZTcwMzg3NjYxNA@@._V1_SY1000_SX67...",
            countries: ["Netherlands"],
            fullplot:
              "Van Erp displays the mechanics behind the Dutch tourism industry. Key figures behind events and dest...",
            languages: ["Dutch", "Mandarin"],
            released: {
              $date: "2006-10-18T00:00:00.000Z",
            },
            directors: ["Michiel van Erp"],
            writers: [
              "Renè van 't Erve (scenario)",
              "Michiel van Erp (scenario)",
            ],
            awards: {
              wins: 0,
              nominations: 1,
              text: "1 nomination.",
            },
            lastupdated: "2015-02-26T00:48:24.883Z",
            year: 2006,
            imdb: {
              rating: 7.3,
              votes: 237,
              id: 882800,
            },
            type: "movie",
            tomatoes: {
              viewer: {
                rating: 2.2,
                numReviews: 19,
              },
              dvd: {
                $date: "2010-06-22T00:00:00.000Z",
              },
              lastUpdated: {
                $date: "2014-11-24T14:15:50.000Z",
              },
            },
            hash: {
              low: -1866172407,
              high: -2147460187,
              unsigned: false,
            },
          },
          {
            _id: {
              $oid: "573a13caf29313caabd7c4e0",
            },
            fullplot:
              "A drama centered on a rising country-music songwriter (Hedlund) who sparks with a fallen star (Paltr...",
            imdb: {
              rating: 6.3,
              votes: 14066,
              id: 1555064,
            },
            year: 2010,
            plot: "A rising country-music songwriter works with a fallen star to work their way fame, causing romantic ...",
            genres: ["Drama", "Music"],
            rated: "PG-13",
            metacritic: 45,
            title: "Country Strong",
            lastupdated: "2015-09-03T00:39:54.710Z",
            languages: ["English"],
            writers: ["Shana Feste"],
            type: "movie",
            tomatoes: {
              website: "http://www.countrystrong-movie.com/?hs308=CST6186",
              viewer: {
                rating: 3.3,
                numReviews: 32825,
                meter: 53,
              },
              dvd: {
                $date: "2011-04-12T00:00:00.000Z",
              },
              critic: {
                rating: 4.5,
                numReviews: 130,
                meter: 22,
              },
              boxOffice: "$20.2M",
              consensus:
                "The cast gives it their all, and Paltrow handles her songs with aplomb, but Country Strong's cliched...",
              rotten: 101,
              production: "Screen Gems",
              lastUpdated: {
                $date: "2015-08-17T18:04:40.000Z",
              },
              fresh: 29,
            },
            poster:
              "https://m.media-amazon.com/images/M/MV5BMTUxMjQ0NjE3OV5BMl5BanBnXkFtZTcwODIxNDEwNA@@._V1_SY1000_SX67...",
            num_mflix_comments: 0,
            released: {
              $date: "2011-01-07T00:00:00.000Z",
            },
            awards: {
              wins: 2,
              nominations: 6,
              text: "Nominated for 1 Oscar. Another 1 win & 6 nominations.",
            },
            countries: ["USA"],
            cast: [
              "Gwyneth Paltrow",
              "Tim McGraw",
              "Garrett Hedlund",
              "...and 1 more items",
            ],
            "...": "3 more keys",
          },
        ],
        indexes: [
          {
            key: {
              _id: 1,
            },
            name: "_id_",
            description:
              "This is the default index on the _id field, which ensures that each document in the collection has a unique identifier. It is used for fast lookups by _id.",
          },
          {
            key: {
              _fts: "text",
              _ftsx: 1,
            },
            name: "cast_text_fullplot_text_genres_text_title_text",
            description:
              "This is a text index on the cast, fullplot, genres, and title fields. It allows for efficient text search queries across these fields, which is useful for search functionalities where users might search for movies by cast members, plot details, genres, or titles.",
          },
        ],
      },
      {
        name: "sessions",
        description:
          "The 'comments' collection stores user comments on movies, including the user's name, email, and the movie ID they are commenting on. It facilitates user interaction and engagement by allowing users to share their thoughts on movies. This collection is linked to both the 'users' and 'movies' collections, as it requires user information and movie references.",
        schema: `interface Session {
  /** * Unique identifier for the session document. */ _id: ObjectId;
  /** * Identifier for the user associated with this session. */ user_id: string;
  /** * JSON Web Token for session authentication. */ jwt: string;
  /** * Hash value for additional security or integrity checks. */ hash: Long;
}`,
        examples: [
          {
            _id: {
              $oid: "5a97f9c91c807bb9c6eb5fb4",
            },
            user_id: "t3qulfeem@kwiv5.6ur",
            jwt: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1MTk5MDkzMjEsIm5iZiI6MTUxOTkwOTMyMSwianRpIjoiNmJlZDA...",
            hash: {
              low: 875808947,
              high: -1976519675,
              unsigned: false,
            },
          },
        ],
        indexes: [
          {
            key: {
              _id: 1,
            },
            name: "_id_",
            description:
              "This is the default index on the _id field, which ensures that each document in the collection has a unique identifier. It is used for fast lookups by _id.",
          },
          {
            key: {
              user_id: 1,
            },
            name: "user_id_1",
            unique: true,
            description:
              "This is a unique index on the user_id field, ensuring that no two documents can have the same user_id. This is useful for managing user sessions and ensuring that each user has a unique session.",
          },
        ],
      },
      {
        name: "theaters",
        description:
          "The 'theaters' collection holds information about theater locations, including addresses and geographical coordinates. It supports features related to finding movie showings in physical locations, enhancing the platform's utility for users interested in watching movies in theaters. The collection's geo-indexing allows for efficient location-based queries.",
        schema: `interface Theater {
  /**
   * Unique identifier for the theater document.
   */
  _id: ObjectId;
  /**
   * Unique identifier for the theater.
   */
  theaterId: number;
  /**
   * Location details of the theater, including address and geographical coordinates.
   */
  location: {
    /**
     * Address details of the theater.
     */
    address: {
      /**
       * Street address of the theater.
       */
      street1: string;
      /**
       * City where the theater is located.
       */
      city: string;
      /**
       * State where the theater is located.
       */
      state: string;
      /**
       * Zipcode of the theater's location.
       */
      zipcode: string;
    };
    /**
     * Geographical information of the theater's location.
     */
    geo: {
      /**
       * Type of the geographical data, typically 'Point'.
       */
      type: string;
      /**
       * Coordinates of the theater's location, represented as [longitude, latitude].
       */
      coordinates: [number, number];
    };
  };
  /**
   * Hash value for internal use, possibly for data integrity or versioning.
   */
  hash: Long;
}`,
        examples: [
          {
            _id: {
              $oid: "59a47287cfa9a3a73e51ec13",
            },
            theaterId: 776,
            location: {
              address: {
                street1: "1679 Scenic Hwy N",
                city: "Snellville",
                state: "GA",
                zipcode: "30078",
              },
              geo: {
                type: "Point",
                coordinates: [-84.013058, 33.882777],
              },
            },
            hash: {
              low: 1701361298,
              high: -2145791898,
              unsigned: false,
            },
          },
          {
            _id: {
              $oid: "59a47287cfa9a3a73e51ea22",
            },
            theaterId: 2862,
            location: {
              address: {
                street1: "4156-E North Harlem Ave",
                city: "Norridge",
                state: "IL",
                zipcode: "60706",
              },
              geo: {
                type: "Point",
                coordinates: [-87.807425, 41.953814],
              },
            },
            hash: {
              low: 1050492525,
              high: -2142047742,
              unsigned: false,
            },
          },
        ],
        indexes: [
          {
            key: {
              _id: 1,
            },
            name: "_id_",
            description:
              "This is the default index on the _id field, which ensures that each document in the collection has a unique identifier. It is used for fast lookups by _id.",
          },
          {
            key: {
              "location.geo": "2dsphere",
            },
            name: "geo index",
            description:
              "This is a 2dsphere index on the location.geo field, which allows for efficient querying of geospatial data. This is useful for finding theaters within a certain geographical area or radius.",
          },
        ],
      },
    ],
  },
  sample_airbnb: {
    name: "sample_airbnb",
    description:
      "The 'sample_airbnb' database is designed to store and manage data related to Airbnb listings. It contains detailed information about various properties available for rent, including their descriptions, amenities, host details, pricing, and reviews. This database is essential for managing Airbnb's property listings, facilitating user searches, and providing comprehensive information to potential renters.",
    latestDate: new Date("2025-03-04T21:40:09.214Z"),
    collections: [
      {
        name: "listingsAndReviews",
        description:
          "The 'listingsAndReviews' collection stores comprehensive data about Airbnb listings. Each document in this collection represents a single listing and includes details such as the property's name, description, location, amenities, pricing, and availability. It also contains host information, reviews, and ratings. This collection is central to the database as it aggregates all necessary information for a listing, enabling users to search and evaluate properties. The collection's indexes support efficient querying by property type, room type, and location, among other attributes.",
        schema: `interface ListingsAndReviews {
  /** Unique identifier for the listing */ _id: string;
  /** URL of the listing on Airbnb */ listing_url: string;
  /** Name of the listing */ name: string;
  /** Summary of the listing */ summary: string;
  /** Description of the space */ space: string;
  /** Detailed description of the listing */ description: string;
  /** Overview of the neighborhood */ neighborhood_overview: string;
  /** Additional notes about the listing */ notes: string;
  /** Information about public transit options */ transit: string;
  /** Information about access to the property */ access: string;
  /** Information about host-guest interaction */ interaction: string;
  /** House rules for the listing */ house_rules: string;
  /** Type of property (e.g., Apartment, House) */ property_type: string;
  /** Type of room offered (e.g., Entire home/apt, Private room) */ room_type: string;
  /** Type of bed offered */ bed_type: string;
  /** Minimum number of nights required for booking */ minimum_nights: string;
  /** Maximum number of nights allowed for booking */ maximum_nights: string;
  /** Cancellation policy for the listing */ cancellation_policy: string;
  /** Date when the listing was last scraped */ last_scraped: Date;
  /** Date when the calendar was last scraped */ calendar_last_scraped: Date;
  /** Date of the first review */ first_review: Date;
  /** Date of the last review */ last_review: Date;
  /** Number of guests the listing accommodates */ accommodates: number;
  /** Number of bedrooms in the listing */ bedrooms: number;
  /** Number of beds in the listing */ beds: number;
  /** Total number of reviews for the listing */ number_of_reviews: number;
  /** Number of bathrooms in the listing */ bathrooms: number;
  /** List of amenities available in the listing */ amenities: string[];
  /** Price per night for the listing */ price: number;
  /** Security deposit required for the listing */ security_deposit: number;
  /** Cleaning fee for the listing */ cleaning_fee: number;
  /** Additional fee for extra people */ extra_people: number;
  /** Number of guests included in the base price */ guests_included: number;
  /** Images related to the listing */ images: {
    /** URL of the thumbnail image */ thumbnail_url: string;
    /** URL of the medium-sized image */ medium_url: string;
    /** URL of the main picture */ picture_url: string;
    /** URL of the extra-large picture */ xl_picture_url: string;
  };
  /** Host information */ host: {
    /** Unique identifier for the host */ host_id: string;
    /** URL of the host's profile */ host_url: string;
    /** Name of the host */ host_name: string;
    /** Location of the host */ host_location: string;
    /** Description about the host */ host_about: string;
    /** Host's response time */ host_response_time: string;
    /** URL of the host's thumbnail image */ host_thumbnail_url: string;
    /** URL of the host's picture */ host_picture_url: string;
    /** Host's neighborhood */ host_neighbourhood: string;
    /** Host's response rate */ host_response_rate: number;
    /** Whether the host is a superhost */ host_is_superhost: boolean;
    /** Whether the host has a profile picture */ host_has_profile_pic: boolean;
    /** Whether the host's identity is verified */ host_identity_verified: boolean;
    /** Number of listings the host has */ host_listings_count: number;
    /** Total number of listings the host has */ host_total_listings_count: number;
    /** Verifications the host has */ host_verifications: string[];
  };
  /** Address information */ address: {
    /** Street address of the listing */ street: string;
    /** Suburb of the listing */ suburb: string;
    /** Government area of the listing */ government_area: string;
    /** Market area of the listing */ market: string;
    /** Country where the listing is located */ country: string;
    /** Country code of the listing's location */ country_code: string;
    /** Geolocation information */ location: {
      /** Type of location (e.g., Point) */ type: string;
      /** Coordinates of the location */ coordinates: number[];
      /** Whether the location is exact */ is_location_exact: boolean;
    };
  };
  /** Availability information */ availability: {
    /** Availability in the next 30 days */ availability_30: number;
    /** Availability in the next 60 days */ availability_60: number;
    /** Availability in the next 90 days */ availability_90: number;
    /** Availability in the next 365 days */ availability_365: number;
  };
  /** Review scores */ review_scores: {
    /** Accuracy score */ review_scores_accuracy: number;
    /** Cleanliness score */ review_scores_cleanliness: number;
    /** Check-in score */ review_scores_checkin: number;
    /** Communication score */ review_scores_communication: number;
    /** Location score */ review_scores_location: number;
    /** Value score */ review_scores_value: number;
    /** Overall rating score */ review_scores_rating: number;
  };
  /** Reviews of the listing */ reviews: {
    /** Unique identifier for the review */ _id: string;
    /** Date of the review */ date: Date;
    /** Identifier of the listing being reviewed */ listing_id: string;
    /** Identifier of the reviewer */ reviewer_id: string;
    /** Name of the reviewer */ reviewer_name: string;
    /** Comments made by the reviewer */ comments: string;
  }[];
  /** Hash value for the listing */ hash: number;
}`,
        examples: [
          {
            _id: "30412858",
            listing_url: "https://www.airbnb.com/rooms/30412858",
            name: "Nostalgic & Simplicity Style 2BR Darling Harbour",
            summary:
              "Overlooking picturesque Darling Harbour, Cockle Bay and Sydney CBD's striking skyline from rooftop. ...",
            space:
              "Very spacious apartment and quite,  two picturesque  bedrooms with balcony access, two spacious bath...",
            description:
              "Overlooking picturesque Darling Harbour, Cockle Bay and Sydney CBD's striking skyline from rooftop. ...",
            neighborhood_overview:
              "Ferry, Bus and Light Rail just across the road. More information --> Ferry takes you directly to Ope...",
            notes: "",
            transit: "The TripGo app can help you with transport timetables.",
            access:
              "Full access to the entire apartment and one car spot Full access to all the amenities that are locat...",
            interaction:
              "I'm available on my phone at all hours of the day to help you with anything you need",
            house_rules: "",
            property_type: "Apartment",
            room_type: "Entire home/apt",
            bed_type: "Real Bed",
            minimum_nights: "1",
            maximum_nights: "1125",
            cancellation_policy: "moderate",
            last_scraped: {
              $date: "2019-03-07T05:00:00.000Z",
            },
            calendar_last_scraped: {
              $date: "2019-03-07T05:00:00.000Z",
            },
            "...": "20 more keys",
          },
          {
            _id: "19712132",
            listing_url: "https://www.airbnb.com/rooms/19712132",
            name: "GREAT LOCATION, AMAZING OCEANFRONT VIEWS!",
            summary:
              'Welcome to Kaleialoha " Lei of Love,” From your PRIVATE LANAI you have UNOBSTRUCTED, DIRECT OCEANRON...',
            space:
              "Great location and an amazing OCEANFRONT view for a family holiday or a romantic getaway! Kaleialoha...",
            description:
              'Welcome to Kaleialoha " Lei of Love,” From your PRIVATE LANAI you have UNOBSTRUCTED, DIRECT OCEANRON...',
            neighborhood_overview:
              "This property is centrally located in West Maui and is close to a grocery store, shopping and many r...",
            notes: "",
            transit:
              "We always recommend that you have a rental car, but if you choose not too, we have several taxi serv...",
            access:
              "Our guests' are welcome to use whatever is in the unit, unless it's in a locked cabinet or closet.",
            interaction:
              "Once your booking has been confirmed, we will provide you a written confirmation that will provide t...",
            house_rules:
              "-  Quiet Hours 10 PM - 8 AM - This is a non smoking unit. Please smoke at the designed smoking areas...",
            property_type: "Condominium",
            room_type: "Entire home/apt",
            bed_type: "Real Bed",
            minimum_nights: "4",
            maximum_nights: "60",
            cancellation_policy: "strict_14_with_grace_period",
            last_scraped: {
              $date: "2019-03-06T05:00:00.000Z",
            },
            calendar_last_scraped: {
              $date: "2019-03-06T05:00:00.000Z",
            },
            "...": "20 more keys",
          },
        ],
        indexes: [
          {
            key: {
              _id: 1,
            },
            name: "_id_",
            description:
              "Index on the _id field, which ensures each document in the collection has a unique identifier. This is the default index created by MongoDB for every collection.",
          },
          {
            key: {
              property_type: 1,
              room_type: 1,
              beds: 1,
            },
            name: "property_type_1_room_type_1_beds_1",
            description:
              "Compound index on property_type, room_type, and beds fields. This index can be used to efficiently query listings based on the type of property, room, and number of beds, which is useful for filtering search results.",
          },
          {
            key: {
              name: 1,
            },
            name: "name_1",
            description:
              "Index on the name field, allowing for efficient searching and sorting of listings by their name.",
          },
          {
            key: {
              "address.location": "2dsphere",
            },
            name: "address.location_2dsphere",
            description:
              "2dsphere index on the address.location field, enabling geospatial queries to find listings within a certain area or proximity. This is useful for location-based searches.",
          },
        ],
      },
    ],
  },
  sample_weatherdata: {
    name: "sample_weatherdata",
    description:
      "The 'sample_weatherdata' database is designed to store and manage comprehensive weather data collected from various sources. It includes detailed meteorological information such as temperature, pressure, wind, visibility, and sky conditions, along with metadata about the data collection process. This database is likely used for weather analysis, forecasting, and research purposes, providing a rich dataset for understanding atmospheric conditions over time and across different locations.",
    latestDate: new Date("2025-03-04T21:39:37.818Z"),
    collections: [
      {
        name: "data",
        description:
          "The 'data' collection is the core component of the 'sample_weatherdata' database, storing detailed weather observations. Each document in this collection represents a weather data point, including attributes like air temperature, dew point, pressure, wind conditions, visibility, and sky conditions. The collection also includes metadata such as the data source, quality control process, and geographical position of the observation. This collection serves as the primary repository of weather data, supporting analysis and research activities. It does not explicitly reference other collections, indicating it may function independently within the database.",
        schema: `interface Data {
  /** Unique identifier for the document */
  _id: ObjectId;
  /** Station identifier, possibly including location information */
  st: string;
  /** Timestamp of the data record */
  ts: Date;
  /** Geographical position of the station */
  position: {
    /** Type of the geographical data, e.g., 'Point' */
    type: string;
    /** Coordinates of the position, typically [longitude, latitude] */
    coordinates: number[];
  };
  /** Elevation of the station in meters */
  elevation: number;
  /** Call letters of the station */
  callLetters: string;
  /** Quality control process identifier */
  qualityControlProcess: string;
  /** Source of the data */
  dataSource: string;
  /** Type of the data record */
  type: string;
  /** Air temperature details */
  airTemperature: {
    /** Temperature value in degrees Celsius */
    value: number;
    /** Quality of the temperature data */
    quality: string;
  };
  /** Dew point details */
  dewPoint: {
    /** Dew point value in degrees Celsius */
    value: number;
    /** Quality of the dew point data */
    quality: string;
  };
  /** Atmospheric pressure details */
  pressure: {
    /** Pressure value in hPa */
    value: number;
    /** Quality of the pressure data */
    quality: string;
  };
  /** Wind details */
  wind: {
    /** Wind direction details */
    direction: {
      /** Wind direction angle in degrees */
      angle: number;
      /** Quality of the wind direction data */
      quality: string;
    };
    /** Type of wind measurement */
    type: string;
    /** Wind speed details */
    speed: {
      /** Wind speed in meters per second */
      rate: number;
      /** Quality of the wind speed data */
      quality: string;
    };
  };
  /** Visibility details */
  visibility: {
    /** Visibility distance details */
    distance: {
      /** Distance value in meters */
      value: number;
      /** Quality of the visibility distance data */
      quality: string;
    };
    /** Variability of the visibility */
    variability: {
      /** Variability value */
      value: string;
      /** Quality of the visibility variability data */
      quality: string;
    };
  };
  /** Sky condition details */
  skyCondition: {
    /** Ceiling height details */
    ceilingHeight: {
      /** Ceiling height value in meters */
      value: number;
      /** Quality of the ceiling height data */
      quality: string;
      /** Determination method of the ceiling height */
      determination: string;
    };
    /** CAVOK (Ceiling and Visibility OK) status */
    cavok: string;
  };
  /** Sections of the data record */
  sections: string[];
  /** Precipitation estimated observation details */
  precipitationEstimatedObservation: {
    /** Discrepancy in the observation */
    discrepancy: string;
    /** Estimated water depth in millimeters */
    estimatedWaterDepth: number;
  };
  /** Past weather observation details (manual) */
  pastWeatherObservationManual: Array<{
    /** Atmospheric condition details */
    atmosphericCondition: {
      /** Atmospheric condition value */
      value: string;
      /** Quality of the atmospheric condition data */
      quality: string;
    };
    /** Observation period details */
    period: {
      /** Period value in hours */
      value: number;
      /** Quality of the period data */
      quality: string;
    };
  }>;
  /** Sky condition observation details */
  skyConditionObservation: {
    /** Total sky coverage details */
    totalCoverage: {
      /** Total coverage value */
      value: string;
      /** Opaque coverage value */
      opaque: string;
      /** Quality of the total coverage data */
      quality: string;
    };
    /** Lowest cloud coverage details */
    lowestCloudCoverage: {
      /** Lowest cloud coverage value */
      value: string;
      /** Quality of the lowest cloud coverage data */
      quality: string;
    };
    /** Low cloud genus details */
    lowCloudGenus: {
      /** Low cloud genus value */
      value: string;
      /** Quality of the low cloud genus data */
      quality: string;
    };
    /** Lowest cloud base height details */
    lowestCloudBaseHeight: {
      /** Lowest cloud base height value in meters */
      value: number;
      /** Quality of the lowest cloud base height data */
      quality: string;
    };
    /** Mid cloud genus details */
    midCloudGenus: {
      /** Mid cloud genus value */
      value: string;
      /** Quality of the mid cloud genus data */
      quality: string;
    };
    /** High cloud genus details */
    highCloudGenus: {
      /** High cloud genus value */
      value: string;
      /** Quality of the high cloud genus data */
      quality: string;
    };
  };
  /** Atmospheric pressure change details */
  atmosphericPressureChange: {
    /** Pressure tendency details */
    tendency: {
      /** Tendency code */
      code: string;
      /** Quality of the tendency data */
      quality: string;
    };
    /** Pressure change quantity over 3 hours */
    quantity3Hours: {
      /** Quantity value in hPa */
      value: number;
      /** Quality of the 3-hour quantity data */
      quality: string;
    };
    /** Pressure change quantity over 24 hours */
    quantity24Hours: {
      /** Quantity value in hPa */
      value: number;
      /** Quality of the 24-hour quantity data */
      quality: string;
    };
  };
  /** Present weather observation details (manual) */
  presentWeatherObservationManual: Array<{
    /** Weather condition description */
    condition: string;
    /** Quality of the weather condition data */
    quality: string;
  }>;
  /** Sea surface temperature details */
  seaSurfaceTemperature: {
    /** Sea surface temperature value in degrees Celsius */
    value: number;
    /** Quality of the sea surface temperature data */
    quality: string;
  };
  /** Wave measurement details */
  waveMeasurement: {
    /** Method of wave measurement */
    method: string;
    /** Wave details */
    waves: {
      /** Wave period in seconds */
      period: number;
      /** Wave height in meters */
      height: number;
      /** Quality of the wave data */
      quality: string;
    };
    /** Sea state details */
    seaState: {
      /** Sea state code */
      code: string;
      /** Quality of the sea state data */
      quality: string;
    };
  };
  /** Hash value for the document, possibly for integrity checks */
  hash: number;
}`,
        examples: [
          {
            _id: {
              $oid: "5553a999e4b02cf71511bb22",
            },
            st: "x+51200-144600",
            ts: {
              $date: "1984-03-08T00:00:00.000Z",
            },
            position: {
              type: "Point",
              coordinates: [-144.6, 51.2],
            },
            elevation: 9999,
            callLetters: "8KBW",
            qualityControlProcess: "V020",
            dataSource: "4",
            type: "FM-13",
            airTemperature: {
              value: 6.5,
              quality: "1",
            },
            dewPoint: {
              value: 6,
              quality: "1",
            },
            pressure: {
              value: 1000,
              quality: "1",
            },
            wind: {
              direction: {
                angle: 80,
                quality: "1",
              },
              type: "N",
              speed: {
                rate: 16.4,
                quality: "1",
              },
            },
            visibility: {
              distance: {
                value: 4000,
                quality: "1",
              },
              variability: {
                value: "N",
                quality: "9",
              },
            },
            skyCondition: {
              ceilingHeight: {
                value: 210,
                quality: "1",
                determination: "C",
              },
              cavok: "N",
            },
            sections: ["AG1", "AY1", "GF1", "...and 5 more items"],
            precipitationEstimatedObservation: {
              discrepancy: "2",
              estimatedWaterDepth: 2,
            },
            pastWeatherObservationManual: [
              {
                atmosphericCondition: "[Object]",
                period: "[Object]",
              },
            ],
            skyConditionObservation: {
              totalCoverage: {
                value: "08",
                opaque: "99",
                quality: "1",
              },
              lowestCloudCoverage: {
                value: "08",
                quality: "1",
              },
              lowCloudGenus: {
                value: "06",
                quality: "1",
              },
              lowestCloudBaseHeight: {
                value: 250,
                quality: "1",
              },
              midCloudGenus: {
                value: "99",
                quality: "9",
              },
              highCloudGenus: {
                value: "99",
                quality: "9",
              },
            },
            atmosphericPressureChange: {
              tendency: {
                code: "7",
                quality: "1",
              },
              quantity3Hours: {
                value: 3.5,
                quality: "1",
              },
              quantity24Hours: {
                value: 99.9,
                quality: "9",
              },
            },
            "...": "4 more keys",
          },
          {
            _id: {
              $oid: "5553a999e4b02cf71511c0c8",
            },
            st: "x+56800-156400",
            ts: {
              $date: "1984-03-08T12:00:00.000Z",
            },
            position: {
              type: "Point",
              coordinates: [-156.4, 56.8],
            },
            elevation: 9999,
            callLetters: "WTDM",
            qualityControlProcess: "V020",
            dataSource: "4",
            type: "FM-13",
            airTemperature: {
              value: 6.8,
              quality: "1",
            },
            dewPoint: {
              value: 999.9,
              quality: "9",
            },
            pressure: {
              value: 1009.2,
              quality: "1",
            },
            wind: {
              direction: {
                angle: 50,
                quality: "1",
              },
              type: "N",
              speed: {
                rate: 13.4,
                quality: "1",
              },
            },
            visibility: {
              distance: {
                value: 20000,
                quality: "1",
              },
              variability: {
                value: "N",
                quality: "9",
              },
            },
            skyCondition: {
              ceilingHeight: {
                value: 3000,
                quality: "1",
                determination: "C",
              },
              cavok: "N",
            },
            sections: ["AG1", "AY1", "GF1", "...and 5 more items"],
            precipitationEstimatedObservation: {
              discrepancy: "2",
              estimatedWaterDepth: 2,
            },
            pastWeatherObservationManual: [
              {
                atmosphericCondition: "[Object]",
                period: "[Object]",
              },
            ],
            skyConditionObservation: {
              totalCoverage: {
                value: "05",
                opaque: "99",
                quality: "1",
              },
              lowestCloudCoverage: {
                value: "03",
                quality: "1",
              },
              lowCloudGenus: {
                value: "03",
                quality: "1",
              },
              lowestCloudBaseHeight: {
                value: 150,
                quality: "1",
              },
              midCloudGenus: {
                value: "07",
                quality: "1",
              },
              highCloudGenus: {
                value: "99",
                quality: "9",
              },
            },
            atmosphericPressureChange: {
              tendency: {
                code: "7",
                quality: "1",
              },
              quantity3Hours: {
                value: 2,
                quality: "1",
              },
              quantity24Hours: {
                value: 99.9,
                quality: "9",
              },
            },
            "...": "4 more keys",
          },
        ],
        indexes: [
          {
            v: 2,
            key: {
              _id: 1,
            },
            name: "_id_",
            description:
              "Index on the _id field, which is the default unique identifier for each document in the collection. This index ensures fast retrieval of documents by their _id and is automatically created by MongoDB.",
          },
        ],
      },
    ],
  },
  sample_supplies: {
    name: "sample_supplies",
    description:
      "The 'sample_supplies' database is designed to manage and analyze sales data for a retail business. It captures detailed information about each sale, including the items sold, customer demographics, store location, and purchase methods. This database is essential for understanding sales trends, customer behavior, and inventory management.",
    latestDate: new Date("2025-03-04T21:40:01.112Z"),
    collections: [
      {
        name: "sales",
        description:
          "The 'sales' collection stores detailed records of each sale transaction. It includes information about the sale date, items purchased, store location, customer demographics, and purchase method. This collection is crucial for analyzing sales performance, customer satisfaction, and the effectiveness of marketing strategies. It also helps in tracking inventory levels and understanding customer preferences.",
        schema: `interface Sales {
  /**
   * Unique identifier for the sale.
   */
  _id: ObjectId;
  /**
   * Date and time when the sale was made.
   */
  saleDate: Date;
  /**
   * List of items included in the sale.
   */
  items: Array<{
    /**
     * Name of the item.
     */
    name: string;
    /**
     * Tags associated with the item, useful for categorization.
     */
    tags: string[];
    /**
     * Price of the item.
     */
    price: Decimal128;
    /**
     * Quantity of the item sold.
     */
    quantity: number;
  }>;
  /**
   * Location of the store where the sale was made.
   */
  storeLocation: string;
  /**
   * Information about the customer who made the purchase.
   */
  customer: {
    /**
     * Gender of the customer.
     */
    gender: string;
    /**
     * Age of the customer.
     */
    age: number;
    /**
     * Email address of the customer.
     */
    email: string;
    /**
     * Customer's satisfaction rating for the purchase.
     */
    satisfaction: number;
  };
  /**
   * Indicates whether a coupon was used in the sale.
   */
  couponUsed: boolean;
  /**
   * Method used to make the purchase, e.g., online or in-store.
   */
  purchaseMethod: string;
  /**
   * Hash value for the sale, possibly used for data integrity or quick lookup.
   */
  hash: Long;
}`,
        examples: [
          {
            _id: {
              $oid: "5bd761ddae323e45a93cd590",
            },
            saleDate: {
              $date: "2016-01-03T07:18:22.644Z",
            },
            items: [
              {
                name: "pens",
                tags: ["writing", "office", "school", "...and 1 more items"],
                price: "[Object]",
                quantity: 3,
              },
              {
                name: "laptop",
                tags: ["electronics", "school", "office"],
                price: "[Object]",
                quantity: 3,
              },
              {
                name: "notepad",
                tags: ["office", "writing", "school"],
                price: "[Object]",
                quantity: 2,
              },
              "...and 5 more items",
            ],
            storeLocation: "Denver",
            customer: {
              gender: "M",
              age: 57,
              email: "ce@jucvavih.tj",
              satisfaction: 5,
            },
            couponUsed: true,
            purchaseMethod: "In store",
            hash: {
              low: 1821832792,
              high: -2146986034,
              unsigned: false,
            },
          },
          {
            _id: {
              $oid: "5bd761deae323e45a93ce064",
            },
            saleDate: {
              $date: "2017-08-24T08:56:18.079Z",
            },
            items: [
              {
                name: "binder",
                tags: ["school", "general", "organization"],
                price: "[Object]",
                quantity: 1,
              },
              {
                name: "envelopes",
                tags: ["stationary", "office", "general"],
                price: "[Object]",
                quantity: 6,
              },
              {
                name: "envelopes",
                tags: ["stationary", "office", "general"],
                price: "[Object]",
                quantity: 1,
              },
              "...and 7 more items",
            ],
            storeLocation: "Austin",
            customer: {
              gender: "M",
              age: 45,
              email: "huecu@huffadce.ky",
              satisfaction: 1,
            },
            couponUsed: false,
            purchaseMethod: "In store",
            hash: {
              low: 1867217522,
              high: -2143180348,
              unsigned: false,
            },
          },
        ],
        indexes: [
          {
            v: 2,
            key: {
              _id: 1,
            },
            name: "_id_",
            description:
              "Index on the _id field, which ensures each document has a unique identifier and allows for efficient lookups by _id.",
          },
        ],
      },
    ],
  },
  sample_analytics: {
    name: "sample_analytics",
    description:
      "The 'sample_analytics' database is designed to manage and analyze customer financial data, focusing on customer profiles, their financial accounts, and transaction histories. It supports financial services by providing detailed insights into customer activities, account management, and transaction tracking.",
    latestDate: arbitraryLatestDate,
    collections: [
      {
        name: "customers",
        description:
          "The 'customers' collection stores personal and account-related information about users, including their name, address, birthdate, email, and associated financial accounts. It also includes details about their membership tiers and benefits, which are crucial for understanding customer segmentation and service personalization.",
        schema: `interface Customer {
  /** Unique identifier for the customer */
  _id: ObjectId;
  /** Username of the customer */
  username: string;
  /** Full name of the customer */
  name: string;
  /** Address of the customer */
  address: string;
  /** Birthdate of the customer */
  birthdate: Date;
  /** Email address of the customer */
  email: string;
  /** List of account numbers associated with the customer */
  accounts: number[];
  /** Details of the customer's membership tiers and benefits */
  tier_and_details: {
    [key: string]: {
      /** Tier level of the membership */
      tier: string;
      /** Benefits associated with the tier */
      benefits: string[];
      /** Indicates if the membership is active */
      active: boolean;
      /** Unique identifier for the tier */
      id: string;
    };
  };
  /** Hash value for internal use, possibly for data integrity or versioning */
  hash: Long;
}`,
        examples: [
          {
            _id: {
              $oid: "5ca4bbcea2dd94ee58162b52",
            },
            username: "rhonda93",
            name: "Shannon Bonilla",
            address: "964 Vazquez Extensions Apt. 579\nCruzside, OH 67037",
            birthdate: {
              $date: "1988-11-27T22:53:50.000Z",
            },
            email: "braunelizabeth@hotmail.com",
            accounts: [934308, 103062],
            tier_and_details: {
              d1b48391a5244e898d44f785ddaab956: {
                tier: "Platinum",
                benefits: ["travel insurance"],
                active: true,
                id: "d1b48391a5244e898d44f785ddaab956",
              },
              b56e1a4782b248e6b704d12206b56f95: {
                tier: "Silver",
                benefits: ["airline lounge access"],
                active: true,
                id: "b56e1a4782b248e6b704d12206b56f95",
              },
              "4656ca6cf342445dbc024429fe6fef64": {
                tier: "Gold",
                benefits: ["travel insurance", "financial planning assistance"],
                active: true,
                id: "4656ca6cf342445dbc024429fe6fef64",
              },
            },
            hash: {
              low: 1210936438,
              high: -2141661999,
              unsigned: false,
            },
          },
          {
            _id: {
              $oid: "5ca4bbcea2dd94ee58162b86",
            },
            username: "briannamercado",
            name: "Summer Cunningham",
            address: "6855 Bailey Bypass Suite 417\nNew Cynthiaview, ID 14820",
            birthdate: {
              $date: "1972-08-03T23:24:30.000Z",
            },
            email: "patriciasmith@hotmail.com",
            accounts: [177869, 253017],
            tier_and_details: {},
            hash: {
              low: -2046932827,
              high: -2141413743,
              unsigned: false,
            },
          },
        ],
        indexes: [
          {
            v: 2,
            key: {
              _id: 1,
            },
            name: "_id_",
            description:
              "Index on the _id field to ensure each document has a unique identifier and to optimize queries that retrieve documents by their _id. This is a default index created by MongoDB.",
          },
        ],
      },
      {
        name: "transactions",
        description:
          "The 'accounts' collection contains information about financial accounts, including account IDs, credit limits, and the types of financial products associated with each account. This collection is essential for managing customer accounts and linking them to their respective transactions.",
        schema: `interface Transaction {
  /**
   * Unique identifier for the transaction document.
   */
  _id: ObjectId;
  /**
   * Identifier for the account associated with the transactions.
   */
  account_id: number;
  /**
   * Total number of transactions in the document.
   */
  transaction_count: number;
  /**
   * Start date for the transaction bucket.
   */
  bucket_start_date: Date;
  /**
   * End date for the transaction bucket.
   */
  bucket_end_date: Date;
  /**
   * Array of transaction details.
   */
  transactions: {
    /**
     * Date of the transaction.
     */
    date: Date;
    /**
     * Amount involved in the transaction.
     */
    amount: number;
    /**
     * Code representing the type of transaction (e.g., buy, sell).
     */
    transaction_code: string;
    /**
     * Symbol of the stock or asset involved in the transaction.
     */
    symbol: string;
    /**
     * Price per unit of the asset at the time of transaction.
     */
    price: string;
    /**
     * Total value of the transaction.
     */
    total: string;
  }[];
  /**
   * Hash value for the transaction document, possibly used for integrity checks.
   */
  hash: Long;
}`,
        examples: [
          {
            _id: {
              $oid: "5ca4bbc1a2dd94ee58161f20",
            },
            account_id: 668857,
            transaction_count: 4,
            bucket_start_date: {
              $date: "2013-11-11T00:00:00.000Z",
            },
            bucket_end_date: {
              $date: "2017-01-05T00:00:00.000Z",
            },
            transactions: [
              {
                date: {
                  $date: "2014-02-12T00:00:00.000Z",
                },
                amount: 1666,
                transaction_code: "buy",
                symbol: "ebay",
                price: "22.79595976508900179169359034858644008636474609375",
                total: "37978.06896863827698496152152",
              },
              {
                date: {
                  $date: "2016-03-24T00:00:00.000Z",
                },
                amount: 256,
                transaction_code: "sell",
                symbol: "znga",
                price: "2.1803357869993948980891218525357544422149658203125",
                total: "558.1659614718450939108151942",
              },
              {
                date: {
                  $date: "2016-11-15T00:00:00.000Z",
                },
                amount: 112,
                transaction_code: "buy",
                symbol: "ebay",
                price: "28.04653920093861785289846011437475681304931640625",
                total: "3141.212390505125199524627533",
              },
              "...and 1 more items",
            ],
            hash: {
              low: 1320643258,
              high: -2143359422,
              unsigned: false,
            },
          },
          {
            _id: {
              $oid: "5ca4bbc1a2dd94ee58162271",
            },
            account_id: 135875,
            transaction_count: 41,
            bucket_start_date: {
              $date: {
                $numberLong: "-26697600000",
              },
            },
            bucket_end_date: {
              $date: "2016-10-09T00:00:00.000Z",
            },
            transactions: [
              {
                date: {
                  $date: "2004-07-07T00:00:00.000Z",
                },
                amount: 7991,
                transaction_code: "buy",
                symbol: "adbe",
                price: "22.63371588543464696385854040272533893585205078125",
                total: "180866.0236405082638881935964",
              },
              {
                date: {
                  $date: "2016-02-10T00:00:00.000Z",
                },
                amount: 1844,
                transaction_code: "sell",
                symbol: "aapl",
                price: "91.3500969192104292915246332995593547821044921875",
                total: "168449.5787190240316135714238",
              },
              {
                date: {
                  $date: "2014-04-10T00:00:00.000Z",
                },
                amount: 2763,
                transaction_code: "sell",
                symbol: "sap",
                price: "76.1910100009028354861584375612437725067138671875",
                total: "210515.7606324945344482557630",
              },
              "...and 38 more items",
            ],
            hash: {
              low: -110420247,
              high: -2139665468,
              unsigned: false,
            },
          },
        ],
        indexes: [
          {
            v: 2,
            key: {
              _id: 1,
            },
            name: "_id_",
            description:
              "Index on the _id field to ensure each document has a unique identifier and to optimize queries that retrieve documents by their _id. This is a default index created by MongoDB.",
          },
        ],
      },
      {
        name: "accounts",
        description:
          "The 'transactions' collection records detailed transaction histories for each account, including transaction dates, amounts, codes, and financial symbols. This collection is vital for tracking financial activities and analyzing transaction patterns over time.",
        schema: `interface Accounts {
  /**
   * Unique identifier for the account document.
   */
  _id: ObjectId;
  /**
   * Numeric identifier for the account.
   */
  account_id: number;
  /**
   * Credit limit or maximum allowable balance for the account.
   */
  limit: number;
  /**
   * List of products associated with the account, such as investment funds or stocks.
   */
  products: string[];
  /**
   * Hash value for internal use, possibly for data integrity or versioning.
   */
  hash: Long;
}`,
        examples: [
          {
            _id: {
              $oid: "5ca4bbc7a2dd94ee581629cf",
            },
            account_id: 892096,
            limit: 10000,
            products: ["InvestmentFund", "Brokerage", "InvestmentStock"],
            hash: {
              low: 1372079182,
              high: -2146448793,
              unsigned: false,
            },
          },
          {
            _id: {
              $oid: "5ca4bbc7a2dd94ee5816283e",
            },
            account_id: 779716,
            limit: 10000,
            products: ["InvestmentFund", "InvestmentStock"],
            hash: {
              low: -963071305,
              high: -2145232282,
              unsigned: false,
            },
          },
        ],
        indexes: [
          {
            v: 2,
            key: {
              _id: 1,
            },
            name: "_id_",
            description:
              "Index on the _id field to ensure each document has a unique identifier and to optimize queries that retrieve documents by their _id. This is a default index created by MongoDB.",
          },
        ],
      },
    ],
  },
  sample_geospatial: {
    name: "sample_geospatial",
    description:
      "The 'sample_geospatial' database is designed to store and manage geospatial data related to shipwrecks. It provides detailed information about various shipwrecks, including their location, type, and historical context. The database is optimized for geospatial queries, allowing users to efficiently search and analyze shipwreck data based on geographic coordinates.",
    latestDate: arbitraryLatestDate,
    collections: [
      {
        name: "shipwrecks",
        description:
          "The 'shipwrecks' collection stores detailed information about shipwrecks, including their geographic location, type, and historical details. Each document in the collection represents a specific shipwreck, identified by its unique ID. Key fields include 'feature_type' for the type of wreck, 'coordinates' for geospatial data, and 'history' for historical context. The collection is crucial for geospatial analysis, with a 2dsphere index on the 'coordinates' field to support efficient geospatial queries. This collection serves as the primary data source for understanding and analyzing shipwrecks within the database.",
        schema: `interface Shipwrecks {
  /**
   * Unique identifier for each shipwreck document
   */
  _id: ObjectId;
  /**
   * Record identifier or description
   */
  recrd: string;
  /**
   * Terms related to the vessel
   */
  vesslterms: string;
  /**
   * Type of feature, e.g., 'Wrecks - Submerged, dangerous'
   */
  feature_type: string;
  /**
   * Chart information, possibly indicating the source or reference
   */
  chart: string;
  /**
   * Latitude in decimal degrees
   */
  latdec: number;
  /**
   * Longitude in decimal degrees
   */
  londec: number;
  /**
   * Quality of the GPS data
   */
  gp_quality: string;
  /**
   * Depth of the wreck
   */
  depth: number;
  /**
   * Type of sounding used to determine depth
   */
  sounding_type: string;
  /**
   * Historical information about the wreck
   */
  history: string;
  /**
   * Qualitative sounding information
   */
  quasou: string;
  /**
   * Water level information, e.g., 'always under water/submerged'
   */
  watlev: string;
  /**
   * Geospatial coordinates [longitude, latitude]
   */
  coordinates: number[];
  /**
   * Hash value for the document, possibly for integrity or indexing
   */
  hash: Long;
}`,
        examples: [
          {
            _id: {
              $oid: "578f6fa3df35c7fbdbaf0030",
            },
            recrd: "",
            vesslterms: "",
            feature_type: "Wrecks - Submerged, dangerous",
            chart: "US,US,graph,Chart 14909",
            latdec: 45.4831299,
            londec: -86.6652573,
            gp_quality: "",
            depth: 0,
            sounding_type: "",
            history: "reported 1995",
            quasou: "",
            watlev: "always under water/submerged",
            coordinates: [-86.6652573, 45.4831299],
            hash: {
              low: -2107336865,
              high: -2147333520,
              unsigned: false,
            },
          },
          {
            _id: {
              $oid: "578f6fa3df35c7fbdbaede5b",
            },
            recrd: "",
            vesslterms: "",
            feature_type: "Wrecks - Visible",
            chart: "US,US,reprt,L-589/05",
            latdec: 28.1433333,
            londec: -80.6035,
            gp_quality: "",
            depth: 0,
            sounding_type: "",
            history: "",
            quasou: "",
            watlev: "covers and uncovers",
            coordinates: [-80.6035, 28.1433333],
            hash: {
              low: -1616173260,
              high: -2147184469,
              unsigned: false,
            },
          },
        ],
        indexes: [
          {
            v: 2,
            key: {
              _id: 1,
            },
            name: "_id_",
            description:
              "Index on the '_id' field, providing efficient access to documents by their unique identifier.",
          },
          {
            v: 2,
            key: {
              coordinates: "2dsphere",
            },
            name: "coordinates_2dsphere",
            background: true,
            "2dsphereIndexVersion": 3,
            description:
              "2dsphere index on the 'coordinates' field, enabling geospatial queries. Useful for finding shipwrecks within a certain area or radius.",
          },
        ],
      },
    ],
  },
  sample_guides: {
    name: "sample_guides",
    description:
      "The 'sample_guides' database is designed to store and manage information about planets in our solar system. It provides detailed data on each planet's characteristics, such as its position relative to the sun, atmospheric composition, surface temperature, and other unique identifiers. This database is likely used for educational purposes, research, or as a reference for applications related to astronomy or space exploration.",
    latestDate: arbitraryLatestDate,
    collections: [
      {
        name: "planets",
        description:
          "The 'planets' collection stores detailed information about each planet in the solar system. It includes data such as the planet's name, its order from the sun, whether it has rings, its main atmospheric components, and surface temperature details. This collection serves as the core of the database, providing essential data for any analysis or application that requires planetary information. The collection is indexed by the unique identifier '_id', ensuring efficient data retrieval.",
        schema: `interface Planet {
  /**
   * Unique identifier for the planet document.
   */
  _id: ObjectId;
  /**
   * The name of the planet.
   */
  name: string;
  /**
   * The order of the planet from the Sun.
   */
  orderFromSun: number;
  /**
   * Indicates whether the planet has rings.
   */
  hasRings: boolean;
  /**
   * The main atmospheric components of the planet.
   */
  mainAtmosphere: string[];
  /**
   * The surface temperature of the planet in degrees Celsius.
   */
  surfaceTemperatureC: {
    /**
     * Minimum recorded surface temperature, can be null if unknown.
     */
    min: number | null;
    /**
     * Maximum recorded surface temperature, can be null if unknown.
     */
    max: number | null;
    /**
     * Mean surface temperature.
     */
    mean: number;
  };
  /**
   * A hash value for the planet document, used for internal purposes.
   */
  hash: Long;
}`,
        examples: [
          {
            _id: {
              $oid: "621ff30d2a3e781873fcb661",
            },
            name: "Earth",
            orderFromSun: 3,
            hasRings: false,
            mainAtmosphere: ["N", "O2", "Ar"],
            surfaceTemperatureC: {
              min: -89.2,
              max: 56.7,
              mean: 14,
            },
            hash: {
              low: 375362087,
              high: -1898024070,
              unsigned: false,
            },
          },
          {
            _id: {
              $oid: "621ff30d2a3e781873fcb662",
            },
            name: "Venus",
            orderFromSun: 2,
            hasRings: false,
            mainAtmosphere: ["CO2", "N"],
            surfaceTemperatureC: {
              min: null,
              max: null,
              mean: 464,
            },
            hash: {
              low: -547252065,
              high: -1117723852,
              unsigned: false,
            },
          },
        ],
        indexes: [
          {
            v: 2,
            key: {
              _id: 1,
            },
            name: "_id_",
            description:
              "Index on the _id field to ensure each document has a unique identifier and to optimize queries that retrieve documents by their _id.",
          },
        ],
      },
    ],
  },
  sample_restaurants: {
    name: "sample_restaurants",
    description:
      "The 'sample_restaurants' database is designed to store and manage information about restaurants and their geographical locations within various neighborhoods. It serves as a resource for analyzing restaurant data, including their addresses, cuisines, health inspection grades, and their spatial relationship to neighborhoods.",
    latestDate: arbitraryLatestDate,
    collections: [
      {
        name: "restaurants",
        description:
          "The 'neighborhoods' collection stores geographical data about different neighborhoods, including their names and spatial boundaries defined by coordinates. This collection is fundamental for spatial queries and understanding the geographical context of restaurants.",
        schema:
          "interface Restaurant {\n  _id: ObjectId; // Unique identifier for the restaurant document\n  address: {\n    building: string; // Building number of the restaurant's address\n    coord: number[]; // Coordinates (longitude, latitude) of the restaurant's location\n    street: string; // Street name of the restaurant's address\n    zipcode: string; // Zip code of the restaurant's address\n  };\n  borough: string; // Borough where the restaurant is located\n  cuisine: string; // Type of cuisine the restaurant serves\n  grades: {\n    date: Date; // Date when the grade was given\n    grade: string; // Grade received by the restaurant\n    score: number; // Score associated with the grade\n  }[]; // Array of grades received by the restaurant\n  name: string; // Name of the restaurant\n  restaurant_id: string; // Unique identifier for the restaurant\n  hash: Long; // Hash value for internal use or indexing\n}",
        examples: [
          {
            _id: {
              $oid: "5eb3d669b31de5d588f451d5",
            },
            address: {
              building: "4942",
              coord: [-73.920869, 40.8676319],
              street: "Broadway",
              zipcode: "10034",
            },
            borough: "Manhattan",
            cuisine: "Pizza",
            grades: [
              {
                date: {
                  $date: "2014-12-31T00:00:00.000Z",
                },
                grade: "A",
                score: 9,
              },
              {
                date: {
                  $date: "2014-05-22T00:00:00.000Z",
                },
                grade: "B",
                score: 19,
              },
              {
                date: {
                  $date: "2013-10-22T00:00:00.000Z",
                },
                grade: "A",
                score: 11,
              },
              "...and 2 more items",
            ],
            name: "Pizza Haven",
            restaurant_id: "41436770",
            hash: {
              low: 2016587041,
              high: -2147119159,
              unsigned: false,
            },
          },
          {
            _id: {
              $oid: "5eb3d668b31de5d588f4482d",
            },
            address: {
              building: "96-38",
              coord: [-73.8664015, 40.7425916],
              street: "Corona Avenue",
              zipcode: "11368",
            },
            borough: "Queens",
            cuisine:
              "Latin (Cuban, Dominican, Puerto Rican, South & Central American)",
            grades: [
              {
                date: {
                  $date: "2014-06-11T00:00:00.000Z",
                },
                grade: "A",
                score: 8,
              },
              {
                date: {
                  $date: "2014-01-09T00:00:00.000Z",
                },
                grade: "C",
                score: 33,
              },
              {
                date: {
                  $date: "2013-06-11T00:00:00.000Z",
                },
                grade: "A",
                score: 12,
              },
              "...and 2 more items",
            ],
            name: "Amanecer Latino Restaurant",
            restaurant_id: "41300619",
            hash: {
              low: -1513286962,
              high: -2147083981,
              unsigned: false,
            },
          },
        ],
        indexes: [
          {
            v: 2,
            key: {
              _id: 1,
            },
            name: "_id_",
            description:
              "Index on the '_id' field, which ensures each document has a unique identifier and allows for efficient lookups by '_id'.",
          },
        ],
      },
      {
        name: "neighborhoods",
        description:
          "The 'restaurants' collection contains detailed information about individual restaurants, such as their names, addresses, types of cuisine, and health inspection grades. It plays a central role in the database by providing the primary data about restaurants, which can be analyzed in conjunction with neighborhood data to gain insights into restaurant distribution and performance across different areas.",
        schema: `interface Neighborhood {
  _id: ObjectId; // Unique identifier for each neighborhood document
  geometry: {
    coordinates: number[][][]; // Array of coordinates defining the neighborhood's boundaries, can be a Polygon or MultiPolygon
    type: string; // Type of geometry, typically 'Polygon' or 'MultiPolygon'
  };
  name: string; // Name of the neighborhood
  hash: Long; // Hash value for the neighborhood, possibly used for quick comparisons or indexing
}`,
        examples: [
          {
            _id: {
              $oid: "55cb9c666c522cafdb053a4e",
            },
            geometry: {
              coordinates: [
                [
                  [-73.9838238729819, 40.7214728720669],
                  [-73.98386422812362, 40.72139637813688],
                  [-73.9844773170908, 40.72023423864921],
                  "...and 175 more items",
                ],
              ],
              type: "Polygon",
            },
            name: "Chinatown",
            hash: {
              low: -1904453250,
              high: -2143562068,
              unsigned: false,
            },
          },
          {
            _id: {
              $oid: "55cb9c666c522cafdb053abc",
            },
            geometry: {
              coordinates: [
                [
                  [
                    [-73.85442575253663, 40.748851726884496],
                    [-73.85436928066459, 40.748738930190946],
                    [-73.85405453298718, 40.748158316947894],
                    "...and 79 more items",
                  ],
                ],
                [
                  [
                    [-73.85442575253663, 40.748851726884496],
                    [-73.85447011824273, 40.74893934813926],
                    [-73.85479286709332, 40.74956323075504],
                    "...and 24 more items",
                  ],
                ],
              ],
              type: "MultiPolygon",
            },
            name: "Corona",
            hash: {
              low: -1310768943,
              high: -2139114899,
              unsigned: false,
            },
          },
        ],
        indexes: [
          {
            v: 2,
            key: {
              _id: 1,
            },
            name: "_id_",
            description:
              "Index on the '_id' field, which ensures each document has a unique identifier and allows for efficient lookups by '_id'.",
          },
        ],
      },
    ],
  },
} as const satisfies Record<string, DatabaseInfo>;
