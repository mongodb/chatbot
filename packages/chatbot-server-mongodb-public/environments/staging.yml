service:
  targetPort: 3000

env:
  PORT: 3000
  MONGODB_DATABASE_NAME: docs-chatbot-staging
  VECTOR_SEARCH_INDEX_NAME: vector_index
  OPENAI_CHAT_COMPLETION_MODEL_VERSION: 2023-06-01-preview
  ALLOWED_ORIGINS: https://knowledge.staging.corp.mongodb.com,https://docs-mongodborg-staging.corp.mongodb.com,https://mongodbcom-cdn.website.staging.corp.mongodb.com,https://docs-mongodb-org-stg.s3.us-east-2.amazonaws.com,https://learn-staging.mongodb.com,https://mongodbcom-cdn.staging.corp.mongodb.com,https://devcenter-chatbot.devrel.staging.corp.mongodb.com
  NODE_ENV: staging
  OPENAI_PREPROCESSOR_CHAT_COMPLETION_DEPLOYMENT: gpt-4o-mini
  OPENAI_API_VERSION: "2024-06-01"
  OPENAI_CHAT_COMPLETION_DEPLOYMENT: gpt-4o
  OPENAI_EMBEDDING_DEPLOYMENT: docs-chatbot-embedding-ada-002

envSecrets:
  MONGODB_CONNECTION_URI: docs-chatbot-staging
  OPENAI_ENDPOINT: docs-chatbot-staging
  OPENAI_API_KEY: docs-chatbot-staging

ingress:
  enabled: true
  hosts:
    - chat-server.docs.staging.corp.mongodb.com

# Pod resources
replicaCount: 2
resources:
  limits:
    memory: 1Gi
    cpu: 1
  requests:
    memory: 500Mi
    cpu: 500m
autoscaling:
  apiVersion: autoscaling/v2
  minReplicas: 1
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 0 # scaleUp immediately if conditions met
      policies:
        # 100% of the currently running replicas may at most be added every 60s
        - type: Percent
          value: 100
          periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 60 # to prevent flapping, scale down after 60s
      policies:
        # At most 1 pod can be removed every 60s
        - type: Pods
          value: 1
          periodSeconds: 60

# Health checks
probes:
  enabled: true
  path: /health
  headers: {}
  liveness:
    initialDelaySeconds: 30
    periodSeconds: 15
    timeoutSeconds: 2
    successThreshold: 1
    failureThreshold: 3
  readiness:
    initialDelaySeconds: 30
    periodSeconds: 15
    timeoutSeconds: 2
    successThreshold: 1
    failureThreshold: 3

# Alerts
defaultAlerts:
  enabled: true
  email: "chatbot-alerts@mongodb.com"

prometheusRules:
  - alert: TooManyHttpInternalServerErrors
    # (Total 500 Requests / Total Requests) > X%
    expr: ( sum(rate(http_requests_total{namespace="docs",container="docs-chat",code="500"}[1m])) / sum(rate(requests_total{namespace="docs",container="docs-chat"}[1m])) ) * 100 > 2
    for: 5m
    labels:
      severity: critical
      email: chatbot-alerts@mongodb.com
    annotations:
      summary: High HTTP 500 Error rate on {$labels.job}
      description: Too many HTTP 500 Errors on {$labels.job} in the last 5 minutes
