{
  "input": {
    "url": "https://mongodb.com/docs/manual/tutorial/insert-documents/",
    "text": "# Insert Documents\n\n➤➤ Use the **Select your language** drop-down menu in the upper-right to set the language of the following examples or select MongoDB Compass.\n\nThis page provides examples of insert operations in MongoDB.\n\nYou can insert documents in MongoDB by using the following methods:\n\nInsert Documents in the MongoDB Atlas UI- Your programming language's driver.\n\n- The MongoDB Atlas UI. To learn more, see Insert Documents in the MongoDB Atlas UI.\n\n- MongoDB Compass.\n\nIf the collection does not currently exist, insert operations will create the collection.\n\n## Insert Documents in the MongoDB Atlas UI\n\nTo insert a document in the MongoDB Atlas UI, complete the following steps. To learn more about working with documents in the MongoDB Atlas UI, see Create, View, Update, and Delete Documents.\n\n### In the MongoDB Atlas UI, go to the Clusters page for your project.\n\n- If it is not already displayed, select the organization that contains your desired project from the  Organizations menu in the navigation bar.\n\n- If it is not already displayed, select your project from the Projects menu in the navigation bar.\n\n- If the Clusters page is not already displayed, click Database in the sidebar.\n\n  The Clusters page displays.\n\n### Navigate to the collection\n\n- For the cluster to which you want to add documents, click Browse Collections.\n\n- In the left navigation pane, select the database.\n\n- In the left navigation pane, select the collection.\n\n### Add the documents\n\n- Click Insert Document.\n\n- Click the {} icon, which opens the JSON view.\n\n- Paste the document array into the text entry field. For example, the following entry creates four documents, each of which contain three fields:\n\n  ```\n  [\n     { \"prodId\": 100, \"price\": 20, \"quantity\": 125 },\n     { \"prodId\": 101, \"price\": 10, \"quantity\": 234 },\n     { \"prodId\": 102, \"price\": 15, \"quantity\": 432 },\n     { \"prodId\": 103, \"price\": 17, \"quantity\": 320 }\n  ]\n  ```\n\n### Click Insert.\n\nMongoDB Atlas adds the documents to the collection.\n\n## Insert a Single Document\n\n<Tabs>\n\n<Tab name=\"MongoDB Shell\">\n\n`db.collection.insertOne()` inserts a *single*\ndocument into a collection.\n\nThe following example inserts a new document into the `inventory` collection. If the document does not specify an `_id` field, MongoDB adds the `_id` field with an ObjectId value to the new document. See Insert Behavior.\n\n</Tab>\n\n<Tab name=\"Compass\">\n\nTo insert a single document using MongoDB Compass:\n\n1. Navigate to the collection you wish to insert the document into:\n\n   - In the left-hand MongoDB Compass navigation pane, click the database to which your target collection belongs.\n\n   - From the database view, click the target collection name.\n\n2. Click the Insert Document button:\n\n3. For each field in the document, select the field type and fill in the field name and value. Add fields by clicking the last line number, then clicking Add Field After ...\n\n   - For `Object` types, add nested fields by clicking the last field's number and selecting Add Field After ...\n\n   - For `Array` types, add additional elements to the array by clicking the last element's line number and selecting Add Array Element After ...\n\n4. Once all fields have been filled out, click Insert.\n\nThe following example inserts a new document into the `test.inventory` collection:\n\n</Tab>\n\n<Tab name=\"C\">\n\nThe following example inserts a new document into the `inventory` collection. If the document does not specify an `_id` field, the C driver adds the `_id` field with an ObjectId value to the new document. For more information, see Insert Behavior.\n\n</Tab>\n\n<Tab name=\"C#\">\n\nIMongoCollection.InsertOne() inserts a *single* document into a collection.\n\nThe following example inserts a new document into the `inventory` collection. If the document does not specify an `_id` field, the C# driver adds the `_id` field with an ObjectId value to the new document. See Insert Behavior.\n\n</Tab>\n\n<Tab name=\"Go\">\n\nCollection.InsertOne inserts a *single* document into a collection.\n\nThe following example inserts a new document into the `inventory` collection. If the document does not specify an `_id` field, the driver adds the `_id` field with an ObjectId value to the new document. See Insert Behavior.\n\n</Tab>\n\n<Tab name=\"Java (Async)\">\n\ncom.mongodb.reactivestreams.client.MongoCollection.insertOne inserts a *single* document into a collection with the Java Reactive Streams Driver:\n\n```json\n{ item: \"canvas\", qty: 100, tags: [\"cotton\"], size: { h: 28, w: 35.5, uom: \"cm\" } }\n```\n\nThe following example inserts the document above into the `inventory` collection. If the document does not specify an `_id` field, the driver adds the `_id` field with an ObjectId value to the new document. See Insert Behavior.\n\n</Tab>\n\n<Tab name=\"Java (Sync)\">\n\ncom.mongodb.client.MongoCollection.insertOne inserts a *single* document into a collection.\n\nThe following example inserts a new document into the `inventory` collection. If the document does not specify an `_id` field, the driver adds the `_id` field with an ObjectId value to the new document. See Insert Behavior.\n\n</Tab>\n\n<Tab name=\"Kotlin (Coroutine)\">\n\nMongoCollection.insertOne inserts a *single* document into a collection.\n\nThe following example inserts a new document into the `inventory` collection. If the document does not specify an `_id` field, the driver adds the `_id` field with an ObjectId value to the new document. See Insert Behavior.\n\n</Tab>\n\n<Tab name=\"Motor\">\n\n`motor.motor_asyncio.AsyncIOMotorCollection.insert_one` inserts a *single* document into a collection.\n\nThe following example inserts a new document into the `inventory` collection. If the document does not specify an `_id` field, the Motor driver adds the `_id` field with an ObjectId value to the new document. See Insert Behavior.\n\n</Tab>\n\n<Tab name=\"Node.js\">\n\nCollection.insertOne() inserts a *single* document into a collection.\n\nThe following example inserts a new document into the `inventory` collection. If the document does not specify an `_id` field, the Node.js driver adds the `_id` field with an ObjectId value to the new document. See Insert Behavior.\n\n</Tab>\n\n<Tab name=\"Perl\">\n\nMongoDB::Collection::insert_one() inserts a *single* document into a collection.\n\nThe following example inserts a new document into the `inventory` collection. If the document does not specify an `_id` field, the Perl driver adds the `_id` field with an ObjectId value to the new document. See Insert Behavior.\n\n</Tab>\n\n<Tab name=\"PHP\">\n\n`MongoDB\\\\Collection::insertOne()` inserts a *single* document into a collection.\n\nThe following example inserts a new document into the `inventory` collection. If the document does not specify an `_id` field, the PHP driver adds the `_id` field with an ObjectId value to the new document. See Insert Behavior.\n\n</Tab>\n\n<Tab name=\"Python\">\n\n`pymongo.collection.Collection.insert_one` inserts a *single* document into a collection.\n\nThe following example inserts a new document into the `inventory` collection. If the document does not specify an `_id` field, the PyMongo driver adds the `_id` field with an ObjectId value to the new document. See Insert Behavior.\n\n</Tab>\n\n<Tab name=\"Ruby\">\n\nMongo::Collection#insert_one() inserts a *single* document into a collection.\n\nThe following example inserts a new document into the `inventory` collection. If the document does not specify an `_id` field, the Ruby driver adds the `_id` field with an ObjectId value to the new document. See Insert Behavior.\n\n</Tab>\n\n<Tab name=\"Scala\">\n\ncollection.insertOne() inserts a *single* document into a collection.\n\nThe following example inserts a new document into the `inventory` collection. If the document does not specify an `_id` field, the Scala driver adds the `_id` field with an ObjectId value to the new document. See Insert Behavior.\n\n</Tab>\n\n</Tabs>\n\n<Tabs>\n\n<Tab name=\"MongoDB Shell\">\n\n```javascript\ndb.inventory.insertOne(\n   { item: \"canvas\", qty: 100, tags: [\"cotton\"], size: { h: 28, w: 35.5, uom: \"cm\" } }\n)\n```\n\n</Tab>\n\n<Tab name=\"Compass\">\n\n</Tab>\n\n<Tab name=\"C\">\n\n```c\nmongoc_collection_t *collection;\nbson_t *doc;\nbool r;\nbson_error_t error;\n\ncollection = mongoc_database_get_collection (db, \"inventory\");\ndoc = BCON_NEW (\n   \"item\", BCON_UTF8 (\"canvas\"),\n   \"qty\", BCON_INT64 (100),\n   \"tags\", \"[\",\n   BCON_UTF8 (\"cotton\"),\n   \"]\",\n   \"size\", \"{\",\n   \"h\", BCON_DOUBLE (28),\n   \"w\", BCON_DOUBLE (35.5),\n   \"uom\", BCON_UTF8 (\"cm\"),\n   \"}\");\n\nr = mongoc_collection_insert_one (collection, doc, NULL, NULL, &error);\nbson_destroy (doc);\n\nif (!r) {\n   MONGOC_ERROR (\"%s\\n\", error.message);\n   goto done;\n}\n```\n\n</Tab>\n\n<Tab name=\"C#\">\n\n```csharp\nvar document = new BsonDocument\n{\n    { \"item\", \"canvas\" },\n    { \"qty\", 100 },\n    { \"tags\", new BsonArray { \"cotton\" } },\n    { \"size\", new BsonDocument { { \"h\", 28 }, { \"w\", 35.5 }, { \"uom\", \"cm\" } } }\n};\ncollection.InsertOne(document);\n```\n\n</Tab>\n\n<Tab name=\"Go\">\n\n```go\n\nresult, err := coll.InsertOne(\n\tcontext.TODO(),\n\tbson.D{\n\t\t{\"item\", \"canvas\"},\n\t\t{\"qty\", 100},\n\t\t{\"tags\", bson.A{\"cotton\"}},\n\t\t{\"size\", bson.D{\n\t\t\t{\"h\", 28},\n\t\t\t{\"w\", 35.5},\n\t\t\t{\"uom\", \"cm\"},\n\t\t}},\n\t})\n\n```\n\n</Tab>\n\n<Tab name=\"Java (Async)\">\n\n```java\nDocument canvas = new Document(\"item\", \"canvas\")\n        .append(\"qty\", 100)\n        .append(\"tags\", singletonList(\"cotton\"));\n\nDocument size = new Document(\"h\", 28)\n        .append(\"w\", 35.5)\n        .append(\"uom\", \"cm\");\ncanvas.put(\"size\", size);\n\nPublisher<Success> insertOnePublisher = collection.insertOne(canvas);\n```\n\n</Tab>\n\n<Tab name=\"Java (Sync)\">\n\n```java\nDocument canvas = new Document(\"item\", \"canvas\")\n        .append(\"qty\", 100)\n        .append(\"tags\", singletonList(\"cotton\"));\n\nDocument size = new Document(\"h\", 28)\n        .append(\"w\", 35.5)\n        .append(\"uom\", \"cm\");\ncanvas.put(\"size\", size);\n\ncollection.insertOne(canvas);\n```\n\n</Tab>\n\n<Tab name=\"Kotlin (Coroutine)\">\n\n```kotlin\nresult = collection.insertOne(\nDocument(\"item\", \"canvas\")\n    .append(\"qty\", 100)\n    .append(\"tags\", listOf(\"cotton\"))\n    .append(\"size\", Document(\"h\", 28)\n        .append(\"w\", 35.5)\n        .append(\"uom\", \"cm\")\n    )\n\n```\n\n</Tab>\n\n<Tab name=\"Motor\">\n\n```python\nawait db.inventory.insert_one(\n    {\n        \"item\": \"canvas\",\n        \"qty\": 100,\n        \"tags\": [\"cotton\"],\n        \"size\": {\"h\": 28, \"w\": 35.5, \"uom\": \"cm\"},\n    }\n)\n```\n\n</Tab>\n\n<Tab name=\"Node.js\">\n\n```javascript\nawait db.collection('inventory').insertOne({\n  item: 'canvas',\n  qty: 100,\n  tags: ['cotton'],\n  size: { h: 28, w: 35.5, uom: 'cm' }\n});\n```\n\n</Tab>\n\n<Tab name=\"Perl\">\n\n```perl\n$db->coll(\"inventory\")->insert_one(\n    {\n        item => \"canvas\",\n        qty  => 100,\n        tags => [\"cotton\"],\n        size => { h => 28, w => 35.5, uom => \"cm\" }\n    }\n);\n```\n\n</Tab>\n\n<Tab name=\"PHP\">\n\n```php\n$insertOneResult = $db->inventory->insertOne([\n    'item' => 'canvas',\n    'qty' => 100,\n    'tags' => ['cotton'],\n    'size' => ['h' => 28, 'w' => 35.5, 'uom' => 'cm'],\n]);\n```\n\n</Tab>\n\n<Tab name=\"Python\">\n\n```python\ndb.inventory.insert_one(\n    {\n        \"item\": \"canvas\",\n        \"qty\": 100,\n        \"tags\": [\"cotton\"],\n        \"size\": {\"h\": 28, \"w\": 35.5, \"uom\": \"cm\"},\n    }\n)\n```\n\n</Tab>\n\n<Tab name=\"Ruby\">\n\n```ruby\nclient[:inventory].insert_one({ item: 'canvas',\n                                qty: 100,\n                                tags: [ 'cotton' ],\n                                size: { h: 28, w: 35.5, uom: 'cm' } })\n```\n\n</Tab>\n\n<Tab name=\"Scala\">\n\n```scala\ncollection.insertOne(\n  Document(\"item\" -> \"canvas\", \"qty\" -> 100, \"tags\" -> Seq(\"cotton\"), \"size\" -> Document(\"h\" -> 28, \"w\" -> 35.5, \"uom\" -> \"cm\"))\n).execute()\n```\n\n</Tab>\n\n</Tabs>\n\n<Tabs>\n\n<Tab name=\"MongoDB Shell\">\n\n`insertOne()` returns a document that includes the newly inserted document's `_id` field value. For an example of a return document, see db.collection.insertOne() reference.\n\n</Tab>\n\n<Tab name=\"Compass\">\n\nMongoDB Compass generates the `_id` field and its value automatically. The generated ObjectId consists of a unique randomly generated hexadecimal value.\n\nYou can change this value prior to inserting your document so long as it remains unique and is a valid `ObjectId`. For more information on the `_id` field, see _id Field.\n\n</Tab>\n\n<Tab name=\"C\">\n\nmongoc_collection_insert_one returns `true` if successful, or returns `false` and sets error if there are invalid arguments or a server or network error.\n\n</Tab>\n\n<Tab name=\"C#\">\n\n</Tab>\n\n<Tab name=\"Go\">\n\nCollection.InsertOne function returns an instance of InsertOneResult whose `InsertedID` attribute contains the `_id` of the newly inserted document.\n\n</Tab>\n\n<Tab name=\"Java (Async)\">\n\ncom.mongodb.reactivestreams.client.MongoCollection.insertOne returns a Publisher object. The `Publisher` inserts the document into a collection when subscribers request data.\n\n</Tab>\n\n<Tab name=\"Java (Sync)\">\n\ncom.mongodb.client.MongoCollection.insertOne returns an instance of InsertOneResult. You can access the `_id` field of the inserted document by calling the getInsertedId() method on the result.\n\n</Tab>\n\n<Tab name=\"Kotlin (Coroutine)\">\n\nMongoCollection.insertOne returns an instance of InsertOneResult. You can access the `_id` field of the inserted document by accessing the `insertedId` field of the result.\n\n</Tab>\n\n<Tab name=\"Motor\">\n\n`insert_one` returns an instance of `pymongo.results.InsertOneResult` whose `inserted_id` field contains the `_id` of the newly inserted document.\n\n</Tab>\n\n<Tab name=\"Node.js\">\n\ninsertOne() returns a promise that provides a `result`.  The `result.insertedId` promise contains the `_id` of the newly inserted document.\n\n</Tab>\n\n<Tab name=\"Perl\">\n\nUpon successful insert, the insert_one() method returns an instance of MongoDB::InsertOneResult whose `inserted_id` attribute contains the `_id` of the newly inserted document.\n\n</Tab>\n\n<Tab name=\"PHP\">\n\nUpon successful insert, the `insertOne()` method returns an instance of `MongoDB\\\\InsertOneResult` whose `getInsertedId()` method returns the `_id` of the newly inserted document.\n\n</Tab>\n\n<Tab name=\"Python\">\n\n`insert_one` returns an instance of `pymongo.results.InsertOneResult` whose `inserted_id` field contains the `_id` of the newly inserted document.\n\n</Tab>\n\n<Tab name=\"Ruby\">\n\nUpon successful insert, the insert_one() method returns an instance of Mongo::Operation::Result, whose `inserted_id` attribute contains the `_id` of the newly inserted document.\n\n</Tab>\n\n<Tab name=\"Scala\">\n\nUpon successful insert, the collection.insertOne() method returns an instance of collection.insertOne().results(); whose `inserted_id` attribute contains the `_id` of the newly inserted document.\n\n</Tab>\n\n</Tabs>\n\nTo retrieve the document that you just inserted, query the collection:\n\n<Tabs>\n\n<Tab name=\"MongoDB Shell\">\n\n```javascript\ndb.inventory.find( { item: \"canvas\" } )\n```\n\n</Tab>\n\n<Tab name=\"Compass\">\n\nSpecify a filter in the MongoDB Compass query bar and click Find to execute the query.\n\nThe above filter specifies that MongoDB Compass only return documents where the `item` field is equal to `canvas`.\n\nFor more information on the MongoDB Compass Query Bar, see the Compass Query Bar documentation.\n\n</Tab>\n\n<Tab name=\"C\">\n\n```c\nmongoc_collection_t *collection;\nbson_t *filter;\nmongoc_cursor_t *cursor;\n\ncollection = mongoc_database_get_collection (db, \"inventory\");\nfilter = BCON_NEW (\"item\", BCON_UTF8 (\"canvas\"));\ncursor = mongoc_collection_find_with_opts (collection, filter, NULL, NULL);\n```\n\n</Tab>\n\n<Tab name=\"C#\">\n\n```csharp\nvar filter = Builders<BsonDocument>.Filter.Eq(\"item\", \"canvas\");\nvar result = collection.Find(filter).ToList();\n```\n\n</Tab>\n\n<Tab name=\"Go\">\n\n```go\n\ncursor, err := coll.Find(\n\tcontext.TODO(),\n\tbson.D{{\"item\", \"canvas\"}},\n)\n\n```\n\n</Tab>\n\n<Tab name=\"Java (Async)\">\n\n```java\nFindPublisher<Document> findPublisher = collection.find(eq(\"item\", \"canvas\"));\n```\n\n</Tab>\n\n<Tab name=\"Java (Sync)\">\n\n```java\nFindIterable<Document> findIterable = collection.find(eq(\"item\", \"canvas\"));\n```\n\n</Tab>\n\n<Tab name=\"Kotlin (Coroutine)\">\n\n```kotlin\nval flowInsertOne = collection\n    .find(eq(\"item\", \"canvas\"))\n    .firstOrNull()\n```\n\n</Tab>\n\n<Tab name=\"Motor\">\n\n```python\ncursor = db.inventory.find({\"item\": \"canvas\"})\n```\n\n</Tab>\n\n<Tab name=\"Node.js\">\n\n```javascript\nconst cursor = db.collection('inventory').find({ item: 'canvas' });\n```\n\n</Tab>\n\n<Tab name=\"Perl\">\n\n```perl\n$cursor = $db->coll(\"inventory\")->find( { item => \"canvas\" } );\n```\n\n</Tab>\n\n<Tab name=\"PHP\">\n\n```php\n$cursor = $db->inventory->find(['item' => 'canvas']);\n```\n\n</Tab>\n\n<Tab name=\"Python\">\n\n```python\ncursor = db.inventory.find({\"item\": \"canvas\"})\n```\n\n</Tab>\n\n<Tab name=\"Ruby\">\n\n```ruby\nclient[:inventory].find(item: 'canvas')\n```\n\n</Tab>\n\n<Tab name=\"Scala\">\n\n```scala\nval observable = collection.find(equal(\"item\", \"canvas\"))\n```\n\n</Tab>\n\n</Tabs>\n\n## Insert Multiple Documents\n\n<Tabs>\n\n<Tab name=\"MongoDB Shell\">\n\n`db.collection.insertMany()` can insert *multiple*\ndocuments into a collection. Pass an array of documents to the method.\n\nThe following example inserts three new documents into the `inventory` collection. If the documents do not specify an `_id` field, MongoDB adds the `_id` field with an ObjectId value to each document. See Insert Behavior.\n\n</Tab>\n\n<Tab name=\"Compass\">\n\n</Tab>\n\n<Tab name=\"C\">\n\nmongoc_bulk_operation_insert_with_opts inserts *multiple* documents into a collection. You must pass an iterable of documents to the method.\n\nThe following example inserts three new documents into the `inventory` collection. If the documents do not specify an `_id` field, the C driver adds the `_id` field with an ObjectId value to each document. See Insert Behavior.\n\n</Tab>\n\n<Tab name=\"C#\">\n\nIMongoCollection.InsertMany() can insert *multiple* documents into a collection. Pass an enumerable collection of documents to the method.\n\nThe following example inserts three new documents into the `inventory` collection. If the documents do not specify an `_id` field, the driver adds the `_id` field with an ObjectId value to each document. See Insert Behavior.\n\n</Tab>\n\n<Tab name=\"Go\">\n\nCollection.InsertMany can insert *multiple* documents into a collection.\n\nThe following example inserts three new documents into the `inventory` collection. If the documents do not specify an `_id` field, the driver adds the `_id` field with an ObjectId value to each document. See Insert Behavior.\n\n</Tab>\n\n<Tab name=\"Java (Async)\">\n\ncom.mongodb.reactivestreams.client.MongoCollection.html.insertMany inserts the following documents with the Java Reactive Streams Driver:\n\n```json\n{ item: \"journal\", qty: 25, tags: [\"blank\", \"red\"], size: { h: 14, w: 21, uom: \"cm\" } }\n{ item: \"mat\", qty: 85, tags: [\"gray\"], size: { h: 27.9, w: 35.5, uom: \"cm\" } }\n{ item: \"mousepad\", qty: 25, tags: [\"gel\", \"blue\"], size: { h: 19, w: 22.85, uom: \"cm\" } }\n```\n\nThe following example inserts three new documents into the `inventory` collection. If the documents do not specify an `_id` field, the driver adds the `_id` field with an ObjectId value to each document. See Insert Behavior.\n\n</Tab>\n\n<Tab name=\"Java (Sync)\">\n\ncom.mongodb.client.MongoCollection.insertMany can insert *multiple* documents into a collection. Pass a list of documents to the method.\n\nThe following example inserts three new documents into the `inventory` collection. If the documents do not specify an `_id` field, the driver adds the `_id` field with an ObjectId value to each document. See Insert Behavior.\n\n</Tab>\n\n<Tab name=\"Kotlin (Coroutine)\">\n\nMongoCollection.insertMany inserts *multiple* documents into a collection. Pass a list of documents as a parameter to the method.\n\nThe following example inserts three new documents into the `inventory` collection. If the documents do not specify an `_id` field, the driver adds an ObjectId value to each document. See Insert Behavior.\n\n</Tab>\n\n<Tab name=\"Motor\">\n\n`motor.motor_asyncio.AsyncIOMotorCollection.insert_many` can insert *multiple* documents into a collection. Pass an iterable of documents to the method.\n\nThe following example inserts three new documents into the `inventory` collection. If the documents do not specify an `_id` field, the PyMongo driver adds the `_id` field with an ObjectId value to each document. See Insert Behavior.\n\n</Tab>\n\n<Tab name=\"Node.js\">\n\nCollection.insertMany() can insert *multiple* documents into a collection. Pass an array of documents to the method.\n\nThe following example inserts three new documents into the `inventory` collection. If the documents do not specify an `_id` field, the Node.js driver adds the `_id` field with an ObjectId value to each document. See Insert Behavior.\n\n</Tab>\n\n<Tab name=\"Perl\">\n\nMongoDB::Collection::insert_many() can insert *multiple* documents into a collection. Pass an array reference of documents to the method.\n\nThe following example inserts three new documents into the `inventory` collection. If the documents do not specify an `_id` field, the Perl driver adds the `_id` field with an ObjectId value to each document. See Insert Behavior.\n\n</Tab>\n\n<Tab name=\"PHP\">\n\n`MongoDB\\\\Collection::insertMany()` can insert *multiple* documents into a collection. Pass an array of documents to the method.\n\nThe following example inserts three new documents into the `inventory` collection. If the documents do not specify an `_id` field, the PHP driver adds the `_id` field with an ObjectId value to each document. See Insert Behavior.\n\n</Tab>\n\n<Tab name=\"Python\">\n\n`pymongo.collection.Collection.insert_many` can insert *multiple* documents into a collection. Pass an iterable of documents to the method.\n\nThe following example inserts three new documents into the `inventory` collection. If the documents do not specify an `_id` field, the PyMongo driver adds the `_id` field with an ObjectId value to each document. See Insert Behavior.\n\n</Tab>\n\n<Tab name=\"Ruby\">\n\nMongo::Collection#insert_many() can insert *multiple* documents into a collection. Pass an array of documents to the method.\n\nThe following example inserts three new documents into the `inventory` collection. If the documents do not specify an `_id` field, the Ruby driver adds the `_id` field with an ObjectId value to each document. See Insert Behavior.\n\n</Tab>\n\n<Tab name=\"Scala\">\n\ncollection.insertMany() can insert *multiple* documents into a collection.\n\nThe following example inserts three new documents into the `inventory` collection. If the documents do not specify an `_id` field, the Scala driver adds the `_id` field with an ObjectId value to each document. See Insert Behavior.\n\n</Tab>\n\n</Tabs>\n\n<Tabs>\n\n<Tab name=\"MongoDB Shell\">\n\n```javascript\ndb.inventory.insertMany([\n   { item: \"journal\", qty: 25, tags: [\"blank\", \"red\"], size: { h: 14, w: 21, uom: \"cm\" } },\n   { item: \"mat\", qty: 85, tags: [\"gray\"], size: { h: 27.9, w: 35.5, uom: \"cm\" } },\n   { item: \"mousepad\", qty: 25, tags: [\"gel\", \"blue\"], size: { h: 19, w: 22.85, uom: \"cm\" } }\n])\n```\n\n</Tab>\n\n<Tab name=\"Compass\">\n\n```javascript\n[\n    { \"item\": \"canvas\", \"qty\": 100, \"size\": { \"h\": 28, \"w\": 35.5, \"uom\": \"cm\" }, \"status\": \"A\" },\n    { \"item\": \"journal\", \"qty\": 25, \"size\": { \"h\": 14, \"w\": 21, \"uom\": \"cm\" }, \"status\": \"A\" },\n    { \"item\": \"mat\", \"qty\": 85, \"size\": { \"h\": 27.9, \"w\": 35.5, \"uom\": \"cm\" }, \"status\": \"A\" },\n    { \"item\": \"mousepad\", \"qty\": 25, \"size\": { \"h\": 19, \"w\": 22.85, \"uom\": \"cm\" }, \"status\": \"P\" },\n    { \"item\": \"notebook\", \"qty\": 50, \"size\": { \"h\": 8.5, \"w\": 11, \"uom\": \"in\" }, \"status\": \"P\" },\n    { \"item\": \"paper\", \"qty\": 100, \"size\": { \"h\": 8.5, \"w\": 11, \"uom\": \"in\" }, \"status\": \"D\" },\n    { \"item\": \"planner\", \"qty\": 75, \"size\": { \"h\": 22.85, \"w\": 30, \"uom\": \"cm\" }, \"status\": \"D\" },\n    { \"item\": \"postcard\", \"qty\": 45, \"size\": { \"h\": 10, \"w\": 15.25, \"uom\": \"cm\" }, \"status\": \"A\" },\n    { \"item\": \"sketchbook\", \"qty\": 80, \"size\": { \"h\": 14, \"w\": 21, \"uom\": \"cm\" }, \"status\": \"A\" },\n    { \"item\": \"sketch pad\", \"qty\": 95, \"size\": { \"h\": 22.85, \"w\": 30.5, \"uom\": \"cm\" }, \"status\": \"A\" }\n]\n```\n\nFor instructions on inserting documents using MongoDB Compass, see Insert Documents.\n\n</Tab>\n\n<Tab name=\"C\">\n\n```c\nmongoc_collection_t *collection;\nmongoc_bulk_operation_t *bulk;\nbson_t *doc;\nbool r;\nbson_error_t error;\nbson_t reply;\n\ncollection = mongoc_database_get_collection (db, \"inventory\");\nbulk = mongoc_collection_create_bulk_operation_with_opts (collection, NULL);\ndoc = BCON_NEW (\n   \"item\", BCON_UTF8 (\"journal\"),\n   \"qty\", BCON_INT64 (25),\n   \"tags\", \"[\",\n   BCON_UTF8 (\"blank\"), BCON_UTF8 (\"red\"),\n   \"]\",\n   \"size\", \"{\",\n   \"h\", BCON_DOUBLE (14),\n   \"w\", BCON_DOUBLE (21),\n   \"uom\", BCON_UTF8 (\"cm\"),\n   \"}\");\n\nr = mongoc_bulk_operation_insert_with_opts (bulk, doc, NULL, &error);\nbson_destroy (doc);\nif (!r) {\n   MONGOC_ERROR (\"%s\\n\", error.message);\n   goto done;\n}\n\ndoc = BCON_NEW (\n   \"item\", BCON_UTF8 (\"mat\"),\n   \"qty\", BCON_INT64 (85),\n   \"tags\", \"[\",\n   BCON_UTF8 (\"gray\"),\n   \"]\",\n   \"size\", \"{\",\n   \"h\", BCON_DOUBLE (27.9),\n   \"w\", BCON_DOUBLE (35.5),\n   \"uom\", BCON_UTF8 (\"cm\"),\n   \"}\");\n\nr = mongoc_bulk_operation_insert_with_opts (bulk, doc, NULL, &error);\nbson_destroy (doc);\nif (!r) {\n   MONGOC_ERROR (\"%s\\n\", error.message);\n   goto done;\n}\n\ndoc = BCON_NEW (\n   \"item\", BCON_UTF8 (\"mousepad\"),\n   \"qty\", BCON_INT64 (25),\n   \"tags\", \"[\",\n   BCON_UTF8 (\"gel\"), BCON_UTF8 (\"blue\"),\n   \"]\",\n   \"size\", \"{\",\n   \"h\", BCON_DOUBLE (19),\n   \"w\", BCON_DOUBLE (22.85),\n   \"uom\", BCON_UTF8 (\"cm\"),\n   \"}\");\n\nr = mongoc_bulk_operation_insert_with_opts (bulk, doc, NULL, &error);\nbson_destroy (doc);\nif (!r) {\n   MONGOC_ERROR (\"%s\\n\", error.message);\n   goto done;\n}\n\n/* \"reply\" is initialized on success or error */\nr = (bool) mongoc_bulk_operation_execute (bulk, &reply, &error);\nif (!r) {\n   MONGOC_ERROR (\"%s\\n\", error.message);\n}\n```\n\n</Tab>\n\n<Tab name=\"C#\">\n\n```csharp\nvar documents = new BsonDocument[]\n{\n    new BsonDocument\n    {\n        { \"item\", \"journal\" },\n        { \"qty\", 25 },\n        { \"tags\", new BsonArray { \"blank\", \"red\" } },\n        { \"size\", new BsonDocument { { \"h\", 14 }, { \"w\", 21 }, {  \"uom\", \"cm\"} } }\n    },\n    new BsonDocument\n    {\n        { \"item\", \"mat\" },\n        { \"qty\", 85 },\n        { \"tags\", new BsonArray { \"gray\" } },\n        { \"size\", new BsonDocument { { \"h\", 27.9 }, { \"w\", 35.5 }, {  \"uom\", \"cm\"} } }\n    },\n    new BsonDocument\n    {\n        { \"item\", \"mousepad\" },\n        { \"qty\", 25 },\n        { \"tags\", new BsonArray { \"gel\", \"blue\" } },\n        { \"size\", new BsonDocument { { \"h\", 19 }, { \"w\", 22.85 }, {  \"uom\", \"cm\"} } }\n    },\n};\ncollection.InsertMany(documents);\n```\n\n</Tab>\n\n<Tab name=\"Go\">\n\n```go\n\nresult, err := coll.InsertMany(\n\tcontext.TODO(),\n\t[]interface{}{\n\t\tbson.D{\n\t\t\t{\"item\", \"journal\"},\n\t\t\t{\"qty\", int32(25)},\n\t\t\t{\"tags\", bson.A{\"blank\", \"red\"}},\n\t\t\t{\"size\", bson.D{\n\t\t\t\t{\"h\", 14},\n\t\t\t\t{\"w\", 21},\n\t\t\t\t{\"uom\", \"cm\"},\n\t\t\t}},\n\t\t},\n\t\tbson.D{\n\t\t\t{\"item\", \"mat\"},\n\t\t\t{\"qty\", int32(25)},\n\t\t\t{\"tags\", bson.A{\"gray\"}},\n\t\t\t{\"size\", bson.D{\n\t\t\t\t{\"h\", 27.9},\n\t\t\t\t{\"w\", 35.5},\n\t\t\t\t{\"uom\", \"cm\"},\n\t\t\t}},\n\t\t},\n\t\tbson.D{\n\t\t\t{\"item\", \"mousepad\"},\n\t\t\t{\"qty\", 25},\n\t\t\t{\"tags\", bson.A{\"gel\", \"blue\"}},\n\t\t\t{\"size\", bson.D{\n\t\t\t\t{\"h\", 19},\n\t\t\t\t{\"w\", 22.85},\n\t\t\t\t{\"uom\", \"cm\"},\n\t\t\t}},\n\t\t},\n\t})\n\n```\n\n</Tab>\n\n<Tab name=\"Java (Async)\">\n\n```java\nDocument journal = new Document(\"item\", \"journal\")\n        .append(\"qty\", 25)\n        .append(\"tags\", asList(\"blank\", \"red\"));\n\nDocument journalSize = new Document(\"h\", 14)\n        .append(\"w\", 21)\n        .append(\"uom\", \"cm\");\njournal.put(\"size\", journalSize);\n\nDocument mat = new Document(\"item\", \"mat\")\n        .append(\"qty\", 85)\n        .append(\"tags\", singletonList(\"gray\"));\n\nDocument matSize = new Document(\"h\", 27.9)\n        .append(\"w\", 35.5)\n        .append(\"uom\", \"cm\");\nmat.put(\"size\", matSize);\n\nDocument mousePad = new Document(\"item\", \"mousePad\")\n        .append(\"qty\", 25)\n        .append(\"tags\", asList(\"gel\", \"blue\"));\n\nDocument mousePadSize = new Document(\"h\", 19)\n        .append(\"w\", 22.85)\n        .append(\"uom\", \"cm\");\nmousePad.put(\"size\", mousePadSize);\n\nPublisher<Success> insertManyPublisher = collection.insertMany(asList(journal, mat, mousePad));\n```\n\n</Tab>\n\n<Tab name=\"Java (Sync)\">\n\n```java\nDocument journal = new Document(\"item\", \"journal\")\n        .append(\"qty\", 25)\n        .append(\"tags\", asList(\"blank\", \"red\"));\n\nDocument journalSize = new Document(\"h\", 14)\n        .append(\"w\", 21)\n        .append(\"uom\", \"cm\");\njournal.put(\"size\", journalSize);\n\nDocument mat = new Document(\"item\", \"mat\")\n        .append(\"qty\", 85)\n        .append(\"tags\", singletonList(\"gray\"));\n\nDocument matSize = new Document(\"h\", 27.9)\n        .append(\"w\", 35.5)\n        .append(\"uom\", \"cm\");\nmat.put(\"size\", matSize);\n\nDocument mousePad = new Document(\"item\", \"mousePad\")\n        .append(\"qty\", 25)\n        .append(\"tags\", asList(\"gel\", \"blue\"));\n\nDocument mousePadSize = new Document(\"h\", 19)\n        .append(\"w\", 22.85)\n        .append(\"uom\", \"cm\");\nmousePad.put(\"size\", mousePadSize);\n\ncollection.insertMany(asList(journal, mat, mousePad));\n```\n\n</Tab>\n\n<Tab name=\"Kotlin (Coroutine)\">\n\n```kotlin\nresults = collection.insertMany(\nlistOf(\n    Document(\"item\", \"journal\")\n        .append(\"qty\", 25)\n        .append(\"tags\", listOf(\"blank\", \"red\"))\n        .append(\"size\", Document(\"h\", 14)\n            .append(\"w\", 21)\n            .append(\"uom\", \"cm\")\n        ),\n    Document(\"item\", \"mat\")\n        .append(\"qty\", 25)\n        .append(\"tags\", listOf(\"gray\"))\n        .append(\"size\", Document(\"h\", 27.9)\n            .append(\"w\", 35.5)\n            .append(\"uom\", \"cm\")\n        ),\n    Document(\"item\", \"mousepad\")\n        .append(\"qty\", 25)\n        .append(\"tags\", listOf(\"gel\", \"blue\"))\n        .append(\"size\", Document(\"h\", 19)\n            .append(\"w\", 22.85)\n            .append(\"uom\", \"cm\")\n        )\n)\n\n```\n\n</Tab>\n\n<Tab name=\"Motor\">\n\n```python\nawait db.inventory.insert_many(\n    [\n        {\n            \"item\": \"journal\",\n            \"qty\": 25,\n            \"tags\": [\"blank\", \"red\"],\n            \"size\": {\"h\": 14, \"w\": 21, \"uom\": \"cm\"},\n        },\n        {\n            \"item\": \"mat\",\n            \"qty\": 85,\n            \"tags\": [\"gray\"],\n            \"size\": {\"h\": 27.9, \"w\": 35.5, \"uom\": \"cm\"},\n        },\n        {\n            \"item\": \"mousepad\",\n            \"qty\": 25,\n            \"tags\": [\"gel\", \"blue\"],\n            \"size\": {\"h\": 19, \"w\": 22.85, \"uom\": \"cm\"},\n        },\n    ]\n)\n```\n\n</Tab>\n\n<Tab name=\"Node.js\">\n\n```javascript\nawait db.collection('inventory').insertMany([\n  {\n    item: 'journal',\n    qty: 25,\n    tags: ['blank', 'red'],\n    size: { h: 14, w: 21, uom: 'cm' }\n  },\n  {\n    item: 'mat',\n    qty: 85,\n    tags: ['gray'],\n    size: { h: 27.9, w: 35.5, uom: 'cm' }\n  },\n  {\n    item: 'mousepad',\n    qty: 25,\n    tags: ['gel', 'blue'],\n    size: { h: 19, w: 22.85, uom: 'cm' }\n  }\n]);\n```\n\n</Tab>\n\n<Tab name=\"Perl\">\n\n```perl\n$db->coll(\"inventory\")->insert_many(\n    [\n        {\n            item => \"journal\",\n            qty  => 25,\n            tags => [ \"blank\", \"red\" ],\n            size => { h => 14, w => 21, uom => \"cm\" }\n        },\n        {\n            item => \"mat\",\n            qty  => 85,\n            tags => [\"gray\"],\n            size => { h => 27.9, w => 35.5, uom => \"cm\" }\n        },\n        {\n            item => \"mousepad\",\n            qty  => 25,\n            tags => [ \"gel\", \"blue\" ],\n            size => { h => 19, w => 22.85, uom => \"cm\" }\n        }\n    ]\n);\n```\n\n</Tab>\n\n<Tab name=\"PHP\">\n\n```php\n$insertManyResult = $db->inventory->insertMany([\n    [\n        'item' => 'journal',\n        'qty' => 25,\n        'tags' => ['blank', 'red'],\n        'size' => ['h' => 14, 'w' => 21, 'uom' => 'cm'],\n    ],\n    [\n        'item' => 'mat',\n        'qty' => 85,\n        'tags' => ['gray'],\n        'size' => ['h' => 27.9, 'w' => 35.5, 'uom' => 'cm'],\n    ],\n    [\n        'item' => 'mousepad',\n        'qty' => 25,\n        'tags' => ['gel', 'blue'],\n        'size' => ['h' => 19, 'w' => 22.85, 'uom' => 'cm'],\n    ],\n]);\n```\n\n</Tab>\n\n<Tab name=\"Python\">\n\n```python\ndb.inventory.insert_many(\n    [\n        {\n            \"item\": \"journal\",\n            \"qty\": 25,\n            \"tags\": [\"blank\", \"red\"],\n            \"size\": {\"h\": 14, \"w\": 21, \"uom\": \"cm\"},\n        },\n        {\n            \"item\": \"mat\",\n            \"qty\": 85,\n            \"tags\": [\"gray\"],\n            \"size\": {\"h\": 27.9, \"w\": 35.5, \"uom\": \"cm\"},\n        },\n        {\n            \"item\": \"mousepad\",\n            \"qty\": 25,\n            \"tags\": [\"gel\", \"blue\"],\n            \"size\": {\"h\": 19, \"w\": 22.85, \"uom\": \"cm\"},\n        },\n    ]\n)\n```\n\n</Tab>\n\n<Tab name=\"Ruby\">\n\n```ruby\nclient[:inventory].insert_many([{ item: 'journal',\n                                  qty: 25,\n                                  tags: ['blank', 'red'],\n                                  size: { h: 14, w: 21, uom: 'cm' }\n                                },\n                                { item: 'mat',\n                                  qty: 85,\n                                  tags: ['gray'],\n                                  size: { h: 27.9, w: 35.5, uom: 'cm' }\n                                },\n                                { item: 'mousepad',\n                                  qty: 25,\n                                  tags: ['gel', 'blue'],\n                                  size: { h: 19, w: 22.85, uom: 'cm' }\n                                }\n                               ])\n```\n\n</Tab>\n\n<Tab name=\"Scala\">\n\n```scala\ncollection.insertMany(Seq(\n  Document(\"item\" -> \"journal\", \"qty\" -> 25, \"tags\" -> Seq(\"blank\", \"red\"), \"size\" -> Document(\"h\" -> 14, \"w\" -> 21, \"uom\" -> \"cm\")),\n  Document(\"item\" -> \"mat\", \"qty\" -> 85, \"tags\" -> Seq(\"gray\"), \"size\" -> Document(\"h\" -> 27.9, \"w\" -> 35.5, \"uom\" -> \"cm\")),\n  Document(\"item\" -> \"mousepad\", \"qty\" -> 25, \"tags\" -> Seq(\"gel\", \"blue\"), \"size\" -> Document(\"h\" -> 19, \"w\" -> 22.85, \"uom\" -> \"cm\"))\n)).execute()\n```\n\n</Tab>\n\n</Tabs>\n\n<Tabs>\n\n<Tab name=\"MongoDB Shell\">\n\n`insertMany()` returns a document that includes the newly inserted documents `_id` field values. See the reference for an example.\n\nTo retrieve the inserted documents, query the collection:\n\n</Tab>\n\n<Tab name=\"C\">\n\nmongoc_bulk_operation_insert_with_opts returns `true` on success, or `false` if passed invalid arguments.\n\nTo retrieve the inserted documents, use mongoc_collection_find_with_opts to query the collection:\n\n</Tab>\n\n<Tab name=\"C#\">\n\nTo retrieve the inserted documents, query the collection:\n\n</Tab>\n\n<Tab name=\"Go\">\n\nTo retrieve the inserted documents, query the collection:\n\n</Tab>\n\n<Tab name=\"Java (Async)\">\n\ncom.mongodb.reactivestreams.client.MongoCollection.html.insertMany returns a Publisher object. The `Publisher` inserts the document into a collection when subscribers request data.\n\nTo retrieve the inserted documents, query the collection:\n\n</Tab>\n\n<Tab name=\"Java (Sync)\">\n\nTo retrieve the inserted documents, query the collection:\n\n</Tab>\n\n<Tab name=\"Kotlin (Coroutine)\">\n\nMongoCollection.insertMany() returns an `InsertManyResult` instance. The `insertedIds` field of `InsertManyResult` contains the `_id` values of the inserted documents.\n\nTo retrieve the inserted documents, query the collection:\n\n</Tab>\n\n<Tab name=\"Motor\">\n\n`insert_many` returns an instance of `pymongo.results.InsertManyResult` whose `inserted_ids` field is a list containing the `_id` of each newly inserted document.\n\nTo retrieve the inserted documents, query the collection:\n\n</Tab>\n\n<Tab name=\"Node.js\">\n\ninsertMany() returns a promise that provides a `result`. The `result.insertedIds` field contains an array with the `_id` of each newly inserted document.\n\nTo retrieve the inserted documents, query the collection:\n\n</Tab>\n\n<Tab name=\"Perl\">\n\nUpon successful insert, the insert_many() method returns an instance of MongoDB::InsertManyResult whose `inserted_ids` attribute is a list containing the `_id` of each newly inserted document.\n\nTo retrieve the inserted documents, query the collection:\n\n</Tab>\n\n<Tab name=\"PHP\">\n\nUpon successful insert, the `insertMany()` method returns an instance of `MongoDB\\\\InsertManyResult` whose `getInsertedIds()` method returns the `_id` of each newly inserted document.\n\nTo retrieve the inserted documents, query the collection:\n\n</Tab>\n\n<Tab name=\"Python\">\n\n`insert_many` returns an instance of `pymongo.results.InsertManyResult` whose `inserted_ids` field is a list containing the `_id` of each newly inserted document.\n\nTo retrieve the inserted documents, query the collection:\n\n</Tab>\n\n<Tab name=\"Ruby\">\n\nUpon successful insert, the insert_many() method returns an instance of Mongo::BulkWrite::Result whose `inserted_ids` attribute is a list containing the `_id` of each newly inserted document.\n\nTo retrieve the inserted documents, query the collection:\n\n</Tab>\n\n<Tab name=\"Scala\">\n\nUpon successful insert, the insertMany() method returns an Observable with a type parameter indicating when the operation has completed or with either a `com.mongodb.DuplicateKeyException` or `com.mongodb.MongoException`.\n\nTo retrieve the inserted documents, query the collection:\n\n</Tab>\n\n</Tabs>\n\n<Tabs>\n\n<Tab name=\"MongoDB Shell\">\n\n```javascript\ndb.inventory.find( {} )\n```\n\n</Tab>\n\n<Tab name=\"Compass\">\n\n</Tab>\n\n<Tab name=\"C\">\n\n```c\nmongoc_collection_t *collection;\nbson_t *filter;\nmongoc_cursor_t *cursor;\n\ncollection = mongoc_database_get_collection (db, \"inventory\");\nfilter = BCON_NEW (NULL);\ncursor = mongoc_collection_find_with_opts (collection, filter, NULL, NULL);\n```\n\nBe sure to also clean up any open resources by calling the following methods, as appropriate:\n\n- bson_destroy\n\n- mongoc_bulk_operation_destroy\n\n- mongoc_collection_destroy\n\n- mongoc_cursor_destroy,\n\n</Tab>\n\n<Tab name=\"C#\">\n\n```csharp\nvar filter = Builders<BsonDocument>.Filter.Empty;\nvar result = collection.Find(filter).ToList();\n```\n\n</Tab>\n\n<Tab name=\"Go\">\n\n```go\n\ncursor, err := coll.Find(\n\tcontext.TODO(),\n\tbson.D{},\n)\n\n```\n\n</Tab>\n\n<Tab name=\"Java (Async)\">\n\n```java\nFindPublisher<Document> findPublisher = collection.find(new Document());\n```\n\n</Tab>\n\n<Tab name=\"Java (Sync)\">\n\n```java\nFindIterable<Document> findIterable = collection.find(new Document());\n```\n\n</Tab>\n\n<Tab name=\"Kotlin (Coroutine)\">\n\n```kotlin\nval flowInsertMany = collection\n    .find(empty())\n```\n\n</Tab>\n\n<Tab name=\"Motor\">\n\n```python\ncursor = db.inventory.find({})\n```\n\n</Tab>\n\n<Tab name=\"Node.js\">\n\n```javascript\nconst cursor = db.collection('inventory').find({});\n```\n\n</Tab>\n\n<Tab name=\"Perl\">\n\n```perl\n$cursor = $db->coll(\"inventory\")->find( {} );\n```\n\n</Tab>\n\n<Tab name=\"PHP\">\n\n```php\n$cursor = $db->inventory->find([]);\n```\n\n</Tab>\n\n<Tab name=\"Python\">\n\n```python\ncursor = db.inventory.find({})\n```\n\n</Tab>\n\n<Tab name=\"Ruby\">\n\n```ruby\nclient[:inventory].find({})\n```\n\n</Tab>\n\n<Tab name=\"Scala\">\n\n```scala\nvar findObservable = collection.find(Document())\n```\n\n</Tab>\n\n</Tabs>\n\n## Insert Behavior\n\n### Collection Creation\n\nIf the collection does not currently exist, insert operations will create the collection.\n\n### `_id` Field\n\nIn MongoDB, each document stored in a collection requires a unique _id field that acts as a primary key. If an inserted document omits the `_id` field, the MongoDB driver automatically generates an ObjectId for the `_id` field.\n\nThis also applies to documents inserted through update operations with upsert: true.\n\n### Atomicity\n\nAll write operations in MongoDB are atomic on the level of a single document. For more information on MongoDB and atomicity, see Atomicity and Transactions\n\n### Write Acknowledgement\n\nWith write concerns, you can specify the level of acknowledgment requested from MongoDB for write operations. For details, see Write Concern.\n\n<Tabs>\n\n<Tab name=\"MongoDB Shell\">\n\n- `db.collection.insertOne()`\n\n- `db.collection.insertMany()`\n\n- Additional Methods for Inserts\n\n</Tab>\n\n<Tab name=\"C\">\n\n- mongoc_bulk_operation_insert_with_opts\n\n- Additional Methods for Inserts\n\n</Tab>\n\n<Tab name=\"C#\">\n\n- IMongoCollection.InsertOne()\n\n- IMongoCollection.InsertMany()\n\n- Additional Methods for Inserts\n\n</Tab>\n\n<Tab name=\"Go\">\n\n- Collection.InsertOne\n\n- Collection.InsertMany\n\n- Additional Methods for Inserts\n\n</Tab>\n\n<Tab name=\"Java (Async)\">\n\n- com.mongodb.reactivestreams.client.MongoCollection.insertOne\n\n- com.mongodb.reactivestreams.client.MongoCollection.html.insertMany\n\n- Java Reactive Streams Driver Quick Tour\n\n</Tab>\n\n<Tab name=\"Java (Sync)\">\n\n- com.mongodb.client.MongoCollection.insertOne\n\n- com.mongodb.client.MongoCollection.insertMany\n\n- Additional Java Synchronous Driver Write Examples\n\n</Tab>\n\n<Tab name=\"Kotlin (Coroutine)\">\n\n- MongoCollection.insertOne\n\n- MongoCollection.insertMany\n\n- Kotlin Driver Write Operation Examples\n\n</Tab>\n\n<Tab name=\"Motor\">\n\n- `motor.motor_asyncio.AsyncIOMotorCollection.insert_one`\n\n- `motor.motor_asyncio.AsyncIOMotorCollection.insert_many`\n\n- Additional Methods for Inserts\n\n</Tab>\n\n<Tab name=\"Node.js\">\n\n- Collection.insertOne()\n\n- Collection.insertMany()\n\n- Additional Methods for Inserts\n\n</Tab>\n\n<Tab name=\"Perl\">\n\n- MongoDB::Collection::insert_one()\n\n- MongoDB::Collection::insert_many()\n\n- Additional Methods for Inserts\n\n</Tab>\n\n<Tab name=\"PHP\">\n\n- `MongoDB\\\\Collection::insertOne()`\n\n- `MongoDB\\\\Collection::insertMany()`\n\n- Additional Methods for Inserts\n\n</Tab>\n\n<Tab name=\"Python\">\n\n- `pymongo.collection.Collection.insert_one`\n\n- `pymongo.collection.Collection.insert_many`\n\n- Additional Methods for Inserts\n\n</Tab>\n\n<Tab name=\"Ruby\">\n\n- Mongo::Collection#insert_one()\n\n- Mongo::Collection#insert_many()\n\n</Tab>\n\n<Tab name=\"Scala\">\n\n- collection.insertOne()\n\n- collection.insertMany()\n\n- Additional Methods for Inserts\n\n</Tab>\n\n</Tabs>\n"
  },
  "output": "Examples of how to insert documents using MongoDB, including creating a collection upon first insert."
}
