- questions:
    - How do I register for MongoDB Atlas?
    - How do I register for Atlas?
    - Register for Atlas
    - Sign up for Atlas
    - How do I set up an Atlas account?
    - Create an Atlas account
  answer: >
    To register for Atlas today, [visit our registration
    page](https://www.mongodb.com/cloud/atlas/register?tck=mongodb_ai_chatbot).


    For step-by-step instructions on how to register, [read our tutorial](https://www.mongodb.com/basics/mongodb-atlas-tutorial?tck=mongodb_ai_chatbot).
  author_email: chris.bush@mongodb.com
  references:
    - url: https://www.mongodb.com/cloud/atlas/register?tck=mongodb_ai_chatbot
      title: MongoDB Atlas Registration
    - url: https://www.mongodb.com/basics/mongodb-atlas-tutorial?tck=mongodb_ai_chatbot
      title: MongoDB Atlas Tutorial
- questions:
    - Get started with MongoDB
    - How do I get started with MongoDB?
    - How do I get started with MongoDB Atlas?
  author_email: jessica.roberts@mongodb.com
  answer: |
    The easiest way to get started with MongoDB Atlas is through the Atlas UI. Here are the steps:

    - Register for Atlas by visiting our [registration page](https://www.mongodb.com/cloud/atlas/register?tck=mongodb_ai_chatbot).
    - Choose your connection method using a driver, developer tool, or programmatic connection method.
    - Load sample data using our sample data sets, data migration tools, or by generating your own synthetic data.

    Atlas also supports getting started via the Atlas CLI, Kubernetes Operator, or a preferred Infrastructure-as-Code (IaC) tool. Install the Atlas CLI using `brew install mongodb-atlas` and configure your database with `atlas setup`.

    If migrating from another database, Atlas provides [migration resources](https://www.mongodb.com/docs/tools-and-connectors/?tck=mongodb_ai_chatbot) to help streamline the process.

    For a fast hands-on experience, try this [20-minute interactive tutorial](https://www.mongodb.com/docs/guides/?tck=mongodb_ai_chatbot) - no setup needed. It explains inserting, querying, and deleting data using a browser-based IDE.

    - [Step by Step Guide](https://www.mongodb.com/docs/guides/?tck=mongodb_ai_chatbot)
    - [Migrate or Import Data](https://www.mongodb.com/docs/atlas/import/?tck=mongodb_ai_chatbot)
    - [MongoDB Migrators, Tools, and Connectors](https://www.mongodb.com/docs/tools-and-connectors/?tck=mongodb_ai_chatbot)
    - [Generate Synthetic Data](https://www.mongodb.com/docs/atlas/synthetic-data/?tck=mongodb_ai_chatbot)
  references:
    - url: https://mongodb.com/docs/manual/tutorial/getting-started/
      title: Getting Started with MongoDB
    - url: https://www.mongodb.com/docs/guides/
      title: MongoDB Guides
    - url: https://www.mongodb.com/docs/atlas/import/
      title: Migrate or Import Data
    - url: https://www.mongodb.com/docs/tools-and-connectors/
      title: Migrators, Tools, and Connectors
    - url: https://www.mongodb.com/docs/atlas/synthetic-data/
      title: Generate Synthetic Data
- answer: MongoDB is a document database designed for ease of application
    development and scaling. You can store hierarchical structured data in
    documents, which are similar to JSON objects. MongoDB is available in
    different environments, including MongoDB Atlas (a fully managed service in
    the cloud), MongoDB Enterprise (a subscription-based, self-managed version),
    and MongoDB Community (a free-to-use, self-managed version). It is popular
    among development teams that use agile methodologies due to its flexible
    schema approach. Let me know if you have any more questions!
  author_email: alison.huh@mongodb.com
  questions:
    - What is mongodb?
  references:
    - url: https://www.mongodb.com/docs/manual/introduction/
      title: Introduction to MongoDB - MongoDB Manual
    - url: https://mongodb.com/docs/manual/
      title: What is MongoDB? - MongoDB Manual
    - url: https://www.mongodb.com/developer/products/mongodb/everything-you-know-is-wrong
      title: Everything You Know About MongoDB is Wrong!
    - url: https://www.mongodb.com/why-use-mongodb
      title: Why Use MongoDB and When to Use It?
    - url: https://mongodb.com/docs/develop-applications"
      title: Develop Applications - MongoDB Documentation
- answer: |
    To update multiple documents in a MongoDB collection, use the `updateMany`
    method. Using the `updateMany` method, you can search for and edit the
    documents you want to update in one operation.

    Here's an example that uses the `updateMany()` method in the MongoDB shell:


    ```

    use sample_mflix // Use the sample_mflix database

    db.movies.updateMany(
      { rated: "G" }, 
      { $set: { random_review: `After viewing I am ${ 100 * Math.random() }% more satisfied with life.` }
    )

    ```


    This example updates all G-rated movies in the `movies` collection by adding a new `random_review` field.

    Specific syntax and usage may vary depending on the programming language and driver you use. Let me know if you have any more questions!
  author_email: alison.huh@mongodb.com
  questions:
    - updateMany
  references:
    - url: https://mongodb.com/docs/compass/current/documents/modify-multiple/
      title: Modify Multiple Documents - MongoDB Compass
    - url: https://mongodb.com/docs/drivers/node/current/usage-examples/updateMany/
      title: Update Multiple Documents - Node.js Driver
    - url: https://mongodb.com/docs/manual/tutorial/update-documents/
      title: Update Documents - MongoDB Manual
    - url: https://mongodb.com/docs/drivers/java/sync/current/usage-examples/updateMany/
      title: Update Multiple Documents - Java Sync Driver
- answer: |
    To count the number of documents in a MongoDB collection that match a
    specified query, use the `countDocuments()` method.

    Here's an example that uses the `countDocuments()` method in the MongoDB shell:


    ```js


    use sample_mflix // Use the sample_mflix database

    db.movies.countDocuments( countries: "Canada" )


    ```


    This example counts the number of movies from Canada in the `movies` collection.

    Specific syntax and usage may vary depending on the programming language and driver you are using. Let me know if you have any more questions!
  author_email: alison.huh@mongodb.com
  questions:
    - countDocuments
  references:
    - url: https://mongodb.com/docs/drivers/node/current/usage-examples/count/
      title: Count Documents - Node.js Driver
    - url: https://mongodb.com/docs/drivers/java/sync/current/usage-examples/count/
      title: Count Documents - Java Sync Driver
    - url: https://mongodb.com/docs/manual/reference/method/db.collection.countDocuments/
      title: db.collection.countDocuments() - MongoDB Manual
- author_email: jessica.roberts@mongodb.com
  questions:
    - how to query
    - How do I run a query?
  answer: |
    The **MongoDB Query API** is the mechanism that you use to query your data in your preferred language.

    The Query API comprises two ways to query data in MongoDB:
    - CRUD Operations
    - Aggregation pipelines

    You can run queries in MongoDB Atlas using several different methods:

    - **MongoDB Atlas UI:** Use Data Explorer to run basic `find()` queries directly from a browser.
    - **MongoDB Shell (mongosh):** Run queries from the command line using MongoDB’s interactive shell.
    - **MongoDB Compass:** Use the GUI to build and run queries, including aggregations and filters. Take advantage of Compass’ Natural Language Query Generation to quickly draft queries from plain English, and the Aggregation Pipeline Builder to visually construct and test complex pipelines stage by stage.
    - **MongoDB Drivers:** Programmatically run queries in an app using drivers for languages like Node.js, Python, Java, Go, and more.

    In general, you can use the Query API to:

    - Perform ad hoc queries to explore your data.
    - Transform data using aggregation.
    - Join documents across collections.
    - Run graph and geospatial queries.
    - Perform full-text and semantic search.
    - Use indexes to optimize query performance.
    - Create materialized views and analyze time series data.
  references:
    - url: https://www.mongodb.com/docs/guides/
      title: Step by Step CRUD Guide
    - url: https://www.mongodb.com/docs/manual/query-api/
      title: How to Use the Query API
    - url: https://www.mongodb.com/docs/manual/core/aggregation-pipeline/
      title: Aggregation Pipeline Manual
    - url: https://learn.mongodb.com/courses/crud-operations-in-mongodb
      title: 90-minute CRUD Operations video tutorial

- answer: |
    To remove documents, use the `deleteOne()` or `deleteMany()` method. If you
    use the `deleteMany()` method, you can search for and remove multiple
    documents in one operation. If you use the `deleteOne()` method and multiple
    documents in the collection match your query, MongoDB removes only the first
    matching document. 

    Here's an example that uses the `deleteMany()` method in the MongoDB shell: 


    ``` 

    use sample_mflix // Use the sample_mflix database

    db.movies.deleteMany( { rated: "R" } )

    ```


    This example removes all R-rated movies in the `movies` collection`.

    Specific syntax and usage may vary depending on the programming language and driver you are using. Let me know if you have any more questions!
  author_email: alison.huh@mongodb.com
  questions:
    - how to delete data
  references:
    - url: https://www.mongodb.com/docs/manual/reference/command/delete
      title: delete - MongoDB Manual
    - url: https://www.mongodb.com/docs/manual/tutorial/remove-documents/
      title: Delete Documents
    - url: https://mongodb.com/docs/guides/crud/delete/
      title: Delete Data from MongoDB
    - url: https://www.mongodb.com/developer/products/mongodb/cheat-sheet
      title: MongoDB Cheat Sheet
    - url: https://mongodb.com/docs/drivers/node/current/usage-examples/deleteMany/
      title: Delete Multiple Documents
    - url: https://mongodb.com/docs/mongodb-vscode/delete-document-playground/
      title: Delete Documents - MongoDB for VS Code
- answer: |
    To remove one document, use the `deleteOne()` method. 

    Here's an example that uses the `deleteOne()` method in the MongoDB shell: 


    ```

    use sample_mflix // Use the sample_mflix database 

    db.movies.deleteOne( { title: "Titanic" } )

    ```


    This example removes one document in the `movies` collection that's titled `"Titanic"`. If there are multiple movies that are titled `"Titanic"` in the collection, MongoDB removes only the first document with the title.

    Specific syntax and usage may vary depending on the programming language and driver you are using. Let me know if you have any more questions!
  author_email: alison.huh@mongodb.com
  questions:
    - delete one document
  references:
    - url: https://www.mongodb.com/docs/manual/tutorial/remove-documents/#delete-only-one-document-that-matches-a-condition
      title: Delete Documents
    - url: https://mongodb.com/docs/guides/crud/delete/
      title: Delete Data from MongoDB
    - url: https://www.mongodb.com/developer/products/mongodb/cheat-sheet
      title: MongoDB Cheat Sheet
    - url: https://mongodb.com/docs/drivers/node/current/usage-examples/deleteOne/
      title: Delete a Document
    - url: https://mongodb.com/docs/mongodb-vscode/delete-document-playground/
      title: Delete Documents
- answer: |
    To backup a MongoDB database, we recommend using one of the following
    methods: 

    - Back up with Atlas  - Back up with MongoDB Cloud Manager or Ops Manager  - Back up with `mongodump` - Back up with filesystem snapshots

    For example, to backup your database using the `mongodump` command-line tool, run the following command: 


    ```

    mongodump --uri "mongodb+srv://<username>:<password>@<cluster-url>/test?retryWrites=true&w=majority" --out /path/to/backup/directory

    ```


    The sample command specifies a connection string for the MongoDB instance you want to backup and an output directory. Make sure to replace `<username>`, `<password>`, `<cluster-url>`, and `/path/to/backup/directory` with your own MongoDB deployment credentials and desired backup directory.

    `mongodump` is suitable for small deployments and seeding data, but it is not recommended for large systems or sharded clusters. For production-quality backup and recovery strategies, we recommend using coordinated backup and restore alternatives such as MongoDB Atlas, MongoDB Cloud Manager, or MongoDB OpsManager.

    Let me know if you have any more questions!
  author_email: alison.huh@mongodb.com
  questions:
    - How do I backup a MongoDB database?
  references:
    - url: https://www.mongodb.com/docs/manual/core/backups/
      title: MongoDB Backup Methods
    - url: https://www.mongodb.com/docs/atlas/backup-restore-cluster/
      title: Back Up, Restore, and Archive Data
    - url: https://www.mongodb.com/docs/manual/tutorial/backup-and-restore-tools/
      title: Back Up and Restore with MongoDB Tools
    - url: https://learn.mongodb.com/learn/course/mongodb-database-administrator-tools/lesson-2-backup-tools/learn
      title: "MongoDB Database Administrator Tools - Lesson 2: Backup Tools - Learn"
- answer: |
    Aggregation in MongoDB refers to the process of performing complex data
    operations on a collection of documents. It involves running all the
    documents in a collection through a series of stages called an aggregation
    pipeline. The aggregation pipeline allows you to filter and transform
    documents, collect summary data about groups of related documents, and
    perform other advanced data operations.

    The MongoDB Aggregation Framework provides a powerful set of operators and stages that you can use to construct aggregation pipelines. These pipelines consist of multiple stages, where each stage performs a specific operation on the input documents and passes the results to the next stage.

    By using the built-in aggregation operators available in MongoDB, you can perform analytics on your data without having to move it to another platform. This provides a significant advantage in terms of performance and cost, as the data processing is done directly within MongoDB.

    The aggregation framework is conceptually similar to a pipeline in the Unix command line, where documents flow through multiple stages, and each stage performs a specific operation on the data. This allows you to build complex data processing workflows and perform powerful analytics on your MongoDB data.

    If you have any more questions, feel free to ask!
  author_email: alison.huh@mongodb.com
  questions:
    - What is aggregation in MongoDB?
    - aggregation framework
  references:
    - url: https://www.mongodb.com/docs/atlas/atlas-ui/agg-pipeline/
      title: Run Aggregation Pipelines
    - url: https://www.mongodb.com/docs/manual/core/aggregation-pipeline/
      title: Aggregation Pipeline
    - url: https://www.mongodb.com/developer/products/mongodb/introduction-aggregation-framework
      title: Introduction to the MongoDB Aggregation Framework
    - url: https://www.mongodb.com/docs/atlas/device-sdks/sdk/react-native/app-services/query-mongodb/#aggregation-operations
      title: Query MongoDB - React Native SDK
- answer: |
    The MongoDB Shell is an interactive JavaScript interface that allows you to
    interact with your MongoDB database. You can use it to perform CRUD
    operations, run queries, and manage your databases and collections. 

    To use the MongoDB Shell:

    1. Install the MongoDB Shell on your machine. You can find installation
      instructions for different operating systems in the MongoDB documentation.

    2. Once you install the MongoDB Shell, open your terminal or command prompt.

    3. Connect to your MongoDB deployment using your connection string. The
      connection string will vary depending on the type of deployment you're
      connecting to. For example, to connect to an Atlas deployment, you can run
      the following command:

      ```sh

      mongosh "mongodb+srv://mycluster.abcd1.mongodb.net/myFirstDatabase" --apiVersion 1 --username <username> --password <password>

      ```

      Make sure to replace `<username>`, `<password>` and connection string with
      your own MongoDB deployment credentials. 

    4. After you connect, you can interact with your data. You can perform CRUD
      operations like inserting documents, querying documents, updating documents,
      and deleting documents. You can also run aggregation pipelines to perform
      complex data operations.

      Some common operations in the MongoDB shell include:

      - Insert documents: `db.collection.insertOne()` or `db.collection.insertMany()`
      - Query documents: `db.collection.find()`
      - Update documents: `db.collection.updateOne()`, `db.collection.updateMany()`, or `db.collection.replaceOne()`
      - Delete documents: `db.collection.deleteOne()` or `db.collection.deleteMany()`
      - Run aggregation pipelines: `db.collection.aggregate()`

      You can find more information and examples for these operations in the
      MongoDB documentation.

    5. To exit the MongoDB Shell, run the `exit` command.

    I hope this helps! Let me know if you have any more questions.
  author_email: alison.huh@mongodb.com
  questions:
    - mongoshell
  references:
    - url: https://learn.mongodb.com/learn/course/the-mongodb-shell/lesson-1-installing-and-connecting-to-the-mongodb-shell/learn
      title:
        "The MongoDB Shell - Lesson 1: Installing and Connecting to the MongoDB
        Shell - Learn"
    - url: https://www.mongodb.com/developer/products/mongodb/introduction-to-modern-databases-mongodb-academia
      title: MongoDB Academia - Introduction to Modern Databases
    - url: https://mongodb.com/docs/mongodb-shell/
      title: Welcome to MongoDB Shell (mongosh)
    - url: https://www.mongodb.com/developer/products/mongodb/schema-design-anti-pattern-massive-number-collections
      title: Massive Number of Collections
    - url: https://www.mongodb.com/developer/products/mongodb/designing-developing-analyzing-new-mongodb-shell
      title: Designing, Developing, and Analyzing with the New MongoDB Shell
- answer: |
    To remove an object from an array in MongoDB, use the `$pull` operator in an
    update operation. The `$pull` operator removes all elements from an array
    that match a specified condition.

    Here's an example of how to remove an object from an array in the MongoDB shell using the `$pull` operator:


    ```js

    // Assuming you have already connected to a MongoDB database, insert a document that includes a `fruits` array db.collection.insertOne( { _id: 1, fruits: [ { name: "apple" }, { name: "banana" }, { name: "orange" } ] } )

    // Specify the condition to match the array object you want to remove condition = { "fruits": {"$elemMatch": {"name": "apple"}}}

    // Use the $pull operator in the update operation update = { "$pull": { "fruits": { "name": "apple" } } }

    // Update the document in the collection db.collection.updateOne(condition, update)

    ```


    In this example, we want to remove the object with the name "apple" from the "fruits" array. We specify the condition using the `$elemMatch` operator to match the object with the name "apple". Then, we use the `$pull` operator in the update operation to remove the matched object from the array. Please note that you need to replace "fruits" with the actual name of your array and "apple" with the value you want to remove.

    Alternatively, you can use the `$pop` operator to remove the first or last element in an array: 


    ```js

    // Assuming you have already connected to the MongoDB database and inserted a document that includes a `fruits` array db.collection.insertOne( { _id: 1, fruits: [ { name: "apple" }, { name: "banana" }, { name: "orange" } ] } )

    // Specify which element you want to remove from your array. This example removes the last element.  db.collection.updateOne( { _id: 1 }, { $pop: { fruits: 1 } } )

    ```


    I hope this helps! Let me know if you have any more questions.
  author_email: alison.huh@mongodb.com
  questions:
    - how to remove object in array in mongoDB
  references:
    - url: https://mongodb.com/docs/manual/reference/operator/update/pop/
      title: $pop
    - url: https://mongodb.com/docs/manual/reference/operator/update/pull/
      title: $pull
- answer: |
    To create a database in MongoDB, you can use the `use` command in the
    MongoDB shell: 

    1. Open the MongoDB shell by running the `mongosh` command in your terminal
      or command prompt. 

    2. Once you're in the MongoDB shell, you can switch to a specific database
      or create a new one using the `use` command. For example, to create a
      database named "mydatabase", you can run the following command: `use
      mydatabase`.

    3. If the database doesn't exist, the `use` command creates a new database
      with the specified name. The newly created database will not be visible in
      the shell until you insert data into it. If the database exists, MongoDB
      switches to that database.

    Let me know if you have any more questions!
  author_email: alison.huh@mongodb.com
  questions:
    - how to create a database
  references:
    - url: https://www.mongodb.com/docs/mongodb-shell/run-commands/#create-a-new-database-and-collection
      title: Run Commands
    - url: https://www.mongodb.com/docs/atlas/atlas-ui/databases/
      title: Create, View, and Drop Databases
    - url: https://www.mongodb.com/docs/compass/current/databases/
      title: Databases
- answer: |
    The `distinct` command in MongoDB is used to find the distinct values for a
    specified field across a single collection. It returns a document that
    contains an array of the distinct values. Here is the syntax for the
    `distinct` command:


    ```js

    db.runCommand(
       {
         distinct: "<collection>",
         key: "<field>",
         query: <query>,
         readConcern: <read concern document>,
         collation: <collation document>,
         comment: <any>
       }
    )

    ```


    - `<collection>`: The name of the collection to query for distinct values.

    - `<field>`: The field for which to return distinct values.

    - `<query>` (optional): A query that specifies the documents from which to retrieve the distinct values.

    - `<read concern document>` (optional): Specifies the read concern.

    - `<collation document>` (optional): Specifies the collation for string comparison.

    - `<comment>` (optional): Any additional comment.


    For example, to find the distinct values for the field `sku`, embedded in the `item` field, from the documents whose `dept` is equal to `"A"`, you can use the following command:


    ```js

    db.runCommand({ distinct: "inventory", key: "item.sku", query: { dept: "A" } })

    ```


    This command will return a document with a field named `values` that contains the distinct `sku` values.

    Let me know if you have any more questions!
  author_email: matt.maville@mongodb.com
  questions:
    - distinct
  references:
    - url: https://mongodb.com/docs/manual/reference/command/distinct/
      title: distinct
    - url: https://mongodb.com/docs/manual/reference/method/db.collection.distinct/
      title: db.collection.distinct()
- answer: >+
    To find unique values in your fields in MongoDB, you can use the `distinct`
    command or the aggregation framework.

    The `distinct` command is used to find the distinct values for a specified field across a single collection. It returns a document that contains an array of the distinct values.

    Here is the syntax for the `distinct` command:


    ```js

    db.runCommand(
      {
        distinct: "<collection>",
        key: "<field>",
        query: <query>,
        readConcern: <read concern document>,
        collation: <collation document>,
        comment: <any>
      }
    )

    ```


    - `<collection>`: The name of the collection to query for distinct values.

    - `<field>`: The field for which to return distinct values.

    - `<query>` (optional): A query that specifies the documents from which to retrieve the distinct values.

    - `<read concern document>` (optional): Specifies the read concern.

    - `<collation document>` (optional): Specifies the collation for string comparison.

    - `<comment>` (optional): Any additional comment.

    For example, to find the distinct values for the field language in the persons collection, you can use the following command:


    ```js

    db.runCommand({ distinct: "persons", key: "language" })

    ```


    This command will return a document with a field named `values` that contains the distinct `language` values.

    Using the aggregation framework: You can also use the aggregation framework to find unique values in your fields. Here is an example pipeline that retrieves a list of distinct values for the language field from the `persons` collection:


    ```js

    var pipeline = [
      { $group: { _id: "$language" } },
      { $sort: { _id: 1 } },
      { $project: { language: "$_id", _id: 0 } }
    ];

    db.persons.aggregate(pipeline);

    ```


    This pipeline groups the documents by the `language` field, sorts the distinct values alphabetically, and projects the result to include only the `language` field.

    I hope this helps! Let me know if you have any more questions.

  author_email: matt.maville@mongodb.com
  questions:
    - how to find unique values in my fields
  references:
    - url: https://www.mongodb.com/docs/manual/reference/command/distinct/
      title: distinct
    - url: https://www.practical-mongodb-aggregations.com/examples/foundational/distinct-values.html
      title: Distinct List Of Values
    - url: https://www.practical-mongodb-aggregations.com/guides/advanced-arrays.html
      title: Advanced Use Of Expressions For Array Processing
- answer: |
    The `maxBsonObjectSize` is a configuration parameter in MongoDB that
    determines the maximum size of a BSON document. However, it is not
    recommended to change this value as it is set to a reasonable default value
    and altering it can have unintended consequences.

    In addition, starting from MongoDB version 4.4, the `maxBsonObjectSize` configuration parameter is no longer configurable. It is fixed at 16 megabytes, which is the maximum BSON document size.

    If you have a specific use case that requires handling larger documents, you can consider using the GridFS API, which allows you to store and retrieve files that exceed the maximum BSON document size.

    Let me know if there's anything else I can help you with!
  author_email: matt.maville@mongodb.com
  questions:
    - how to change maxBsonObjectSize
  references:
    - url: https://www.mongodb.com/docs/manual/reference/limits/#bson-documents
      title: MongoDB Limits and Thresholds
    - url: https://www.mongodb.com/developer/products/mongodb/under-used-features
      title: Three Underused MongoDB Features
    - url: https://www.mongodb.com/docs/manual/core/gridfs/
      title: GridFS
- answer: |
    To update a document in MongoDB, you can use the update operators provided
    by MongoDB. The update operators allow you to modify field values in a
    document.

    Here is an example of how to update a document using the `$set` update operator in Node.js:


    ```js

    import { MongoClient } from "mongodb";

    const uri = "<connection string uri>";

    const client = new MongoClient(uri);

    async function run() {
      try {
        const database = client.db("sample_mflix");
        const movies = database.collection("movies");
        const filter = { title: "Random Harvest" };
        const options = { upsert: true };
        const updateDoc = {
          $set: {
            plot: `A harvest of random numbers, such as: ${Math.random()}`
          },
        };
        const result = await movies.updateOne(filter, updateDoc, options);
        console.log(
          `${result.matchedCount} document(s) matched the filter, updated ${result.modifiedCount} document(s)`,
        );
      } finally {
        await client.close();
      }
    }

    run().catch(console.dir);

    ```


    In this example, we connect to a MongoDB instance, specify the collection and the filter to identify the document to update, and use the `$set` update operator to set the value of the `plot` field. The `updateOne` method is used to update the first document that matches the filter.

    Please note that you need to replace `<connection string uri>` with the actual connection string for your MongoDB deployment.

    Let me know if you need further assistance!
  author_email: matt.maville@mongodb.com
  questions:
    - how to update document
  references:
    - url: https://mongodb.com/docs/drivers/node/current/usage-examples/updateOne/
      title: Update a Document
    - url: https://mongodb.com/docs/manual/tutorial/update-documents/
      title: Update Documents
    - url: https://www.mongodb.com/developer/languages/javascript/node-crud-tutorial-3-3-2
      title: MongoDB and Node.js 3.3.2 Tutorial - CRUD Operations
    - url: https://mongodb.com/docs/drivers/node/current/fundamentals/crud/write-operations/modify/
      title: Modify Documents
    - url: https://www.mongodb.com/developer/languages/javascript/node-crud-tutorial
      title: MongoDB and Node.js Tutorial - CRUD Operations
- answer: |
    To import data into MongoDB, you can use the `mongoimport` command-line tool
    provided by MongoDB. The `mongoimport` tool allows you to import data from
    JSON, CSV, and TSV files into MongoDB collections.

    Here are the general steps to import data using `mongoimport`:

    1. Make sure you have the `mongoimport` tool installed. If you have MongoDB
      installed on your workstation, you may already have `mongoimport` installed.
      Otherwise, you can follow the instructions on the MongoDB website to install
      it.

    2. Prepare your data file in either JSON, CSV, or TSV format. Ensure that
      the data is structured correctly according to the chosen format.

    3. Open a terminal or command prompt and navigate to the directory where the
      `mongoimport` tool is located.

    4. Run the `mongoimport` command with the appropriate options to specify the
      data file, the target MongoDB database and collection, and any other desired
      options. For example, to import a JSON file into a collection named
      "myCollection" in the "myDatabase" database, you can use the following
      command:


      ```sh

      mongoimport --db myDatabase --collection myCollection --file 'data.json'

      ```


      Replace `myDatabase` with the name of your target database, `myCollection`
      with the name of your target collection, and `data.json` with the path to
      your data file.

      You can also specify additional options such as `--jsonArray` if your JSON
      file contains an array of documents.

    5. Wait for the import process to complete. You should see output indicating
      the number of documents imported.

    Please note that the specific command and options may vary depending on your operating system and the version of MongoDB you are using. For more detailed information and examples, you can refer to the MongoDB documentation on how to import data into MongoDB with mongoimport.

    Let me know if you need further assistance!
  author_email: matt.maville@mongodb.com
  questions:
    - how to import data
  references:
    - url: https://learn.mongodb.com/learn/course/importing-csv-data-into-mongodb/learning-byte/learn
      title: "Learning Byte: Importing CSV Data into MongoDB"
    - url: https://www.mongodb.com/developer/products/mongodb/mongoimport-guide
      title: How to Import Data into MongoDB with mongoimport
    - url: https://mongodb.com/docs/guides/crud/insert/
      title: Insert Data into MongoDB
- answer: |
    MongoDB provides various operators that can be used in update operations, query operations, projection operations, and aggregation operations. These operators allow you to perform specific actions on your data.

    For update operations, you can use update operators such as `$set`, `$unset`, `$inc`, `$push`, `$pull`, and many more. These operators are used with methods like `db.collection.updateMany()` and `db.collection.findAndModify()`.

    For query operations, you can use query operators such as `$eq`, `$ne`, `$gt`, `$lt`, `$in`, `$regex`, and many more. These operators are used to filter documents based on specific criteria.

    For projection operations, you can use projection operators such as `$project`, `$match`, `$group`, `$sort`, `$limit`, and many more. These operators are used to shape the output of your queries.

    For aggregation operations, you can use aggregation operators such as `$sum`, `$avg`, `$min`, `$max`, `$group`,`$project`, and many more. These operators are used to perform complex data transformations and calculations.

    Please note that the specific operators available may vary depending on the version of MongoDB you are using. If you need more detailed information on the operators and their syntax, you can refer to the MongoDB documentation on update operators, query and projection operators, and aggregation operators.

    Let me know if you have any further questions!
  author_email: matt.maville@mongodb.com
  questions:
    - operators in mongodb
  references:
    - url: https://mongodb.com/docs/manual/reference/operator/aggregation/
      title: Aggregation Operators
    - url: https://mongodb.com/docs/manual/reference/operator/query/
      title: Query and Projection Operators
    - url: https://mongodb.com/docs/manual/release-notes/6.0/
      title: Release Notes for MongoDB 6.0
    - url: https://mongodb.com/docs/manual/reference/operator/update/
      title: Update Operators
- answer: |
    To find documents with a projection in MongoDB, you can use the `find()`
    method along with the `projection` parameter. The `projection` parameter
    allows you to specify which fields you want to include or exclude in the
    returned documents.

    Here is an example of how to use the `find()` method with a projection in MongoDB:


    ```js

    db.collection.find({}, { field1: 1, field2: 1 })

    ```


    In this example, `db.collection` is the name of your collection, and `{}` is an empty query filter, which means it will match all documents in the collection. The second parameter `{ field1: 1, field2: 1 }` specifies the fields to include in the returned documents. The value `1` indicates that the field should be included, while `0` would exclude the field.

    Please note that the specific syntax and available options for projections may vary depending on the version of MongoDB you are using. If you need more detailed information, you can refer to the MongoDB documentation on the `find()` method and projections.

    Let me know if you have any further questions!
  author_email: matt.maville@mongodb.com
  questions:
    - how do I find with a projection
  references:
    - url: https://mongodb.com/docs/manual/reference/method/db.collection.find/
      title: db.collection.find()
    - url: https://mongodb.com/docs/manual/reference/method/db.collection.findOne/
      title: db.collection.findOne()
    - url: https://mongodb.com/docs/manual/reference/method/db.collection.findOneAndDelete/
      title: db.collection.findOneAndDelete()
    - url: https://mongodb.com/docs/manual/reference/method/db.collection.findOneAndReplace/
      title: db.collection.findOneAndReplace()
    - url: https://mongodb.com/docs/manual/reference/method/db.collection.findOneAndUpdate/
      title: db.collection.findOneAndUpdate()
- answer: |
    To find a document by ID in MongoDB, you can use a query that matches the
    `_id` field with the specified ID value. MongoDB automatically stores each
    document's ID as an `ObjectId` value in the document's `_id` field.

    Here is an example of how to find a document by ID using the Node.js driver:


    ```js

    import { MongoClient, ObjectId } from "mongodb";

    // Replace the uri string with your MongoDB deployment's connection string. const uri = "<connection string uri>";

    const client = new MongoClient(uri);

    async function run() {
      try {
        const database = client.db("yourDatabase");
        const collection = database.collection("yourCollection");
        // Specify the ID value you want to search for
        const id = new ObjectId("yourID");
        // Query for the document with the specified ID
        const query = { _id: id };
        // Execute the query
        const document = await collection.findOne(query);
        // Print the document
        console.log(document);
      } finally {
        await client.close();
      }
    }

    run().catch(console.dir);

    ```


    In this example, you need to replace `<connection string uri>` with your MongoDB deployment's connection string, `"yourDatabase"` with the name of your database, `"yourCollection"` with the name of your collection, and `"yourID"` with the ID value you want to search for.

    Please note that the `ObjectId` class is imported from the `mongodb` package, and you need to install it using a package manager like npm or yarn.

    Let me know if you have any further questions!
  author_email: matt.maville@mongodb.com
  questions:
    - how can i find a document by id
  references:
    - url: https://mongodb.com/docs/atlas/app-services/functions/mongodb/read/
      title: Read Data from MongoDB Atlas - Functions
    - url: https://mongodb.com/docs/drivers/node/current/usage-examples/findOne/
      title: Find a Document
    - url: https://mongodb.com/docs/manual/core/csfle/quick-start/
      title: Quick Start
- answer: |
    A connection string in MongoDB describes the host and options for connecting
    to a MongoDB database. It is used to connect to a MongoDB cluster and work
    with the data. MongoDB provides two formats for the connection string: a
    standard format and a DNS seed list format. The standard format is used to
    connect to standalone clusters, replica sets, or sharded clusters. The DNS
    seed list format allows for more flexibility in deployment and the ability
    to change servers without reconfiguring clients.

    The connection string typically includes the following components:

    - MongoDB prefix: Identifies the string as a MongoDB connection string.

    - Username and password: Credentials for accessing the database.

    - Host and optional port number: Specifies the location of the database. If
      the port number is not specified, MongoDB defaults to port 27017.

    - Options: Additional settings such as connection timeout, TLS/SSL,
      connection pooling, and read/write concerns.

    To locate the connection string for an Atlas cluster, you can go to the Atlas dashboard, click on the "Connect" button for your cluster, and select the option to connect your application. The connection string will be provided in the modal box that appears.

    Let me know if you have any further questions!
  author_email: alison.huh@mongodb.com
  questions:
    - connection string
  references:
    - url: https://learn.mongodb.com/learn/course/connecting-to-a-mongodb-database/lesson-1-using-mongodb-connection-strings/learn
      title:
        "Connecting to a MongoDB Database - Lesson 1: Using MongoDB Connection
        Strings - Learn"
    - url: https://mongodb.com/docs/manual/reference/connection-string/
      title: Connection Strings
    - url: https://mongodb.com/docs/drivers/csharp/current/fundamentals/connection/connect/
      title: Connection Guide - MongoDB C# Driver
- answer: |
    MongoDB provides the following authentication mechanisms for securing
    connections to the database:

    - SCRAM-SHA-256

    - SCRAM-SHA-1

    - MONGODB-AWS

    - X.509

    - Kerberos (GSSAPI/SSPI) (Enterprise Edition only)

    - LDAP (PLAIN) (Enterprise Edition only)

    - LDAP Proxy Authentication (Enterprise Edition and MongoDB Atlas only)

    - OpenID Connect Authentication (Enterprise Edition only)

    Let me know if you have any further questions!
  author_email: alison.huh@mongodb.com
  questions:
    - how many authentication methods for MongoDB?
  references:
    - url: https://mongodb.com/docs/ruby-driver/current/reference/authentication/
      title: Authentication - Ruby Driver
    - url: https://mongodb.com/docs/manual/core/authentication/
      title: Authentication - MongoDB Manual
    - url: https://mongodb.com/docs/drivers/node/current/fundamentals/authentication/mechanisms/
      title: Authentication Mechanisms - Node.js Driver
    - url: https://mongodb.com/docs/drivers/node/current/fundamentals/authentication/
      title: Authentication
    - url: https://mongodb.com/docs/drivers/csharp/current/fundamentals/authentication/
      title: Authentication Mechanisms - C# Driver
- answer: |
    To set up a replica set in MongoDB, you can follow these general steps:

    1. Install MongoDB on each system that will be part of your replica set. You
      can refer to the MongoDB installation tutorials for detailed instructions.

    2. Start multiple mongod processes on different ports, each with a different
      dbpath, but using the same replica set name. For example:


      ```sh

      mongod --port 27017 --dbpath /data/db0 --replSet rs0

      mongod --port 27018 --dbpath /data/db1 --replSet rs0

      mongod --port 27019 --dbpath /data/db2 --replSet rs0

      ```


      This starts each instance as a member of a replica set named `rs0`, each running on a distinct port.

    3. Connect to one of the `mongod` instances through the MongoDB shell
      (`mongosh`). You can specify the instance by specifying its port number. For
      example:


      ```sh

      mongosh --port 27017

      ```


    4. In the MongoDB shell, use the `rs.initiate()` command to initiate the
      replica set. You can create a replica set configuration object and pass it
      to `rs.initiate()`. For example:


      ```js

      rsconf = {
        _id: "rs0",
        members: [
          { _id: 0, host: "localhost:27017" },
          { _id: 1, host: "localhost:27018" },
          { _id: 2, host: "localhost:27019" }
        ]
      }

      rs.initiate(rsconf)

      ```


      This initializes the replica set with the specified configuration.

    5. You can display the current replica set configuration by issuing the `rs.conf()` command in the MongoDB shell. For example:


      ```js

      rs.conf()

      ```


      This will show you the current configuration of the replica set.

    Please note that these steps are general guidelines and may vary depending on your specific environment and requirements. For more detailed information, you can refer to the MongoDB documentation on deploying a replica set.
  author_email: jeffrey.allen@mongodb.com
  questions:
    - how to setup replica cluster
  references:
    - url: https://pymongo.readthedocs.io/en/stable/examples/high_availability.html
      title: High Availability and PyMongo
    - url: https://mongodb.com/docs/manual/tutorial/deploy-replica-set/
      title: Deploy a Replica Set
    - url: https://mongodb.com/docs/manual/tutorial/deploy-replica-set-for-testing/
      title: Deploy a Replica Set for Testing and Development
    - url: https://learn.mongodb.com/learn/course/replication-in-mongodb/lesson-6-deploying-a-replica-set-in-a-mongodb-deployment/learn
      title:
        "Replication in MongoDB - Lesson 6: Deploying a Replica Set in a MongoDB
        Deployment - Learn"
    - url: https://www.mongodb.com/docs/manual/tutorial/convert-standalone-to-replica-set/
      title: Convert a Standalone mongod to a Replica Set
- answer: |
    Sure! Here's an example of how to use the `$and` operator in MongoDB:

    Suppose you have a collection called `inventory` with documents that have the fields `price` and `qty`. You want to find all documents where the `price` is not equal to `1.99` and the `qty` field exists.

    You can use the `$and` operator to combine these conditions in a single query. Here's the example query:


    ```js

    db.inventory.find({ $and: [ { price: { $ne: 1.99 } }, { price: { $exists: true } } ] })

    ```


    This query selects all documents in the `inventory` collection where the `price` field value is not equal to `1.99` and the `price` field exists.

    You can rewrite the query with an implicit `AND` operation that combines the operator expressions for the `price` field:


    ```js

    db.inventory.find({ price: { $ne: 1.99, $exists: true } })

    ```


    This query achieves the same result.

    I hope this example helps! Let me know if you have any further questions.
  author_email: jeffrey.allen@mongodb.com
  questions:
    - give me an example of how to use the $and operator
  references:
    - url: https://mongodb.com/docs/manual/reference/operator/query/and/
      title: $and
    - url: https://mongodb.com/docs/manual/reference/operator/aggregation/and/
      title: $and (aggregation)
    - url: https://mongodb.com/docs/atlas/atlas-sp/sp-agg-validate/
      title: $validate - MongoDB Atlas
    - url: https://mongodb.com/docs/manual/tutorial/query-documents/
      title: Query Documents
- answer: |
    Sure! Here's an example of how to use the `$in` operator in MongoDB:

    Suppose you have a collection called `inventory` with documents that have the fields `item` and `quantity`. You want to find all documents where the quantity is either 5 or 15.

    You can use the `$in` operator to achieve this. Here's the example query:


    ```js

    db.inventory.find({ quantity: { $in: [5, 15] } })

    ```


    This query selects all documents in the `inventory` collection where the value of the `quantity` field is either 5 or 15.

    The result of this query would be the documents that match the condition:


    ```js

    { item: 'Erasers', quantity: 15, tags: [ 'school', 'home' ] }, { item: 'Books', quantity: 5, tags: [ 'school', 'storage', 'home' ] }

    ```


    I hope this example helps! Let me know if you have any further questions.
  author_email: jeffrey.allen@mongodb.com
  questions:
    - give me an example of how to use the $in operator
  references:
    - url: https://mongodb.com/docs/manual/reference/operator/query/in/
      title: $in
    - url: https://learn.mongodb.com/learn/course/mongodb-crud-operations-insert-and-find-documents/lesson-2-finding-documents-in-a-mongodb-collection/learn
      title:
        "MongoDB CRUD Operations: Insert and Find Documents - Lesson 2: Finding
        Documents in a MongoDB Collection - Learn"
    - url: https://mongodb.com/docs/manual/reference/operator/aggregation/in/
      title: $in (aggregation)
    - url: https://mongodb.com/docs/atlas/atlas-search/in/
      title: in
- answer: |
    To connect to MongoDB using mongosh, you can follow these steps:

    1. Open a terminal window.

    2. Run the `mongosh` command.

    3. Connect to your MongoDB cluster by providing the necessary connection
      details, such as the hostname, port, and authentication credentials. You can
      find these details in your MongoDB Atlas dashboard or your local MongoDB
      deployment.

    4. Once connected, you can start interacting with your MongoDB deployment
      using `mongosh` commands.

    Here is an example of connecting to a MongoDB cluster using `mongosh`:


    ```sh

    mongosh --host <hostname> --port <port> --username <username> --password <password> --authenticationDatabase <authDatabase>

    ```


    Replace `<hostname>`, `<port>`, `<username>`, `<password>`, and `<authDatabase>` with the appropriate values for your MongoDB deployment.

    Please note that you need to have `mongosh` installed on your machine before you can use it. You can refer to the MongoDB documentation for detailed instructions on installing `mongosh` for your operating system.

    Let me know if you have any further questions!
  author_email: jeffrey.allen@mongodb.com
  questions:
    - how to connect to mongodb through mongosh
  references:
    - url: https://mongodb.com/docs/atlas/includes/steps-fts-divide-results-tutorial-run-query-shell/
      title: Connect to your cluster in mongosh.
    - url: https://mongodb.com/docs/atlas/includes/steps-avs-rrf-shell-query/
      title: Connect to your cluster using mongosh.
    - url: https://mongodb.com/docs/atlas/atlas-search/tutorial/multilingual-tutorial/
      title: How to Run Multilingual Atlas Search Queries
    - url: https://mongodb.com/docs/manual/tutorial/install-mongodb-community-with-docker/
      title: Install MongoDB Community with Docker
    - url: https://mongodb.com/docs/manual/tutorial/install-mongodb-enterprise-with-docker/
      title: Install MongoDB Enterprise with Docker
    - url: https://www.mongodb.com/docs/manual/tutorial/create-users/
      title: Create a User
- answer: |
    Certainly! Here's an example of a MongoDB aggregation pipeline that uses
    `$lookup` and `$match` stages:


    ```js

    db.orders.aggregate([
       {
          $lookup: {
             from: "restaurants",
             localField: "restaurant_name",
             foreignField: "name",
             as: "matches"
          }
       },
       {
          $match: {
             "matches.beverages": "soda"
          }
       }
    ])

    ```


    In this example, the pipeline first performs a `$lookup` stage to join the `orders` collection with the `restaurants` collection. It matches documents where the `restaurant_name` field in the `orders` collection matches the `name` field in the `restaurants` collection. The matching documents from the `restaurants` collection are then added to an array field called `matches` in the output documents.

    The pipeline then proceeds to a `$match` stage to filter the documents based on the `beverages` field in the `matches` array. In this case, it filters for documents where the `beverages` array contains the value "soda".

    Please note that this is just an example, and you may need to modify the pipeline to suit your specific use case.
  author_email: jeffrey.allen@mongodb.com
  questions:
    - Can you please give me a mongodb aggregation pipeline which does a $lookup
      and $match
  references:
    - url: https://mongodb.com/docs/manual/reference/operator/aggregation/lookup/
      title: $lookup (aggregation)
    - url: https://mongodb.com/docs/manual/reference/operator/aggregation/graphLookup/
      title: $graphLookup (aggregation)
    - url: https://www.mongodb.com/docs/manual/reference/operator/aggregation/match/
      title: $match (aggregation)
- answer: |
    To maximize uptime with MongoDB, you can follow these best practices:

    1. Use Replica Sets: MongoDB's replica sets provide high availability by
      automatically maintaining multiple copies of your data across different
      servers. If one server goes down, another server in the replica set can take
      over, minimizing downtime.

    2. Implement Sharding: Sharding allows you to distribute your data across
      multiple servers, known as shards. This helps distribute the load and
      ensures that your application remains available even if one shard goes down.

    3. Perform Rolling Maintenance: MongoDB allows you to perform maintenance
      tasks, such as upgrading to a new version or making changes to replica set
      membership, without downtime. By leveraging replica sets, you can perform
      rolling maintenance, where one node at a time is taken offline for
      maintenance while the others continue to serve requests.

    4. Use MongoDB Atlas: MongoDB Atlas is a fully managed database service that
      automates many maintenance tasks for you, including rolling upgrades and
      backups. It provides built-in monitoring and automated failover to maximize
      uptime.

    5. Monitor and Alert: Set up monitoring and alerting systems to proactively
      detect and respond to any issues that may impact uptime. MongoDB provides
      tools like MongoDB Cloud Manager and MongoDB Atlas that offer monitoring and
      alerting capabilities.

    By following these best practices, you can ensure high availability and maximize uptime with MongoDB.
  author_email: jeffrey.allen@mongodb.com
  questions:
    - How to maximize uptime with MongoDB?
  references:
    - url: https://learn.mongodb.com/learn/course/self-managed-upgrades-maintenance/lesson-1-zero-downtime-maintenance-with-a-mongodb-deployment/learn
      title: "Self-Managed Upgrades & Maintenance - Lesson 1:  Zero Downtime
        Maintenance with a MongoDB Deployment - Learn"
    - url: https://mongodb.com/docs/manual/administration/production-notes/
      title: Production Notes
    - url: https://learn.mongodb.com/learn/course/mongodb-atlas-upgrades-maintenance/lesson-1-zero-downtime-maintenance-with-atlas/learn
      title: "MongoDB Atlas Upgrades & Maintenance - Lesson 1: Zero Downtime
        Maintenance with Atlas - Learn"
    - url: https://www.mongodb.com/developer/products/mongodb/paginations-why-choose-mongodb
      title: "Paginations 2.0: Why I Would Choose MongoDB"
    - url: https://learn.mongodb.com/learn/course/self-managed-upgrades-maintenance/conclusion/learn
      title: Self-Managed Upgrades & Maintenance - Conclusion  - Learn
- answer: |
    Yes, you can reset a MongoDB database user's password. To reset your
    password, you need to follow these steps:

    1. Connect to the `mongod` or `mongos` as a user with appropriate
      privileges.

    2. Use the `db.updateUser()` method to update the password and custom data.

    Here is an example of how to change the password and custom data using the `db.updateUser()` method:


    ```

    use test

    db.updateUser(
       "user123",
       {
          pwd: passwordPrompt(),  // or cleartext password
          customData: { title: "Senior Manager" }
       }
    )

    ```


    When prompted, enter the new password. Make sure to replace `"user123"` with your actual username and customize the custom data as needed.

    Please note that the provided example assumes you are using the MongoDB shell. If you are using a different MongoDB client, the syntax may vary.

    Let me know if you need any further assistance!
  author_email: jeffrey.allen@mongodb.com
  questions:
    - Can i reset my password
    - Password reset
  references:
    - url: https://mongodb.com/docs/atlas/security/manage-your-mongodb-atlas-account/
      title: Manage Your MongoDB Atlas Account
    - url: https://mongodb.com/docs/manual/tutorial/change-own-password-and-custom-data/
      title: Change Your Password and Custom Data
    - url: https://learn.mongodb.com/learn/course/mongodb-atlas-backup-recovery/lesson-1-back-up-and-recover-an-atlas-free-tier/learn
      title:
        "MongoDB Atlas Backup & Recovery - Lesson 1: Back Up and Recover an Atlas
        Free Tier - Learn"
- answer: |
    MongoDB Atlas Search allows you to quickly build fine-grained search
    functionality into your applications. Consider using Atlas Search for the
    following reasons:

    1. Relevance-based search: Atlas Search uses advanced search algorithms to
      provide highly relevant search results based on the search query and the
      data in your collections. This functionality ensures that users can easily
      find the information they are looking for.

    2. Easy integration: Atlas Search seamlessly integrates with your existing
      MongoDB collections, allowing you to leverage the same MongoDB Query API
      that you are already familiar with. There's no need to maintain a separate
      search engine or synchronize data between different systems.

    3. Flexible search capabilities: With Atlas Search, you can perform complex
      searches across text, date, and numeric fields. It supports various search
      operators like text, wildcard, autocomplete, range, and moreLikeThis, giving
      you the flexibility to build powerful search queries.

    4. Efficient indexing: Atlas Search allows you to create search indexes on
      specific fields in your collections, improving search performance and
      reducing the time it takes to retrieve search results. You can also
      customize the search index using field mappings to make the search more
      efficient and relevant.

    5. Real-time updates: Atlas Search automatically updates the search index as
      your data changes, ensuring that search results are always up to date.
      This functionality is especially useful for applications that require
      real-time search.

    These are just a few of the benefits of using Atlas Search. To learn more about Atlas Search and how to implement it in your applications, see MongoDB's Atlas Search documentation.
  author_email: jeffrey.vincent@mongodb.com
  questions:
    - Why should I use Atlas Search?
    - How do I get started with Atlas Search or Vector Search?
  references:
    - url: https://www.mongodb.com/developer/products/atlas/atlas-search-soccer
      title: Atlas Search is a Game Changer!
    - url: https://www.mongodb.com/developer/products/atlas/building-e-commerce-content-catalog-atlas-search
      title: Building an E-commerce Content Catalog with Atlas Search
    - url: https://www.mongodb.com/developer/products/atlas/atlas-search-java
      title: Using Atlas Search from Java
    - url: https://learn.mongodb.com/learn/course/mongodb-atlas-search/conclusion/learn
      title: MongoDB Atlas Search - Conclusion - Learn
- answer: >
    MongoDB and Oracle are both popular database management systems, but they
    have some key differences. Here are a few of the main differences between
    MongoDB and Oracle:

    1. Data Model: MongoDB is a NoSQL database that uses a flexible document
      model, storing data in JSON-like documents. Oracle is a relational database
      that uses tables with rows and columns to store data.

    2. Scalability: MongoDB is designed to scale horizontally, meaning it can
      distribute data across multiple servers to handle large amounts of traffic.
      Oracle is typically scaled vertically, relying on more powerful hardware to
      handle increased workloads.

    3. Schema: MongoDB has a flexible schema, allowing documents in a collection
      to have different structures. This can be beneficial for agile development
      and evolving data requirements. Oracle has a rigid schema, requiring
      predefined tables and columns, which can provide more data consistency and
      integrity.

    4. Transactions: Oracle has a long history of supporting ACID transactions,
      which ensure data consistency and integrity. MongoDB introduced
      multi-document ACID transactions in version 4.0, allowing multiple
      operations to be grouped together and either committed or rolled back as a
      single unit.

    5. Query Language: MongoDB uses a query language called MongoDB Query
      Language (MQL), which is similar to SQL but specifically designed for
      querying JSON-like documents. Oracle uses SQL, a widely adopted standard
      for querying relational databases.

    6. Community and Ecosystem: Both MongoDB and Oracle have large and active
      communities, but they differ in terms of ecosystem and tooling. MongoDB
      has a rich ecosystem of libraries, frameworks, and cloud services built
      around it, while Oracle has a long-standing presence in the enterprise
      market with a wide range of tools and integrations.

    It's important to note that the choice between MongoDB and Oracle depends on specific use cases, requirements, and preferences. Each database has its strengths and weaknesses, and the decision should be based on factors such as data structure, scalability needs, transactional requirements, and development ecosystem.
  author_email: jeffrey.vincent@mongodb.com
  questions:
    - Mongodb vs oracle
  references:
    - url: https://learn.mongodb.com/learn/course/mongodb-for-sql-experts/conclusion/lesson
      title: MongoDB for SQL Experts - Conclusion - Lesson
    - url: https://learn.mongodb.com/learn/course/mongodb-for-sql-experts/lesson-1-traditional-rdbms-vs-mongodb-databases/learn
      title: "MongoDB for SQL Experts - Lesson 1: Traditional RDBMS vs. MongoDB
        Databases - Learn"
    - url: https://www.mongodb.com/developer/products/mongodb/modernizing-rdbms-schemas-mongodb-document
      title: Modernizing RDBMS Schemas With a MongoDB Document Model
    - url: https://www.mongodb.com/why-use-mongodb
      title: Why Use MongoDB and When to Use It?
    - url: https://www.mongodb.com/developer/products/mongodb/top-4-reasons-to-use-mongodb
      title: The Top 4 Reasons Why You Should Use MongoDB
- answer: |
    The best place to start learning about MongoDB is the MongoDB University [Introduction to MongoDB course](https://learn.mongodb.com/learning-paths/introduction-to-mongodb). If you are interested in completing a certification, you can take Introduction to MongoDB as part of a developer learning path with the programming language of your choice. This will prepare you for the [MongoDB Associate Developer](https://learn.mongodb.com/pages/mongodb-associate-developer-exam) certification.
  author_email: emily.pope@mongodb.com
  questions:
    - What should I learn first on MongoDB University?
  references:
    - url: https://learn.mongodb.com/learning-paths/introduction-to-mongodb
      title: "Introduction to MongoDB"
    - url: https://learn.mongodb.com/pages/mongodb-associate-developer-exam
      title: "MongoDB Associate Developer Exam"
- answer: |
    To learn how MongoDB fits into the generative AI space, you can start with the [Building GenAI Applications with MongoDB Learning Badge Path](https://learn.mongodb.com/learning-paths/building-genai-apps-learning-badge-path) on MongoDB University. This includes the [Atlas Vector Search](https://learn.mongodb.com/learn/learning-path/atlas-vector-search) course, which will give you a high level introduction to the GenAI space, then help you get started with MongoDB Atlas Vector Search. You'll learn the differences between semantic search and full text search, and how to combine them into hybrid search. Next, you'll learn how to build a RAG application with Langchain and Python, then explore how to create a sophisticated ingestion pipeline. And, be sure to complete the quiz at the end to earn your MongoDB Learning Badge and receive a Credly badge to demonstrate your learning.
  author_email: emily.pope@mongodb.com
  questions:
    - How do I learn about AI and vector search on MongoDB University?
  references:
    - url: https://learn.mongodb.com/learning-paths/building-genai-apps-learning-badge-path
      title: "Building GenAI Applications with MongoDB Learning Badge Path"
    - url: https://learn.mongodb.com/learn/learning-path/atlas-vector-search
      title: "Atlas Vector Search Learning Path"
    - url: https://www.mongodb.com/docs/atlas/atlas-vector-search/vector-search-overview/
      title: "Atlas Vector Search Overview"
    - url: https://www.mongodb.com/docs/atlas/atlas-vector-search/rag/
      title: "Retrieval-Augmented Generation (RAG) with Atlas Vector Search"
- answer: |
    Our student benefits, including free certification, are available through the GitHub Student Developer Pack. 
    To be eligible for free certification, students must: 
    1. Be enrolled in the [GitHub Student Developer Pack](https://education.github.com/pack)
    2. Verify their student status by entering their GitHub information at [mongodb.com/students](https://mongodb.com/students?tck=mongodb_ai_chatbot)
    3. Complete and pass all courses associated with a [MongoDB University learning path](https://learn.mongodb.com/pages/certification-learning-paths?tck=mongodb_ai_chatbot)
    For more information on our student benefits, please review the [Student Resource Guide](https://drive.google.com/file/d/1chxgN-5pi1LXXmZSvhXXr8bBWlWfba2j/view) or take a look at the FAQ section on [MongoDB for Students](https://www.mongodb.com/students).
  author_email: aiyana.mcconnell@mongodb.com
  questions:
    - How do I get free certification through MongoDB for Students?
  references:
    - url: https://education.github.com/pack
      title: "GitHub Student Developer Pack"
    - url: https://mongodb.com/students
      title: "MongoDB Student Pack"
    - url: https://learn.mongodb.com/pages/certification-learning-paths
      title: "Create a Multi-Cloud Cluster with MongoDB Atlas"
    - url: (https://drive.google.com/file/d/1chxgN-5pi1LXXmZSvhXXr8bBWlWfba2j/view
      title: "MongoDB for Students Resource Guide"
- answer: |
    Please allow our team 2-3 business days to process your application. MongoDB operates Monday-Friday 8am-5pm Eastern Standard Time and is not open on weekends or US holidays. 

    Our team responds to all free certification voucher applications. If you did not receive an email with your free certification voucher, then you received an email explaining why your application was rejected and what steps you need to take to receive your free voucher. 

    Please be sure to check your spam folder for an email containing your voucher or containing instructions on how to receive your voucher.

    If you haven’t received an email with your free certification voucher, the issue is usually one of the following:
    - We were unable to find a MongoDB University account associated with the email address provided in the application. Because of this, we were unable to verify that you have completed a MongoDB University learning path.
    - The GitHub username provided in the application does not match any successful verifications from mongodb.com/students. Because of this, we are unable to verify whether you have active GitHub Student Developer Pack benefits. You also may have provided us with the wrong GitHub username or not yet entered your GitHub credentials at mongodb.com/students. 
    - You did not complete a MongoDB University learning path. Students must complete a MongoDB University learning path to be eligible for a free certification voucher through MongoDB for Students.
  author_email: aiyana.mcconnell@mongodb.com
  questions:
    - I submitted an application for a free certification voucher through MongoDB for Students and I haven’t received a voucher yet.
  references:
    - url: https://mongodb.com/students
      title: "MongoDB Student Pack"
    - url: https://education.github.com/pack
      title: "GitHub Student Developer Pack"
    - url: https://learn.mongodb.com/pages/certification-learning-paths
      title: "Create a Multi-Cloud Cluster with MongoDB Atlas"
    - url: (https://drive.google.com/file/d/1chxgN-5pi1LXXmZSvhXXr8bBWlWfba2j/view
      title: "MongoDB for Students Resource Guide"
- answer: |
    Our student benefits, including free certification and $50 in Atlas credits, are available through the GitHub Student Developer Pack. If you are already successfully registered for the GitHub Student Developer Pack, you can access MongoDB student benefits by entering your GitHub credentials at mongodb.com/students. 

    If you have questions regarding MongoDB student benefits, please review the information in our Student Resource Guide and FAQ section on mongodb.com/students. If you have questions regarding the GitHub Student Developer Pack, please contact GitHub support.
  author_email: aiyana.mcconnell@mongodb.com
  questions:
    - How do I receive benefits through MongoDB for Students?
  references:
    - url: https://mongodb.com/students
      title: "MongoDB Student Pack"
    - url: https://education.github.com/pack
      title: "GitHub Student Developer Pack"
    - url: https://learn.mongodb.com/pages/certification-learning-paths
      title: "Create a Multi-Cloud Cluster with MongoDB Atlas"
    - url: https://drive.google.com/file/d/1chxgN-5pi1LXXmZSvhXXr8bBWlWfba2j/view
      title: "MongoDB for Students Resource Guide"
- answer: |
    MongoDB offers a variety of free resources specifically curated to support educators in equipping students with modern database knowledge. 

    Through the [MongoDB for Educators](https://mongodb.com/academia?tck=mongodb_ai_chatbot) program, verified professors, teachers and other educators can access a range of valuable materials and benefits at including:
    - Slide-based lecture materials to seamlessly integrate MongoDB into your existing curriculum
    - $500 in MongoDB Atlas credits to support hands-on learning with our cloud-hosted database platform. 
    - Stay current with industry standards and showcase your dedication to ongoing professional development with MongoDB certification. 

    All of our educator resources are completely free and signing up for MongoDB for Educators only takes a few minutes. To learn more or to register for the program, go to [mongodb.com/academia](https://mongodb.com/academia?tck=mongodb_ai_chatbot).
  author_email: aiyana.mcconnell@mongodb.com
  questions:
    - I'm an educator and I'm interested in teaching MongoDB to my students/in my classes.
    - I'm a professor and I'm interested in teaching MongoDB to my students/in my classes.
    - I'm a teacher and I'm interested in teaching MongoDB to my students/in my classes.
    - I'm an instructor and I'm interested in teaching MongoDB to my students/in my classes.
  references:
    - url: https://mongodb.com/academia
      title: "MongoDB for Educators"
    - url: https://drive.google.com/file/d/1W_i_DkOeROY9raLesiEbS5PCasLAvlRb/view?usp=sharing
      title: "How to Register for MongoDB for Educators"
- answer: |
    MongoDB Certification Exams cost $150 USD

    Students and Educators can get a free exam by completing a Learning Path through the student and educator programs.
  author_email: carol.dibert@mongodb.com
  questions:
    - How much is a MongoDB Certification?
    - How much does a MongoDB Certification cost?
  references:
    - url: https://learn.mongodb.com/pages/certification-program
      title: "MongoDB Certification Program"
    - url: https://mongodb.com/students
      title: "MongoDB Student Pack"
    - url: https://mongodb.com/academia
      title: "MongoDB for Educators"
- answer: |
    To reschedule your exam, simply navigate to your learner dashboard at learn.mongodb.com and select the "Manage" button for the exam you wish to reschedule. You will be taken to our proctoring partner's site where you can reschedule to a date/time that works better for you.
  author_email: carol.dibert@mongodb.com
  questions:
    - How do I reschedule my certification exam?
  references:
    - url: https://learn.mongodb.com/
      title: "MongoDB University"
- answer: |
    To prepare for any of the MongoDB Certification Exams, we recommend you navigate to the exam of your choice from our certification landing page. Each exam page contains a exam details, a study guide, and a set of practice questions.  author_email: carol.dibert@mongodb.com
  author_email: carol.dibert@mongodb.com
  questions:
    - How do I prepare for a MongoDB Certification Exam?
  references:
    - url: https://learn.mongodb.com/pages/certification-program
      title: "MongoDB Certification Program"
- answer: |
    If you need extra time for your certificaiton due to a learning disability or because English is a second language for you, please purchase and schedule your exam and then send a support ticket to [certification@mongodb.com](mailto:certification@mongodb.com) requesting extra time.
  author_email: carol.dibert@mongodb.com
  questions:
    - How do I request extended time for my certification exam?
  references:
    - url: mailto:certification@mongodb.com
      title: "Send an email to the certification team"
- answer: |
    If you require a refund for your MongoDB Certification Exam, please submit your request to [certification@mongodb.com](mailto:certification@mongodb.com) and our support team will do their best to accommodate you.
  author_email: carol.dibert@mongodb.com
  questions:
    - How do I request a refund for my certification exam?
  references:
    - url: mailto:certification@mongodb.com
      title: "Send an email to the certification team"
- answer: |
    To register for your exam, log into your learner account on [learn.mongodb.com](learn.mongodb.com) and simply select the exam from the certification page, register, complete the transaction process. Note: If you are using a coupon, please enter the code at checkout.

    Once you’ve registered and completed the transaction process, you’ll be sent to our online proctoring partner, Examity, to complete your tester profile and schedule your exam. Our exams are offered 24hrs a day, 7days a week.
  author_email: carol.dibert@mongodb.com
  questions:
    - How do I register for a certification exam?
  references:
    - url: https://learn.mongodb.com/
      title: "MongoDB Certification Program"
- answer: |
    MongoDB Learning Badges are a new type of free credential offered through MongoDB University. Unlike high-stakes certifications, which cover a large breadth and depth of subjects, these badges are focused on specific topics, making them easier and quicker to earn.
  author_email: carol.dibert@mongodb.com
  questions:
    - Where do I learn about MongoDB Learning Badges?
  references:
    - url: https://learn.mongodb.com/pages/learner-badges
      title: "MongoDB Learning Badges"
- answer: |
    MongoDB Learning Badges are non-proctored tests that allow you to prove your knowledge on shorter, more targeted topics regardless of your role. MongoDB Certifications are proctored exams that are specific to job roles and cover a large breadth and depth.
  author_email: carol.dibert@mongodb.com
  questions:
    - What is the difference between a MongoDB Learning Badge and a MongoDB Certification?
  references:
    - url: https://learn.mongodb.com/pages/learner-badges
      title: "MongoDB Learning Badges"
    - url: https://learn.mongodb.com/pages/certification-program
      title: "MongoDB Certification Program"
- answer: |
    MongoDB Atlas offers several product and pricing options:

    - **Atlas Free Tier**: You can start with the free tier, which provides 512MB of storage and shared resources. This is suitable for learning and initial development.
    - **Atlas Flex Tier**: This option offers flexible pricing at $0.011/hour, with a $30 monthly limit, suitable for development and testing.
    - **Atlas Dedicated Tier**: For production applications, dedicated clusters start at $57/month, with options to scale storage, RAM, and CPU based on your needs.

    Community Edition is available for free if you prefer to self-manage your database locally or in a hybrd/private cloud.

    Enterprise Advanced is also available with a license for on-premises deployment or the cloud, while providing several capabilities unavailable in Community Edition.

    For more detailed information on pricing and customizing your deployment, you may want to [contact MongoDB sales](https://www.mongodb.com/company/contact) or [explore the pricing options further](https://www.mongodb.com/pricing).
  author_email: bill.mitchell@mongodb.com
  questions:
    - How much does MongoDB cost?
    - How much will MongoDB Atlas cost for my data storage needs?
    - How does MongoDB's pricing model accommodate scaling applications?
    - What is the price difference between using MongoDB's Enterprise advanced versus Atlas?
    - How can I optimize my budget when transitioning my company's databases to MongoDB Atlas?
    - I need to talk to sales regarding enterprise pricing options for Atlas?
    - Are there additional charges for using MongoDB's advanced features in Atlas?
    - Help me generate a quote for a MongoDB Atlas deployment tailored for a startup environment?
    - Help me estimate the monthly cost of using MongoDB Atlas given my anticipated workload and storage requirements?"
  references:
    - url: https://www.mongodb.com/company/contact
      title: Contact Us
    - url: https://www.mongodb.com/pricing
      title: Pricing
    - url: https://www.mongodb.com/cloud/atlas/register
      title: Atlas Registration
    - url: https://www.mongodb.com/try/download/community
      title: Community Edition Download

- author_email: jessica.roberts@mongodb.com
  questions:
    - What is MongoDB Atlas?
  answer: >
    MongoDB Atlas is a fully managed cloud database service that simplifies
    deploying, scaling, and managing MongoDB databases in the cloud. It
    eliminates infrastructure setup and database management by automating
    critical tasks such as provisioning, backups, scaling, and performance
    optimization. Atlas database supports multi-cloud deployments on AWS, Azure,
    and Google Cloud, enabling global scalability and resilience. Atlas is
    designed to ensure engineering teams focus on building and innovating
    applications rather than managing database infrastructure.
  references:
    - url: https://www.mongodb.com/docs/atlas/
      title: What is MongoDB Atlas?
- author_email: jessica.roberts@mongodb.com
  questions:
    - What types of use cases are best for MongoDB?
  answer: |
    MongoDB is a versatile, flexible, and enterprise-ready general purpose database platform. It supports a wide range of use cases—from traditional applications to modern, AI-powered workloads like search and vector search.

    Here are some common use cases where MongoDB excels:

    - Search and vector search (no extensions required)
    - AI-driven applications
    - High-performance applications
    - Hybrid/multi-cloud deployments
    - Agile and collaborative development
    - Complex or evolving data structures
  references:
    - url: https://www.mongodb.com/solutions/use-cases
      title: MongoDB Use Cases
    - url: https://www.mongodb.com/atlas
      title: MongoDB Atlas
    - url: https://www.mongodb.com/docs/atlas/architecture/current/solutions-library/
      title: Atlas Solutions Library
- author_email: jessica.roberts@mongodb.com
  questions:
    - What’s the difference between MongoDB Atlas and Community Edition?
  answer: |
    MongoDB Atlas is a fully managed, cloud-based database and associated data services. This means infrastructure management, including provisioning compute, storage, and networking, is handled automatically, along with backups, patches, upgrades, scaling, and failover. These tasks are fully automated and handled without user intervention. 

    MongoDB Community Edition is the source-available, free-to-use version of MongoDB’s document database. You are responsible for installing, configuring, maintaining, and scaling the database, either on your local machine or on your own cloud infrastructure. MongoDB Community Edition is ideal for learning, experimenting, and building applications in a self-managed environment where you want full control over your deployment.

    Key differences:

    * MongoDB Atlas is managed by MongoDB and runs in the cloud, while MongoDB Community Edition is self-managed and can run locally or in the cloud.  
    * MongoDB Atlas automates infrastructure provisioning, backups, scaling, and maintenance, whereas Community Edition requires you to handle these capabilities on your own.  
    * Atlas is ideal for most use cases that require cloud deployment and management, while Community Edition is often chosen for local development or when you want full control over your deployment. 

    Let me know if you want more details about either option!
  references:
    - url: https://www.mongodb.com/products/self-managed/community-edition
      title: MongoDB Community Edition
    - url: https://mongodb.com/docs/atlas/
      title: MongoDB Atlas Documentation
    - url: https://www.mongodb.com/atlas
      title: MongoDB Atlas
- author_email: jessica.roberts@mongodb.com
  questions:
    - How do I deploy a free cluster on MongoDB Atlas?
  answer: |
    You can create free clusters through the Atlas CLI, Atlas user interface, or the Atlas administration API. Step-by-step instructions for each option can be found in the [documentation](https://www.mongodb.com/docs/atlas/tutorial/deploy-free-tier-cluster/?tck=mongodb_ai_chatbot).

    Most users like to start with the Atlas UI, and follow [these steps](https://www.mongodb.com/docs/guides/atlas/cluster/?tck=mongodb_ai_chatbot):

    1. Log in to your MongoDB Atlas account.
    2. Go to the Overview page for your project.
    3. Click the Create button to create a cluster.
    4. Select the M0 option.
    5. Select your preferred provider (AWS, GCP, or Azure)
    6. Select your preferred region (only regions that support M0 free clusters will be shown)
    7. Specify a name for your cluster
    8. Click Create to deploy the cluster.

    Once you deploy your cluster, it can take up to 10 minutes for your cluster to provision and become ready to use. After deployment:

    - Create a database user by specifying a username and password.
    - Add your IP address to the IP access list to allow connections.
    - Click Finish and Close, then Go to Overview.

    Atlas Free clusters provide a small-scale development environment to host your data and test concepts. Free clusters never expire and provide access to a subset of Atlas features and functionality. You can only deploy one free cluster per Atlas project.
  references:
    - url: https://www.mongodb.com/docs/atlas/tutorial/deploy-free-tier-cluster/
      title: Deploy a Free Cluster
- author_email: jessica.roberts@mongodb.com
  questions:
    - What are the differences between Atlas cluster types?
  answer: |
    MongoDB Atlas offers different cluster types to support a range of use cases. Choosing the right MongoDB Atlas cluster tier for your application involves considering the application's workload, data size, and performance needs. Key considerations include:

    * **Free Tier (M0):** Best for learning and exploring, with [limited resources](https://www.mongodb.com/docs/atlas/reference/free-shared-limitations/?tck=mongodb_ai_chatbot).  
    * **Flex:** Ideal for development and testing, offering the lowest cost option with certain [feature limitations](https://www.mongodb.com/docs/atlas/reference/flex-limitations/#std-label-atlas-flex-limitations?tck=mongodb_ai_chatbot).  
    * **Dedicated (M10 and M20):** Suitable for pre-production and small, non-critical workloads. These tiers use shared vCPUs and support replica set deployments offering fully featured access to Atlas.  
    * **Dedicated (M30+):** Recommended for performance-critical and high-traffic production workloads, supporting both replica sets and sharded clusters with fully featured access to Atlas and dedicated vCPUs.

    Clusters can always be scaled up from any tier as requirements expand. If unsure, MongoDB recommends starting with a lower tier and [monitoring performance](https://www.mongodb.com/docs/atlas/architecture/current/monitoring-alerts/?tck=mongodb_ai_chatbot) before adjusting. For all dedicated tiers, use auto-scaling to adjust cluster tier and storage as workloads evolve.
  references:
    - url: https://www.mongodb.com/docs/atlas/manage-clusters/#select-cluster-tier
      title: Select Cluster Tier
    - url: https://www.mongodb.com/docs/atlas/sizing-tier-selection/
      title: Atlas Cluster Sizing and Tier Selection
    - url: https://www.mongodb.com/docs/atlas/reference/free-shared-limitations/
      title: Atlas M0 (Free Cluster) Limits
    - url: https://www.mongodb.com/docs/atlas/reference/flex-limitations/#std-label-atlas-flex-limitations
      title: Atlas Flex Limitations
    - url: https://www.mongodb.com/docs/atlas/architecture/current/monitoring-alerts/
      title: Guidance for Atlas Monitoring and Alerts
- author_email: jessica.roberts@mongodb.com
  questions:
    - How can I migrate data to MongoDB?
  answer: |
    If you're migrating data from a relational database then you have several options.

    **MongoDB Relational Migrator:**

    This tool is specifically designed to simplify the migration process from relational databases like Oracle, MySQL, SQL Server, PostgreSQL, and more to MongoDB. It provides features to map and model relational schema into a MongoDB schema using a schema visualizer. You can perform one-time snapshot migrations or continuous synchronization using Change Data Capture (CDC). It also offers generative AI capabilities to convert SQL queries, stored procedures, and views into MongoDB-compatible code. Relational Migrator supports integration with Apache Kafka and Confluent Cloud for large-scale migrations.

    **Export and Import using mongoimport:**

    You can export data from a relational database to a file format like JSON, CSV, or TSV. Then you can use the `mongoimport` tool to import the exported data into MongoDB collections. This method is suitable for straightforward data imports where the data is already in a compatible format.

    **Custom Scripts and Bulk Write Operations:**

    You can write custom scripts using MongoDB drivers in various programming languages to read data from a relational database and insert it into MongoDB using bulk write operations. This approach allows for fine-grained control over the data transformation and migration process.

    These options provide flexibility depending on specific needs, whether a simple data import is required or a comprehensive migration with schema transformation and code conversion.
  references:
    - url: https://www.mongodb.com/docs/atlas/manage-clusters/#select-cluster-tier
      title: Select Cluster Tier
- author_email: jessica.roberts@mongodb.com
  questions:
    - How do I load data into MongoDB Atlas?
    - How do I load sample data in Atlas?
  answer: |
    To load sample data into your MongoDB Atlas cluster, follow [these steps](https://www.mongodb.com/docs/guides/atlas/sample-data/):

    Using the Atlas UI:

    1. Log in to your Atlas account.  
    2. Go to the Clusters page for your project.  
    3. Locate the cluster where you want to load sample data.  
    4. Click the Ellipses (...) button for your cluster.  
    5. Click Load Sample Dataset.  
    6. In the dialog, choose which datasets to load or select all available sample datasets.  
    7. Confirm and wait for the data to load. (This usually takes a few minutes.)

    Using the Atlas CLI:

    Run the following command, replacing `<clusterName>` with your cluster's name:

    ```
    atlas clusters sampleData load <clusterName>
    ```

    You can monitor the status of the load job with:

    ```
    atlas clusters sampleData describe <id>
    atlas clusters sampleData watch <id>
    ```

    **Note:** You must have Project Owner access to load sample data. Sample datasets include collections like movies, restaurants, weather, and more.
  references:
    - url: https://www.mongodb.com/docs/guides/atlas/sample-data/
      title: Load Sample Data Guide
    - url: https://www.mongodb.com/docs/tools-and-connectors/
      title: MongoDB Migrators, Tools, and Connectors
    - url: https://www.mongodb.com/docs/atlas/import/
      title: Migrate or Import Data
    - url: https://www.mongodb.com/docs/atlas/synthetic-data/
      title: Generate Synthetic Data
- author_email: jessica.roberts@mongodb.com
  questions:
    - How do I get my connection string to connect to my cluster?
  answer: |
    To connect to a MongoDB Atlas cluster, follow these steps:

    1. Go to the Clusters page in the Atlas UI and click **“Connect”** on the cluster you want to access.

    2. Choose a connection method, including any of the following:
       - **MongoDB Drivers:** Programmatically connect using a driver for your preferred language (e.g., Node.js, Python, Java, C#, Go, Rust, and more).
       - **MongoDB Compass:** A GUI for querying, analyzing, and visualizing data.
       - **MongoDB Shell (mongosh):** An interactive command-line shell for MongoDB.
       - **Model Context Protocol (MCP) Server:** Manage deployments and provide database context for AI code generation directly within Cursor, Claude, VS Code, or Windsurf.

    3. Follow the connection instructions, which primarily involve copying a connection string and using it in a tool or app.

    For command-line, Infrastructure as Code, and automated orchestration:

    - [MongoDB Atlas CLI](https://www.mongodb.com/docs/atlas/cli/current/?tck=mongodb_ai_chatbot): Script and manage Atlas resources from a terminal.  
    - [MongoDB Atlas Terraform Provider](https://registry.terraform.io/providers/mongodb/mongodbatlas/latest/docs?tck=mongodb_ai_chatbot): Manage infrastructure with code.  
    - [MongoDB Kubernetes Operator](https://www.mongodb.com/docs/atlas/operator/current/?tck=mongodb_ai_chatbot): Automate deployments in Kubernetes.

    ## Common Connection Errors & Fixes

    **If Authentication to the Cluster Failed**

    - Use your MongoDB database user credentials (not your Atlas login information).
    - Remove angle brackets (`<` and `>`) from the password.
    - If using `mongodb://`, ensure `authSource` is correctly specified.
    - Encode special characters like `?` and `#` in your password.
    - Confirm the authentication mechanism matches the server config.

    **If Unable to Establish a Connection**

    - Ensure port `27017` is open on the network/firewall.
    - Check the IP Access List settings in Atlas.
    - Verify VPC settings if connecting from a private network.
    - For DNS errors, double-check your connection string.
  references:
    - url: https://www.mongodb.com/docs/tools-and-connectors/
      title: MongoDB Migrators, Tools, and Connectors
    - url: https://www.mongodb.com/docs/atlas/troubleshoot-connection/
      title: Troubleshoot Atlas Connections

- author_email: jessica.roberts@mongodb.com
  questions:
    - How do I get started with the MongoDB MCP Server?
    - How can I interact with my database using natural language?
  answer: |
    The MongoDB Model Context Protocol (MCP) Server allows you to interact with your MongoDB data and deployments from AI clients using natural language, like Claude, VSCode, Cursor, and Windsurf. It works with any MongoDB deployment, including Atlas, Community Edition, and Enterprise Advanced.

    **Configure the MCP Server**

    There are multiple ways to configure and use the MongoDB MCP Server in your AI client. To use the MongoDB MCP server, you must have the following:

    - An Atlas cluster or a self-hosted MongoDB deployment.

    - Any [MCP client](https://modelcontextprotocol.io/clients).

    - Node.js version 20.19.0 or later.

    Complete the steps in the [MongoDB MCP Server GitHub repository quick start](https://github.com/mongodb-js/mongodb-mcp-server) to get started.

    Most MCP clients require a configuration file to be created or modified to add the MCP server. The configuration file syntax can be different across clients. Please refer to the following links for the latest expected syntax:

    - [Windsurf](https://docs.windsurf.com/windsurf/getting-started)
    - [VSCode](https://code.visualstudio.com/docs/copilot/chat/mcp-servers)
    - [Claude Desktop](https://modelcontextprotocol.io/quickstart/user#claude-desktop)
    - [Cursor](https://docs.cursor.com/en/context/mcp)

    After configuring the MCP Server, use it to interact with your MongoDB data from your AI client. To verify the server is running, check in your AI client that the list of MCP tools includes the MongoDB MCP tools.
  references:
    - url: https://www.mongodb.com/docs/mcp-server/get-started/?deployment-type=atlas
      title: Get Started with the MongoDB MCP Server

- author_email: jessica.roberts@mongodb.com
  questions:
    - How do I create an aggregation?
  answer: |
    You can create and run aggregations in MongoDB using several different tools depending on the workflow:

    - **MongoDB Compass (recommended):** A GUI with the Aggregation Pipeline Builder that enables building, testing, and visualizing each stage of an aggregation.
    - **MongoDB Atlas UI:** Use the Aggregation tab in the Data Explorer to build and run pipelines in the browser.
    - **MongoDB Shell (mongosh):** Write aggregation queries manually using the $aggregate method.
    - **MongoDB Drivers:** Run aggregations in application code using the driver for your language (Node.js, Python, Java, etc.).

    If you are just getting started with aggregations in MongoDB, Compass' Aggregation Pipeline Builder lets you build queries stage-by-stage, making complex logic easier to develop, debug, and understand.
  references:
    - url: https://learn.mongodb.com/courses/fundamentals-of-data-transformation
      title: Fundamentals of Data Transformation
    - url: https://www.mongodb.com/docs/manual/aggregation/
      title: Aggregation Operations

- author_email: jessica.roberts@mongodb.com
  questions:
    - What is the difference between Community Edition and Enterprise Advanced?
  answer: |
    MongoDB Community Edition is the source-available, free-to-use version of MongoDB’s document database. MongoDB Community Edition provides the core functionality of the MongoDB document database and can be hosted locally or on self-managed infrastructure. It is ideal for learning, experimenting, and building applications without the need for advanced enterprise features or dedicated support.

    MongoDB Enterprise Advanced includes all the features of the Community Edition plus additional capabilities. It offers a commercial license, advanced security features like Kerberos authentication, an in-memory storage engine, and auditing for self-managed deployments. Enterprise Advanced also provides operational and management tools, such as Ops Manager and Cloud Manager, and includes 24/7/365 technical support.

    Community Edition is suitable for developers who want a free, self-managed database, Enterprise Advanced is ideal for production applications requiring advanced features, security, and support.
  references:
    - url: https://www.mongodb.com/products/self-managed/enterprise-advanced
      title: MongoDB Enterprise Advanced
    - url: https://www.mongodb.com/products/self-managed/community-edition
      title: MongoDB Community Edition

- author_email: jessica.roberts@mongodb.com
  questions:
    - Is Community Edition free to use?
    - Is MongoDB Community Edition free to use?
  answer: |
    Yes. MongoDB Community Edition is the source-available and free-to-use edition of MongoDB. It is available under a server side public license. This license allows you to use, modify, and distribute the source code but prohibits offering MongoDB as a commercial SaaS product.
  references:
    - url: https://www.mongodb.com/products/self-managed/community-edition
      title: MongoDB Community Edition

- author_email: jessica.roberts@mongodb.com
  questions:
    - How does Atlas Stream Processing work?
  answer: |
    Atlas Stream Processing allows developers to connect to data sources like Apache Kafka, an Atlas database, or various other sources, continuously process that data using the familiar MongoDB aggregation language, and then send the results to another Atlas database, a Kafka topic, or various other sinks. This unifies the experience of working with data-in-motion and data-at-rest within a single platform.
  references:
    - url: https://www.mongodb.com/products/platform/atlas-stream-processing
      title: Atlas Stream Processing
    - url: https://www.mongodb.com/docs/atlas/atlas-stream-processing/overview/
      title: Atlas Stream Processing Overview

- author_email: jessica.roberts@mongodb.com
  questions:
    - What can I build with Atlas Stream Processing?
  answer: |
    You can build a wide range of event-driven applications and real-time features. Common use cases include building real-time personalization, powering instantaneous alerting and monitoring, detecting anomalies for fraud or risk, IoT sensor management, bolstering ETL and ELT capabilities, and creating the data foundation for AI applications.
  references:
    - url: https://www.mongodb.com/products/platform/atlas-stream-processing
      title: Atlas Stream Processing
    - url: https://www.mongodb.com/docs/atlas/atlas-stream-processing/overview/
      title: Atlas Stream Processing Overview

- author_email: jessica.roberts@mongodb.com
  questions:
    - Why use Atlas Stream Processing?
  answer: |
    The main benefits are cost, simplicity, and developer productivity. It offers a MongoDB-native way to work with streaming data, allowing developers to use the same flexible document model and familiar aggregation framework skills they already have. This eliminates the cost and complexity of learning and managing separate stream processing frameworks, allowing teams to build applications faster. In many cases, Atlas Stream Processing can help consolidate and simplify information architectures to reduce costs and speed time to insights.
  references:
    - url: https://www.mongodb.com/products/platform/atlas-stream-processing
      title: Atlas Stream Processing
    - url: https://www.mongodb.com/docs/atlas/atlas-stream-processing/overview/
      title: Atlas Stream Processing Overview

- author_email: jessica.roberts@mongodb.com
  questions:
    - How is Atlas Stream Processing different from the MongoDB Connector for Kafka?
  answer: |
    While the MongoDB Connector for Kafka is great for moving data between MongoDB and Kafka, Atlas Stream Processing is a more cost-effective, powerful, native solution that also allows you to easily **transform** that data in transit. It provides advanced stream processing functionality like data transformation with time-based windowing and simple capabilities for handling errors and late-arriving data.
  references:
    - url: https://www.mongodb.com/products/platform/atlas-stream-processing
      title: Atlas Stream Processing
    - url: https://www.mongodb.com/docs/atlas/atlas-stream-processing/overview/
      title: Atlas Stream Processing Overview

- author_email: jessica.roberts@mongodb.com
  questions:
    - Can I use Atlas Search and Atlas Vector Search locally?
  answer: |
    Yes, you can use Atlas Search locally by deploying a single-node replica set hosted on your local computer using the Atlas CLI. However, for Atlas Vector Search, you can also use local Atlas deployments created with the Atlas CLI. This allows you to test and run queries locally without needing a full Atlas cluster setup.
  references:
    - url: https://www.mongodb.com/company/blog/product-release-announcements/introducing-local-development-experience-atlas-search-vector-search-atlas-cli
      title: Introducing a Local Experience for Atlas, Atlas Search, and Atlas Vector Search with the Atlas CLI

- author_email: jessica.roberts@mongodb.com
  questions:
    - What is Atlas Vector Search?
  answer: |
    Atlas Vector Search allows you to query your data based on semantic meaning rather than just keyword matches, which helps you retrieve more relevant search results. It enables your AI-powered applications to support use cases such as semantic search, hybrid search, and generative search, including retrieval-augmented generation (RAG).

    Unlike standalone vector databases, Atlas Vector Search is built into the core database, eliminating the need to synchronize data between operational and vector databases, reducing complexity, and preventing errors.

    For independent scalability to mimic the capabilities of a vector database without requiring syncing between multiple data sources, Atlas offers search nodes for creating dedicated vector search and lexical search resources.

    You can use the Atlas UI, Atlas Administration API, Atlas CLI, mongosh, or a supported MongoDB driver to create your Atlas Vector Search index.
  references:
    - url: https://www.mongodb.com/docs/atlas/atlas-vector-search/vector-search-overview/
      title: Atlas Vector Search Overview
    - url: https://www.mongodb.com/docs/atlas/atlas-vector-search/vector-search-type/
      title: How to Index Fields for Vector Search
    - url: https://www.mongodb.com/blog/post/dedicated-search-nodes-vector-search-now-in-general-availability
      title: "Vector Search and Dedicated Search Nodes: Now in General Availability"

- author_email: jessica.roberts@mongodb.com
  questions:
    - How does Atlas Search differ from Atlas Vector Search?
  answer: |
    Atlas Search and Atlas Vector Search serve different purposes in MongoDB:

    **Atlas Search**: This feature is designed for keyword-based searches. It allows you to perform full-text searches on your data, using the actual text and any defined synonym mappings. It's ideal for scenarios where you need to find documents containing specific words or phrases.

    **Atlas Vector Search**: This feature focuses on semantic search, which means it searches through data based on the meaning captured in vectors. It is particularly useful for applications that require understanding the context or intent behind the data, such as recommendation systems or AI-driven applications. Vector search allows you to query data based on its semantic meaning rather than just keyword matches.

    In summary, Atlas Search is best for traditional text-based searches, while Atlas Vector Search allows searching through data based on semantic meaning captured in vectors and is suited for more advanced, context-aware searches.
  references:
    - url: https://www.mongodb.com/docs/atlas/atlas-search/
      title: Atlas Search Overview
    - url: https://www.mongodb.com/docs/atlas/atlas-vector-search/vector-search-overview/
      title: Atlas Vector Search Overview

- author_email: jessica.roberts@mongodb.com
  questions:
    - Can I use MongoDB as a vector database?
  answer: |
    Yes, you can use MongoDB as a vector database through Atlas Vector Search. This feature allows you to perform vector searches on your data stored in MongoDB. Vector search enables querying based on semantic meaning rather than just keyword matches, which is particularly useful for AI-powered applications. With Atlas Vector Search, you can seamlessly index and search vector data alongside your operational data, supporting use cases like semantic search, hybrid search, and generative search. This integration allows you to leverage MongoDB's robust database capabilities while implementing advanced search functionalities.
  references:
    - url: https://www.mongodb.com/docs/atlas/atlas-vector-search/vector-search-overview/
      title: Atlas Vector Search Overview

- author_email: jessica.roberts@mongodb.com
  questions:
    - How does MongoDB Compass help me with visualizing and understanding my data model?
  answer: |
    MongoDB Compass provides a graphical interface where you can:

    - Analyze your document schema to understand the structure of your data, including field types, value ranges, and data patterns.
    - Visualize, validate, and analyze your schema, making it easier to see how your data is organized.
    - Receive performance insights and suggestions for improving your schema and data modeling practices.
    - Use tools like the aggregation pipeline builder and visual explain plans to further explore and optimize your data model.
    - Leverage natural language to generate queries and build aggregations by submitting prompts in plain English and receiving executable MongoDB Query API syntax.

    Compass makes it easy to explore, refine, and optimize your data directly from an intuitive interface, helping you gain deeper insights into your MongoDB collections.
  references:
    - url: https://www.mongodb.com/docs/compass/
      title: MongoDB Compass Documentation
    - url: https://www.mongodb.com/docs/compass/schema/
      title: Analyze Your Data Schema
    - url: https://www.mongodb.com/docs/compass/performance/
      title: View Real-Time Performance
    - url: https://www.mongodb.com/docs/compass/create-agg-pipeline/
      title: Create an Aggregation Pipeline
    - url: https://www.mongodb.com/docs/compass/query-with-natural-language/
      title: Query with Natural Language
- author_email: jessica.roberts@mongodb.com
  questions:
    - How do I get started with MongoDB Compass?
  answer: |
    To start using MongoDB Compass, download the desktop application. Compass is free to use, source available, and can be run on macOS, Windows, and Linux.

    Our documentation on MongoDB Compass includes instructions on downloading, installing, and connecting Compass to your MongoDB deployments. You can also refer to our documentation to learn how to visually explore your data with Compass.
  references:
    - url: https://www.mongodb.com/try/download/compass
      title: MongoDB Compass Download (GUI)
    - url: https://www.mongodb.com/docs/compass/
      title: MongoDB Compass Documentation
    - url: https://www.mongodb.com/products/tools/compass
      title: MongoDB Compass
    - url: https://learn.mongodb.com/courses/mongodb-compass
      title: "Learning Byte: MongoDB Compass"
    - url: https://www.mongodb.com/library/compass/mongodb-has-schemas?lb-mode=overlay
      title: MongoDB Has Schemas!?!
- author_email: jessica.roberts@mongodb.com
  questions:
    - Is MongoDB Compass available in the Atlas UI?
  answer: |
    Compass is a desktop application. However, MongoDB has a new data management experience that brings the familiarity and power of MongoDB Compass to the Atlas UI.

    This new Data Explorer experience empowers developers to view and understand their data, as well as test and optimize queries directly within the browser, streamlining application development and enriching data management processes.
  references:
    - url: https://cloud.mongodb.com/go?l=https%3A%2F%2Fcloud.mongodb.com%2Fv2%2F%3Cproject%3E%23%2Fmetrics%2FreplicaSet%2F%3Creplset%3E%2Fexplorer
      title: Atlas Data Explorer
    - url: https://www.mongodb.com/blog/post/product-release-announcements/new-data-management-experience-in-atlas-ui
      title: New Data Management Experience in the Atlas UI
    - url: https://youtube.com/shorts/3MK5fZYlwtw
      title: NEW MongoDB Atlas Data Explorer | Unified Data Exploration!
- questions:
    - How do I load my own data into MongoDB Atlas?
  answer: |
    There are several ways to load data into MongoDB Atlas, depending on specific needs:

    - **Migrate from an existing MongoDB deployment:** Use the Live Migration Service in the Atlas UI for a guided, zero-downtime process. You can also use the mongorestore or mongosync utilities for self-managed migrations.
    - **Migrate from a SQL database:** Use the MongoDB Relational Migrator to automate the schema design and migration process from databases like Oracle, SQL Server, MySQL, and PostgreSQL.
    - **Migrate from files or other non-relational databases:** Use the command-line utility mongoimport to load data from standard file formats like JSON, CSV, and TSV. For other databases, you can export the data to a supported file format first, then import it.
    - **Generate mock or synthetic data:** Perfect for testing or prototyping, Atlas supports generating realistic data sets.
  author_email: jessica.roberts@mongodb.com
  references:
    - url: https://www.mongodb.com/docs/tools-and-connectors/
      title: MongoDB Migrators, Tools, and Connectors
    - url: https://www.mongodb.com/docs/atlas/import/
      title: Migrate or Import Data
    - url: https://www.mongodb.com/docs/database-tools/mongoimport/
      title: mongoimport
    - url: https://www.mongodb.com/docs/mongosync/current/reference/mongosync/
      title: mongosync
    - url: https://www.mongodb.com/docs/database-tools/mongorestore/
      title: mongorestore
    - url: https://www.mongodb.com/docs/atlas/synthetic-data/
      title: Generate Synthetic Data
    - url: https://cloud.mongodb.com/go?l=https%3A%2F%2Fcloud.mongodb.com%2Fv2%2F%3Cproject%3E%23%2FaddData%2FCluster0%2Fcreate
      title: Add Data in Atlas
    - url: https://www.mongodb.com/docs/atlas/import/c2c-pull-live-migration/
      title: Live Migrate (Pull) a Cluster into Atlas
    - url: https://www.mongodb.com/docs/relational-migrator/
      title: What is Relational Migrator
- questions:
    - How can I configure user roles and database users to manage user access?
  answer: |
    MongoDB Atlas uses a role-based access control system. A **role** is a set of privileges that grants a user permission to perform specific actions on certain resources. For example, the `readWrite` role allows a user to read from and write to any collection in a database, while the `dbAdmin` role grants administrative privileges for a specific database. You can also create custom roles to define more granular permissions.

    To manage user access in MongoDB Atlas, you need to configure **database users** and assign them **roles** based on the **principle of least privilege**. This means granting users only the permissions they need to do their jobs, minimizing potential security risks.

    **Adding a Database User**

    1. Navigate to the **Database Access** tab in your Atlas project.
    2. Click **Add New Database User**.
    3. Choose an authentication method:
       - **Password:** A simple username and password.
       - **Certificate:** Recommended for secure, automated connections.
       - **LDAP:** For integration with corporate directories.
    4. Specify the user's **Username**.
    5. Assign **Built-In Roles** or create a **Custom Role** to grant specific privileges. For instance, a user who only needs to read data should be assigned the read role for a particular database.
    6. Click **Add User**.
  author_email: jessica.roberts@mongodb.com
  references:
    - url: https://www.mongodb.com/docs/atlas/security-add-mongodb-users/#std-label-mongodb-users
      title: Configure Database Users
    - url: https://www.mongodb.com/docs/atlas/mongodb-users-roles-and-privileges/
      title: MongoDB Atlas Built-In Roles and Privileges
- questions:
    - What security and backup settings should I configure for my new MongoDB Atlas cluster?
  answer: |
    It's important to set up your security options during the initial configuration of your MongoDB environment to ensure protection from the start. These security settings are off by default and need to be configured.

    **Configure Security Settings**

    1. Log in to your Atlas account.
    2. In the top navigation bar, select your organization from the **Organizations** menu.
    3. Click the **Organization Settings** gear icon next to the Organizations menu.
    4. Configure your security settings, including Multi-Factor Authentication, Federated Authentication, and more.

    Regularly review and update these settings to adapt to evolving security threats and compliance requirements.
  author_email: jessica.roberts@mongodb.com
  references:
    - url: https://www.mongodb.com/docs/atlas/security-multi-factor-authentication/#std-label-atlas-enable-mfa
      title: Manage Multi-Factor Authentication Options
    - url: https://www.mongodb.com/docs/atlas/security/federated-authentication/#std-label-atlas-federated-authentication
      title: Configure Federated Authentication
    - url: https://www.mongodb.com/docs/manual/security/
      title: MongoDB Security Database Manual
- questions:
    - Why should I choose MongoDB for AI?
  answer: |
    MongoDB helps organizations accelerate AI adoption by unifying data for operational and AI workloads in a single platform. Its document model seamlessly integrates structured and unstructured data, providing consistency that enhances AI-powered application performance. MongoDB's search, vector, hybrid search, and state-of-the-art embedding models from Voyage AI empower businesses to perform efficient semantic searches, enabling high-quality retrieval-augmented generation (RAG), personalization features, and other cutting-edge AI capabilities directly within their applications. This eliminates the need for complex multi-database architectures and reduces time-to-market for AI-powered services.

    MongoDB also ensures enterprise-grade security, scalability, and compliance certifications (GDPR, HIPAA, SOC 2, ISO, etc.), so businesses can confidently implement AI solutions in regulated industries.
  author_email: jessica.roberts@mongodb.com
  references:
    - url: https://www.mongodb.com/products/platform/atlas-vector-search
      title: Atlas Vector Search
    - url: https://www.mongodb.com/products/platform/ai-search-and-retrieval
      title: MongoDB and Voyage AI
- questions:
    - How can MongoDB help us innovate faster?
  answer: |
    MongoDB’s flexible schema enables faster application development and iteration. Designed to handle changes in application requirements, the document model organizes structured and unstructured data according to how the application accesses it, not the other way around. This means teams can quickly adapt to new requirements without lengthy schema migrations, helping accelerate time-to-market.

    MongoDB also supports modern workloads such as AI, real-time analytics, and personalization, empowering businesses to experiment and innovate continuously.
  author_email: jessica.roberts@mongodb.com
  references:
    - url: https://www.mongodb.com/resources/services/innovation-accelerator
      title: MongoDB Innovation Accelerator for Business Agility
    - url: https://www.mongodb.com/resources/solutions/use-cases/developer-autonomy-document-model
      title: Developer Autonomy and the Document Model
    - url: https://www.mongodb.com/solutions/use-cases
      title: MongoDB Use Cases
- questions:
    - Can MongoDB modernize our legacy systems?
  answer: |
    Yes, MongoDB enables organizations to modernize legacy systems with speed, scalability, and agility. By replacing rigid relational databases with MongoDB's flexible document model, businesses can overcome the limitations of outdated IT infrastructure, reduce latency, and accelerate workflows by up to 10× faster. The transition process, including MongoDB Relational Migrator, minimizes disruption while helping teams unlock advanced capabilities such as real-time analytics and integrated vector search for AI workloads.

    - MongoDB Relational Migrator simplifies moving data and workloads from RDBMS into MongoDB, helping teams modernize without disruption.
    - The MongoDB Application Modernization Platform uses AI to transform legacy applications into modern, scalable services up to 10x faster than traditional approaches.
  author_email: jessica.roberts@mongodb.com
  references:
    - url: https://www.mongodb.com/solutions/use-cases/modernize
      title: Modernize without friction
    - url: https://www.mongodb.com/products/tools/relational-migrator
      title: MongoDB Relational Migrator
- questions:
    - How does MongoDB keep our business secure?
  answer: |
    MongoDB provides enterprise-grade security (encryption, role-based access, auditing), automated backups, and global availability to protect mission-critical data. Its multi-cloud and disaster recovery capabilities help ensure business continuity, while Atlas offers governance controls and compliance certifications (ISO, SOC 2, GDPR, HIPAA, and more). This makes MongoDB a reliable foundation for regulated and high-growth industries.
  author_email: jessica.roberts@mongodb.com
  references:
    - url: https://www.mongodb.com/security
      title: Addressing Security Vulnerabilities
    - url: https://www.mongodb.com/products/platform/atlas-database
      title: Atlas Database
- questions:
    - How does MongoDB scale for enterprise growth?
  answer: |
    MongoDB scales dynamically to support enterprise growth by leveraging horizontal scaling via native sharding and vertical scaling to adjust compute and storage resources as needed. MongoDB’s architecture efficiently manages terabytes to petabytes of data and thousands of queries per second, ensuring high performance, uptime resilience, and cost efficiency. Atlas provides auto-scaling capabilities, enabling businesses to grow seamlessly without downtime—whether for global apps, real-time analytics, or AI workloads.

    MongoDB’s native replica set clusters ensure redundancy for continuous access and quick recovery during disruptions, making it ideal for enterprises experiencing rapid data growth. By aligning with modern workloads, MongoDB offers scalability designed to maintain high availability and efficient performance as business demands evolve.
  author_email: jessica.roberts@mongodb.com
  references:
    - url: https://www.mongodb.com/resources/compare/advantages-of-mongodb
      title: Advantages of MongoDB
    - url: https://www.mongodb.com/products/platform
      title: MongoDB Atlas. The modern multi-cloud database.
    - url: https://www.mongodb.com/resources/basics/horizontal-vs-vertical-scaling
      title: A Guide to Horizontal vs Vertical Scaling
- questions:
    - How can we optimize costs with MongoDB?
  answer: |
    MongoDB helps businesses reduce costs by eliminating the need for rigid schema migrations, reducing developer overhead, and consolidating workloads into a single platform instead of relying on multiple point solutions. With Atlas, you can take advantage of auto-scaling clusters, pay-as-you-go pricing, and multi-cloud deployment flexibility to optimize spend without compromising performance. Organizations often see reduced infrastructure and licensing costs compared to legacy relational databases.
  author_email: jessica.roberts@mongodb.com
  references:
    - url: https://www.mongodb.com/pricing
      title: MongoDB Pricing
    - url: https://www.mongodb.com/docs/atlas/architecture/current/cost-saving-config/
      title: Recommendations for Atlas Cost-Saving Configurations
    - url: https://www.mongodb.com/company/blog/product-release-announcements/mongodb-atlas-introduces-enhanced-cost-optimization-tools
      title: MongoDB Atlas Introduces Enhanced Cost Optimization Tools
- questions:
    - Does MongoDB meet compliance and governance requirements?
  answer: |
    Yes, MongoDB supports enterprise-grade compliance and governance requirements, including encryption at rest and in transit, role-based access control (RBAC), auditing, and disaster recovery capabilities. MongoDB’s security features integrate with established protocols, ensuring data integrity and safeguarding mission-critical workloads.

    MongoDB Atlas proactively aids compliance with certifications like GDPR, SOC 2, HIPAA, and ISO standards. For industries such as finance and healthcare, MongoDB enables organizations to confidently address regulatory demands. For instance, MongoDB empowers financial institutions to process sensitive data securely while reducing breaches and responding efficiently to audits and reporting requirements.
  author_email: jessica.roberts@mongodb.com
  references:
    - url: https://www.mongodb.com/products/platform/atlas-database
      title: Atlas Database
    - url: https://www.mongodb.com/security
      title: Addressing Security Vulnerabilities
    - url: https://www.mongodb.com/products/self-managed/enterprise-advanced
      title: Enterprise Advanced
- questions:
    - What advantages does MongoDB offer over relational databases?
  answer: |
    MongoDB offers greater flexibility and speed compared to traditional relational databases. Instead of being confined to rigid, pre-defined schemas, MongoDB’s document model lets teams get started quickly and adapt as requirements evolve. You can introduce schema validation up front or enforce it as your application matures—without losing the flexibility to change later when business needs shift. This reduces costly schema migrations and accelerates development.

    MongoDB also simplifies queries by eliminating many complex joins, supports a wide variety of modern workloads (from mobile to AI/ML), and scales horizontally with ease. This makes it easier for businesses to deliver new features faster, reduce operational overhead, and future-proof applications as data requirements change.
  author_email: jessica.roberts@mongodb.com
  references:
    - url: https://www.mongodb.com/resources/compare/advantages-of-mongodb
      title: Advantages of MongoDB
- questions:
    - How can MongoDB power enterprise AI at scale?
  answer: |
    MongoDB enables enterprises to operationalize AI at scale by combining transactional, unstructured, and vector data in one platform. With Atlas Vector Search and support for Voyage AI embeddings, businesses can build production-ready generative AI and semantic search applications without needing separate systems for data and AI workloads. This unified approach accelerates time-to-market, reduces cost and complexity, and helps companies deliver differentiated customer experiences powered by AI.
  author_email: jessica.roberts@mongodb.com
  references:
    - url: https://www.mongodb.com/products/platform/atlas-vector-search
      title: Atlas Vector Search
    - url: https://www.mongodb.com/products/platform/ai-search-and-retrieval
      title: MongoDB and Voyage AI
- questions:
    - How does MongoDB compare to Postgres?
  answer: |
    MongoDB and PostgreSQL both offer robust capabilities for a wide range of use cases, but they differ significantly in their approach to data storage, querying, and scalability.

    - **Data Model:** MongoDB uses a flexible document data model, storing data in JSON-like documents, which allows for dynamic and multi-structured data management. PostgreSQL, on the other hand, uses a traditional relational model with tables, rows, and columns, based on SQL.
    - **Scalability:** MongoDB excels in horizontal scalability with its scale-out architecture, which efficiently handles sharding across data centers and cloud regions. This makes it ideal for applications requiring global reach and low-latency access. PostgreSQL can face challenges with horizontal scaling due to its architecture.
    - **Developer Productivity:** MongoDB offers more flexibility in data modeling and is often seen as more developer-friendly, especially for applications that require rapid iteration and handling of diverse data types.
    - **Deployment Options:** MongoDB is available as a database-as-a-service through MongoDB Atlas on major cloud platforms, as well as in Community and Enterprise Advanced editions for self-managed deployments. PostgreSQL can be deployed as a self-managed database or as a service through various cloud providers, though each implementation may differ from the core PostgreSQL.

    Overall, MongoDB is often chosen for its flexibility, scalability, and ability to handle high volumes of diverse data types, making it a strong choice for modern, globally distributed applications.
  author_email: jessica.roberts@mongodb.com
  references:
    - url: https://www.mongodb.com/resources/compare/mongodb-postgresql
      title: Comparing MongoDB vs PostgreSQL
- questions:
    - Is Elasticsearch like MongoDB?
  answer: |
    Both have different use cases. When it comes to application search scenarios, Elasticsearch is generally used as a 'bolt-on' search engine, while MongoDB is a developer data platform that allows three systems to be compressed into a single solution.

    By integrating a database, search engine and sync mechanism into a single unified and fully managed platform, Atlas Search is the fastest and easiest way to build relevance-based search directly into your applications.
  author_email: jessica.roberts@mongodb.com
  references:
    - url: https://www.mongodb.com/resources/compare/mongodb-atlas-search-vs-elastic-elasticsearch
      title: Elasticsearch vs MongoDB Atlas Search
- questions:
    - Does MongoDB offer support for developing AI applications?
  answer: |
    Yes, MongoDB offers extensive support for developing AI applications. The MongoDB AI Applications Program (MAAP) is specifically designed to help organizations rapidly build and deploy AI-enriched applications at an enterprise scale. It provides resources such as reference architectures, vetted AI models, hosting solutions, and technical support. Additionally, MongoDB offers professional services to assist with AI strategy and acceleration, helping customers identify high-impact AI opportunities and execute solutions from design through prototyping.

    MongoDB also integrates with leading AI frameworks and services, such as Microsoft Azure OpenAI, Amazon Bedrock, Google Cloud Vertex AI, and LangChain, to simplify the development and deployment of generative AI applications. These integrations, along with MongoDB's flexible data model and distributed architecture, provide a robust platform for building scalable, secure, and high-performing AI applications.
  author_email: jessica.roberts@mongodb.com
  references:
    - url: https://www.mongodb.com/services/consulting/ai-accelerator
      title: AI Accelerator
- questions:
    - How secure is MongoDB Atlas?
  answer: |
    MongoDB Atlas delivers enterprise-grade security out of the box, ensuring sensitive data is protected at every stage:

    - **Access Control**: Flexible role-based access controls and streamlined authentication ensure that only authorized users and applications can access data.
    - **Encryption**: Data is encrypted at rest, in transit, and in use to prevent unauthorized access, with no cryptography expertise required.
    - **Automatic Patches**: Security patches are applied automatically, protecting deployments without operational disruption.
    - **Auditing**: Granular auditing provides visibility into database activity to meet compliance and detect security issues.
    - **Regulatory Compliance**: Atlas supports multi-region clusters and is certified with 15+ compliance standards, helping meet data residency and privacy regulations for the most stringent compliance requirements.

    These features make Atlas a reliable choice for enterprises with stringent security and compliance needs.
  author_email: jessica.roberts@mongodb.com
  references:
    - url: https://www.mongodb.com/products/platform/trust
      title: MongoDB Trust Center
- questions:
    - What are some of the reasons Bendigo and Adelaide chose MongoDB?
  answer: |
    Bendigo and Adelaide Bank chose MongoDB for several reasons as part of their digital transformation and modernization efforts:

    - **Simplification and Consolidation**: MongoDB helped the bank reduce complexity by simplifying and consolidating their tech stack, which had become sprawling due to years of mergers and acquisitions.
    - **Multi-Cloud Support**: MongoDB Atlas supports the three major cloud providers (Google Cloud, AWS, Azure), which facilitated the bank's move to a multi-cloud environment and provided portability.
    - **Developer Empowerment**: MongoDB's document model aligns with how developers think and code, enabling faster application development. The bank wanted to empower developers to innovate and reduce development time.
    - **Cost Efficiency**: Migrating to MongoDB Atlas was achieved at a fraction of the cost compared to traditional legacy-to-cloud migrations.
    - **AI Integration**: MongoDB's tools allowed the bank to automate repetitive tasks with AI, significantly reducing development time and enhancing innovation.
    - **Security and Reliability**: MongoDB Atlas provided high levels of security and reliability, crucial for managing the bank's real-time operational data.

    These factors combined to make MongoDB a strategic choice for Bendigo and Adelaide Bank as they modernized their core banking technology and improved their digital infrastructure.
  author_email: jessica.roberts@mongodb.com
  references:
    - url: https://www.mongodb.com/solutions/customer-case-studies/bendigo-and-adelaide-bank
      title: Bendigo and Adelaide Bank modernize core banking technology with Gen AI
- questions:
    - Are there any case studies demonstrating MongoDB’s effectiveness?
  answer: |
    Yes, there are several case studies demonstrating MongoDB’s effectiveness:

    - **Predictive Maintenance in Manufacturing:** Organizations that adopted MongoDB Atlas for asset maintenance achieved operational improvements including a 15–20% reduction in downtime, 5–20% increase in labor productivity, and 30–60% reduction in maintenance costs. MongoDB Atlas enabled real-time monitoring, AI-powered analysis, and automated maintenance workflows.
    - **AI-Powered Healthcare:** MongoDB Atlas and Microsoft delivered AI solutions for breast cancer care, integrating AI-driven diagnostics, predictive modeling, and advanced analytics through unified data management. This led to streamlined diagnostic processes, automated documentation, and improved data-driven decision-making in healthcare.
    - **Insurance Claim Adjustment:** MongoDB has been used to build AI-powered semantic search solutions for auto insurance claim adjustment, enhancing operational efficiency and improving the ability to handle large volumes of unstructured data.

    These examples illustrate MongoDB's effectiveness across various industries, enabling real-time insights, unified data management, AI integration, and significant cost and efficiency improvements.

    For more case studies, see [Customer Success Stories](https://www.mongodb.com/solutions/customer-case-studies?tck=mongodb_ai_chatbot).
  author_email: jessica.roberts@mongodb.com
  references:
    - url: https://www.mongodb.com/solutions/customer-case-studies
      title: Customer Success Stories
    - url: https://www.mongodb.com/resources/products/fundamentals/why-use-mongodb
      title: Why Use MongoDB and When to Use It?
- questions:
    - Who are the top companies using MongoDB Atlas?
  answer: |
    Several prominent companies leverage MongoDB Atlas to enhance their operations and services. Here are a few notable examples:

    - **Autodesk**: Autodesk uses MongoDB Atlas to power its Product Insights platform, increasing insights delivered by 300% on its analytics platform.
    - **Delivery Hero**: This global leader in online food delivery uses MongoDB Atlas to optimize operations and improve performance, managing over 100 million products without latency issues.
    - **Coinbase**: As a major cryptocurrency exchange, Coinbase relies on MongoDB Atlas to handle extensive data workloads and has developed predictive scaling solutions to manage traffic surges effectively.
    - **Toyota Connected**: Toyota Connected migrated to Atlas and AWS to enhance reliability for its safety platform.
    - **Wells Fargo**: This multinational bank uses MongoDB to modernize its card payments platform, handling over 7 million transactions.

    These companies demonstrate the versatility and scalability of MongoDB Atlas across various industries, including software, food delivery, finance, and automotive safety.
  author_email: jessica.roberts@mongodb.com
  references:
    - url: https://www.mongodb.com/solutions/customer-case-studies
      title: Customer Success Stories
